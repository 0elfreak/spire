// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/spiffe/spire/proto/common"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	datastore "github.com/spiffe/spire/proto/server/datastore"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// CreateFederatedEntry mocks base method
func (m *MockDataStore) CreateFederatedEntry(request *datastore.CreateFederatedEntryRequest) (*datastore.CreateFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateFederatedEntry", request)
	ret0, _ := ret[0].(*datastore.CreateFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFederatedEntry indicates an expected call of CreateFederatedEntry
func (mr *MockDataStoreMockRecorder) CreateFederatedEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).CreateFederatedEntry), request)
}

// ListFederatedEntry mocks base method
func (m *MockDataStore) ListFederatedEntry(request *datastore.ListFederatedEntryRequest) (*datastore.ListFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "ListFederatedEntry", request)
	ret0, _ := ret[0].(*datastore.ListFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFederatedEntry indicates an expected call of ListFederatedEntry
func (mr *MockDataStoreMockRecorder) ListFederatedEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).ListFederatedEntry), request)
}

// UpdateFederatedEntry mocks base method
func (m *MockDataStore) UpdateFederatedEntry(request *datastore.UpdateFederatedEntryRequest) (*datastore.UpdateFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateFederatedEntry", request)
	ret0, _ := ret[0].(*datastore.UpdateFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFederatedEntry indicates an expected call of UpdateFederatedEntry
func (mr *MockDataStoreMockRecorder) UpdateFederatedEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateFederatedEntry), request)
}

// DeleteFederatedEntry mocks base method
func (m *MockDataStore) DeleteFederatedEntry(request *datastore.DeleteFederatedEntryRequest) (*datastore.DeleteFederatedEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteFederatedEntry", request)
	ret0, _ := ret[0].(*datastore.DeleteFederatedEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFederatedEntry indicates an expected call of DeleteFederatedEntry
func (mr *MockDataStoreMockRecorder) DeleteFederatedEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFederatedEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteFederatedEntry), request)
}

// CreateAttestedNodeEntry mocks base method
func (m *MockDataStore) CreateAttestedNodeEntry(request *datastore.CreateAttestedNodeEntryRequest) (*datastore.CreateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateAttestedNodeEntry", request)
	ret0, _ := ret[0].(*datastore.CreateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttestedNodeEntry indicates an expected call of CreateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) CreateAttestedNodeEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).CreateAttestedNodeEntry), request)
}

// FetchAttestedNodeEntry mocks base method
func (m *MockDataStore) FetchAttestedNodeEntry(request *datastore.FetchAttestedNodeEntryRequest) (*datastore.FetchAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchAttestedNodeEntry", request)
	ret0, _ := ret[0].(*datastore.FetchAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttestedNodeEntry indicates an expected call of FetchAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) FetchAttestedNodeEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).FetchAttestedNodeEntry), request)
}

// FetchStaleNodeEntries mocks base method
func (m *MockDataStore) FetchStaleNodeEntries(request *datastore.FetchStaleNodeEntriesRequest) (*datastore.FetchStaleNodeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "FetchStaleNodeEntries", request)
	ret0, _ := ret[0].(*datastore.FetchStaleNodeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchStaleNodeEntries indicates an expected call of FetchStaleNodeEntries
func (mr *MockDataStoreMockRecorder) FetchStaleNodeEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchStaleNodeEntries", reflect.TypeOf((*MockDataStore)(nil).FetchStaleNodeEntries), request)
}

// UpdateAttestedNodeEntry mocks base method
func (m *MockDataStore) UpdateAttestedNodeEntry(request *datastore.UpdateAttestedNodeEntryRequest) (*datastore.UpdateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAttestedNodeEntry", request)
	ret0, _ := ret[0].(*datastore.UpdateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttestedNodeEntry indicates an expected call of UpdateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) UpdateAttestedNodeEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateAttestedNodeEntry), request)
}

// DeleteAttestedNodeEntry mocks base method
func (m *MockDataStore) DeleteAttestedNodeEntry(request *datastore.DeleteAttestedNodeEntryRequest) (*datastore.DeleteAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteAttestedNodeEntry", request)
	ret0, _ := ret[0].(*datastore.DeleteAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttestedNodeEntry indicates an expected call of DeleteAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) DeleteAttestedNodeEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteAttestedNodeEntry), request)
}

// CreateNodeResolverMapEntry mocks base method
func (m *MockDataStore) CreateNodeResolverMapEntry(request *datastore.CreateNodeResolverMapEntryRequest) (*datastore.CreateNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateNodeResolverMapEntry", request)
	ret0, _ := ret[0].(*datastore.CreateNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeResolverMapEntry indicates an expected call of CreateNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) CreateNodeResolverMapEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).CreateNodeResolverMapEntry), request)
}

// FetchNodeResolverMapEntry mocks base method
func (m *MockDataStore) FetchNodeResolverMapEntry(request *datastore.FetchNodeResolverMapEntryRequest) (*datastore.FetchNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchNodeResolverMapEntry", request)
	ret0, _ := ret[0].(*datastore.FetchNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNodeResolverMapEntry indicates an expected call of FetchNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) FetchNodeResolverMapEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).FetchNodeResolverMapEntry), request)
}

// DeleteNodeResolverMapEntry mocks base method
func (m *MockDataStore) DeleteNodeResolverMapEntry(request *datastore.DeleteNodeResolverMapEntryRequest) (*datastore.DeleteNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteNodeResolverMapEntry", request)
	ret0, _ := ret[0].(*datastore.DeleteNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeResolverMapEntry indicates an expected call of DeleteNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) DeleteNodeResolverMapEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteNodeResolverMapEntry), request)
}

// RectifyNodeResolverMapEntries mocks base method
func (m *MockDataStore) RectifyNodeResolverMapEntries(request *datastore.RectifyNodeResolverMapEntriesRequest) (*datastore.RectifyNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "RectifyNodeResolverMapEntries", request)
	ret0, _ := ret[0].(*datastore.RectifyNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyNodeResolverMapEntries indicates an expected call of RectifyNodeResolverMapEntries
func (mr *MockDataStoreMockRecorder) RectifyNodeResolverMapEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyNodeResolverMapEntries", reflect.TypeOf((*MockDataStore)(nil).RectifyNodeResolverMapEntries), request)
}

// CreateRegistrationEntry mocks base method
func (m *MockDataStore) CreateRegistrationEntry(request *datastore.CreateRegistrationEntryRequest) (*datastore.CreateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateRegistrationEntry", request)
	ret0, _ := ret[0].(*datastore.CreateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationEntry indicates an expected call of CreateRegistrationEntry
func (mr *MockDataStoreMockRecorder) CreateRegistrationEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).CreateRegistrationEntry), request)
}

// FetchRegistrationEntry mocks base method
func (m *MockDataStore) FetchRegistrationEntry(request *datastore.FetchRegistrationEntryRequest) (*datastore.FetchRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchRegistrationEntry", request)
	ret0, _ := ret[0].(*datastore.FetchRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRegistrationEntry indicates an expected call of FetchRegistrationEntry
func (mr *MockDataStoreMockRecorder) FetchRegistrationEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).FetchRegistrationEntry), request)
}

// UpdateRegistrationEntry mocks base method
func (m *MockDataStore) UpdateRegistrationEntry(request *datastore.UpdateRegistrationEntryRequest) (*datastore.UpdateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateRegistrationEntry", request)
	ret0, _ := ret[0].(*datastore.UpdateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationEntry indicates an expected call of UpdateRegistrationEntry
func (mr *MockDataStoreMockRecorder) UpdateRegistrationEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateRegistrationEntry), request)
}

// DeleteRegistrationEntry mocks base method
func (m *MockDataStore) DeleteRegistrationEntry(request *datastore.DeleteRegistrationEntryRequest) (*datastore.DeleteRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistrationEntry", request)
	ret0, _ := ret[0].(*datastore.DeleteRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationEntry indicates an expected call of DeleteRegistrationEntry
func (mr *MockDataStoreMockRecorder) DeleteRegistrationEntry(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteRegistrationEntry), request)
}

// ListParentIDEntries mocks base method
func (m *MockDataStore) ListParentIDEntries(request *datastore.ListParentIDEntriesRequest) (*datastore.ListParentIDEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListParentIDEntries", request)
	ret0, _ := ret[0].(*datastore.ListParentIDEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListParentIDEntries indicates an expected call of ListParentIDEntries
func (mr *MockDataStoreMockRecorder) ListParentIDEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListParentIDEntries", reflect.TypeOf((*MockDataStore)(nil).ListParentIDEntries), request)
}

// ListSelectorEntries mocks base method
func (m *MockDataStore) ListSelectorEntries(request *datastore.ListSelectorEntriesRequest) (*datastore.ListSelectorEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListSelectorEntries", request)
	ret0, _ := ret[0].(*datastore.ListSelectorEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSelectorEntries indicates an expected call of ListSelectorEntries
func (mr *MockDataStoreMockRecorder) ListSelectorEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSelectorEntries", reflect.TypeOf((*MockDataStore)(nil).ListSelectorEntries), request)
}

// ListPowerSelectorEntries mocks base method
func (m *MockDataStore) ListPowerSelectorEntries(request *datastore.ListSelectorEntriesRequest) (*datastore.ListSelectorEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListPowerSelectorEntries", request)
	ret0, _ := ret[0].(*datastore.ListSelectorEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPowerSelectorEntries indicates an expected call of ListPowerSelectorEntries
func (mr *MockDataStoreMockRecorder) ListPowerSelectorEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPowerSelectorEntries", reflect.TypeOf((*MockDataStore)(nil).ListPowerSelectorEntries), request)
}

// ListSpiffeEntries mocks base method
func (m *MockDataStore) ListSpiffeEntries(request *datastore.ListSpiffeEntriesRequest) (*datastore.ListSpiffeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListSpiffeEntries", request)
	ret0, _ := ret[0].(*datastore.ListSpiffeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSpiffeEntries indicates an expected call of ListSpiffeEntries
func (mr *MockDataStoreMockRecorder) ListSpiffeEntries(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSpiffeEntries", reflect.TypeOf((*MockDataStore)(nil).ListSpiffeEntries), request)
}

// RegisterToken mocks base method
func (m *MockDataStore) RegisterToken(request *datastore.JoinToken) (*common.Empty, error) {
	ret := m.ctrl.Call(m, "RegisterToken", request)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterToken indicates an expected call of RegisterToken
func (mr *MockDataStoreMockRecorder) RegisterToken(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterToken", reflect.TypeOf((*MockDataStore)(nil).RegisterToken), request)
}

// FetchToken mocks base method
func (m *MockDataStore) FetchToken(request *datastore.JoinToken) (*datastore.JoinToken, error) {
	ret := m.ctrl.Call(m, "FetchToken", request)
	ret0, _ := ret[0].(*datastore.JoinToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchToken indicates an expected call of FetchToken
func (mr *MockDataStoreMockRecorder) FetchToken(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchToken", reflect.TypeOf((*MockDataStore)(nil).FetchToken), request)
}

// DeleteToken mocks base method
func (m *MockDataStore) DeleteToken(request *datastore.JoinToken) (*common.Empty, error) {
	ret := m.ctrl.Call(m, "DeleteToken", request)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteToken indicates an expected call of DeleteToken
func (mr *MockDataStoreMockRecorder) DeleteToken(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockDataStore)(nil).DeleteToken), request)
}

// PruneTokens mocks base method
func (m *MockDataStore) PruneTokens(request *datastore.JoinToken) (*common.Empty, error) {
	ret := m.ctrl.Call(m, "PruneTokens", request)
	ret0, _ := ret[0].(*common.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneTokens indicates an expected call of PruneTokens
func (mr *MockDataStoreMockRecorder) PruneTokens(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneTokens", reflect.TypeOf((*MockDataStore)(nil).PruneTokens), request)
}

// Configure mocks base method
func (m *MockDataStore) Configure(request *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", request)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockDataStoreMockRecorder) Configure(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockDataStore)(nil).Configure), request)
}

// GetPluginInfo mocks base method
func (m *MockDataStore) GetPluginInfo(request *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", request)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockDataStoreMockRecorder) GetPluginInfo(request interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockDataStore)(nil).GetPluginInfo), request)
}
