#!/bin/bash

check-version-against-latest-release() {
    # This should be set by the CI/CD system based on the target branch of
    # the PR.
    if [ -n "${TEST_TARGET_BRANCH}" ]; then
        log-info "target branch (explicit): ${TEST_TARGET_BRANCH}"
    else
        TEST_TARGET_BRANCH="$(git --git-dir "${REPODIR}"/.git branch --show-current)"
        log-info "target branch (detected): ${TEST_TARGET_BRANCH}"
    fi

    _commit_version="$1"

    if [ "${TEST_TARGET_BRANCH}" = "master" ]; then
        # master should use the latest release tag from the repo
        _latest_version=$(git --git-dir "${REPODIR}"/.git tag -l 'v*' --sort -v:refname | head -n1 | cut -c 2-)
        log-info "latest release: ${_latest_version}"
    else
        # non-master should use the latest release tag from the branch, which
        # is assumed to be a parent of the current commit... if not, we'll need
        # to explicitly pass the remote branch to the "describe" command.
        _latest_version=$(git --git-dir "${REPODIR}"/.git describe --match "v*" --abbrev=0 | cut -c 2-)
        log-info "latest release from ${TEST_TARGET_BRANCH}: ${_latest_version}"
    fi

    log-info "commit version: ${_commit_version}"

    if [ "${_commit_version}" == "${_latest_version}" ]; then
        fail-now "commit version (${_commit_version}) must be greater than the latest release in this branch (${_latest_version}); has the version been bumped?"
    elif [ "$(printf '%s\n%s' "${_latest_version}" "${_commit_version}" | sort -V -r | head -n1)" != "${_commit_version}" ]; then
        fail-now "commit version (${_commit_version}) must be greater than the latest release in this branch (${_latest_version}); has the version been bumped?"
    fi
}

# Get current version from latest local image
docker-up spire-server-latest-local
_commit_version=$(docker-compose exec -T spire-server-latest-local \
            /opt/spire/bin/spire-server --version 2>&1 | cut -d'-' -f 1)
docker-down

# Get tag of the current commit
_current_tag=$(git --git-dir "${REPODIR}"/.git describe --exact-match HEAD --match "v*"  2> /dev/null | cut -c 2- || true)

case "${_current_tag}" in

  "${_commit_version}")
    log-info "current commit is a tagged commit and has the correct version (${_commit_version})"
    ;;

  "")
    log-info "current commit is not tagged; checking against the latest release in the branch"
    check-version-against-latest-release "${_commit_version}"
    ;;

  *)
    fail-now "current commit version (${_commit_version}) does not match the commit tag (${_current_tag})"
    ;;

esac
