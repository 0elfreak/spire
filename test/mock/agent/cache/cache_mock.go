// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/agent/cache/cache.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/spiffe/spire/pkg/agent/cache"
	common "github.com/spiffe/spire/proto/common"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Entry mocks base method
func (m *MockCache) Entry(arg0 []*common.Selector) []cache.CacheEntry {
	ret := m.ctrl.Call(m, "Entry", arg0)
	ret0, _ := ret[0].([]cache.CacheEntry)
	return ret0
}

// Entry indicates an expected call of Entry
func (mr *MockCacheMockRecorder) Entry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockCache)(nil).Entry), arg0)
}

// SetEntry mocks base method
func (m *MockCache) SetEntry(cacheEntry cache.CacheEntry) {
	m.ctrl.Call(m, "SetEntry", cacheEntry)
}

// SetEntry indicates an expected call of SetEntry
func (mr *MockCacheMockRecorder) SetEntry(cacheEntry interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetEntry", reflect.TypeOf((*MockCache)(nil).SetEntry), cacheEntry)
}

// DeleteEntry mocks base method
func (m *MockCache) DeleteEntry(arg0 []*common.Selector) bool {
	ret := m.ctrl.Call(m, "DeleteEntry", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteEntry indicates an expected call of DeleteEntry
func (mr *MockCacheMockRecorder) DeleteEntry(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntry", reflect.TypeOf((*MockCache)(nil).DeleteEntry), arg0)
}

// Entries mocks base method
func (m *MockCache) Entries() map[string][]cache.CacheEntry {
	ret := m.ctrl.Call(m, "Entries")
	ret0, _ := ret[0].(map[string][]cache.CacheEntry)
	return ret0
}

// Entries indicates an expected call of Entries
func (mr *MockCacheMockRecorder) Entries() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entries", reflect.TypeOf((*MockCache)(nil).Entries))
}

// MatchingEntries mocks base method
func (m *MockCache) MatchingEntries(arg0 []*common.Selector) []cache.CacheEntry {
	ret := m.ctrl.Call(m, "MatchingEntries", arg0)
	ret0, _ := ret[0].([]cache.CacheEntry)
	return ret0
}

// MatchingEntries indicates an expected call of MatchingEntries
func (mr *MockCacheMockRecorder) MatchingEntries(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MatchingEntries", reflect.TypeOf((*MockCache)(nil).MatchingEntries), arg0)
}
