// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

package registration

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/spire/proto/common"
import annotations "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// http from public import google/api/annotations.proto
var E_Http = annotations.E_Http

// Empty from public import github.com/spiffe/spire/proto/common/common.proto
type Empty = common.Empty

// AttestationData from public import github.com/spiffe/spire/proto/common/common.proto
type AttestationData = common.AttestationData

// Selector from public import github.com/spiffe/spire/proto/common/common.proto
type Selector = common.Selector

// Selectors from public import github.com/spiffe/spire/proto/common/common.proto
type Selectors = common.Selectors

// RegistrationEntry from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntry = common.RegistrationEntry

// RegistrationEntries from public import github.com/spiffe/spire/proto/common/common.proto
type RegistrationEntries = common.RegistrationEntries

// A type that represents the id of an entry.
type RegistrationEntryID struct {
	// RegistrationEntryID.
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RegistrationEntryID) Reset()         { *m = RegistrationEntryID{} }
func (m *RegistrationEntryID) String() string { return proto.CompactTextString(m) }
func (*RegistrationEntryID) ProtoMessage()    {}
func (*RegistrationEntryID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{0}
}
func (m *RegistrationEntryID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RegistrationEntryID.Unmarshal(m, b)
}
func (m *RegistrationEntryID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RegistrationEntryID.Marshal(b, m, deterministic)
}
func (dst *RegistrationEntryID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegistrationEntryID.Merge(dst, src)
}
func (m *RegistrationEntryID) XXX_Size() int {
	return xxx_messageInfo_RegistrationEntryID.Size(m)
}
func (m *RegistrationEntryID) XXX_DiscardUnknown() {
	xxx_messageInfo_RegistrationEntryID.DiscardUnknown(m)
}

var xxx_messageInfo_RegistrationEntryID proto.InternalMessageInfo

func (m *RegistrationEntryID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a parent Id.
type ParentID struct {
	// ParentId.
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParentID) Reset()         { *m = ParentID{} }
func (m *ParentID) String() string { return proto.CompactTextString(m) }
func (*ParentID) ProtoMessage()    {}
func (*ParentID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{1}
}
func (m *ParentID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParentID.Unmarshal(m, b)
}
func (m *ParentID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParentID.Marshal(b, m, deterministic)
}
func (dst *ParentID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParentID.Merge(dst, src)
}
func (m *ParentID) XXX_Size() int {
	return xxx_messageInfo_ParentID.Size(m)
}
func (m *ParentID) XXX_DiscardUnknown() {
	xxx_messageInfo_ParentID.DiscardUnknown(m)
}

var xxx_messageInfo_ParentID proto.InternalMessageInfo

func (m *ParentID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type that represents a SPIFFE Id.
type SpiffeID struct {
	// SpiffeId.
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SpiffeID) Reset()         { *m = SpiffeID{} }
func (m *SpiffeID) String() string { return proto.CompactTextString(m) }
func (*SpiffeID) ProtoMessage()    {}
func (*SpiffeID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{2}
}
func (m *SpiffeID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SpiffeID.Unmarshal(m, b)
}
func (m *SpiffeID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SpiffeID.Marshal(b, m, deterministic)
}
func (dst *SpiffeID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpiffeID.Merge(dst, src)
}
func (m *SpiffeID) XXX_Size() int {
	return xxx_messageInfo_SpiffeID.Size(m)
}
func (m *SpiffeID) XXX_DiscardUnknown() {
	xxx_messageInfo_SpiffeID.DiscardUnknown(m)
}

var xxx_messageInfo_SpiffeID proto.InternalMessageInfo

func (m *SpiffeID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// A type with the id with want to update plus values to modify.
type UpdateEntryRequest struct {
	// Id of the entry to update.
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// Values in the RegistrationEntry to update.
	Entry                *common.RegistrationEntry `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                  `json:"-"`
	XXX_unrecognized     []byte                    `json:"-"`
	XXX_sizecache        int32                     `json:"-"`
}

func (m *UpdateEntryRequest) Reset()         { *m = UpdateEntryRequest{} }
func (m *UpdateEntryRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateEntryRequest) ProtoMessage()    {}
func (*UpdateEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{3}
}
func (m *UpdateEntryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UpdateEntryRequest.Unmarshal(m, b)
}
func (m *UpdateEntryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UpdateEntryRequest.Marshal(b, m, deterministic)
}
func (dst *UpdateEntryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateEntryRequest.Merge(dst, src)
}
func (m *UpdateEntryRequest) XXX_Size() int {
	return xxx_messageInfo_UpdateEntryRequest.Size(m)
}
func (m *UpdateEntryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateEntryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateEntryRequest proto.InternalMessageInfo

func (m *UpdateEntryRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *UpdateEntryRequest) GetEntry() *common.RegistrationEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

// A CA bundle for a different Trust Domain than the one used and managed by the Server.
type FederatedBundle struct {
	// A SPIFFE ID that has a Federated Bundle
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
	// ASN.1 DER data of the bundle.
	CaCerts              []byte   `protobuf:"bytes,2,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FederatedBundle) Reset()         { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()    {}
func (*FederatedBundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{4}
}
func (m *FederatedBundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundle.Unmarshal(m, b)
}
func (m *FederatedBundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundle.Marshal(b, m, deterministic)
}
func (dst *FederatedBundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundle.Merge(dst, src)
}
func (m *FederatedBundle) XXX_Size() int {
	return xxx_messageInfo_FederatedBundle.Size(m)
}
func (m *FederatedBundle) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundle.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundle proto.InternalMessageInfo

func (m *FederatedBundle) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetCaCerts() []byte {
	if m != nil {
		return m.CaCerts
	}
	return nil
}

// It represents a list of federated bundles.
type FederatedBundles struct {
	// A list of FederatedBundle.
	Bundles              []*FederatedBundle `protobuf:"bytes,1,rep,name=bundles" json:"bundles,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FederatedBundles) Reset()         { *m = FederatedBundles{} }
func (m *FederatedBundles) String() string { return proto.CompactTextString(m) }
func (*FederatedBundles) ProtoMessage()    {}
func (*FederatedBundles) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{5}
}
func (m *FederatedBundles) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundles.Unmarshal(m, b)
}
func (m *FederatedBundles) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundles.Marshal(b, m, deterministic)
}
func (dst *FederatedBundles) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundles.Merge(dst, src)
}
func (m *FederatedBundles) XXX_Size() int {
	return xxx_messageInfo_FederatedBundles.Size(m)
}
func (m *FederatedBundles) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundles.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundles proto.InternalMessageInfo

func (m *FederatedBundles) GetBundles() []*FederatedBundle {
	if m != nil {
		return m.Bundles
	}
	return nil
}

// A type that represents a federated bundle id.
type FederatedBundleID struct {
	// SPIFFE ID of the federated bundle
	Id                   string   `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FederatedBundleID) Reset()         { *m = FederatedBundleID{} }
func (m *FederatedBundleID) String() string { return proto.CompactTextString(m) }
func (*FederatedBundleID) ProtoMessage()    {}
func (*FederatedBundleID) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{6}
}
func (m *FederatedBundleID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatedBundleID.Unmarshal(m, b)
}
func (m *FederatedBundleID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatedBundleID.Marshal(b, m, deterministic)
}
func (dst *FederatedBundleID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatedBundleID.Merge(dst, src)
}
func (m *FederatedBundleID) XXX_Size() int {
	return xxx_messageInfo_FederatedBundleID.Size(m)
}
func (m *FederatedBundleID) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatedBundleID.DiscardUnknown(m)
}

var xxx_messageInfo_FederatedBundleID proto.InternalMessageInfo

func (m *FederatedBundleID) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// JoinToken message is used for registering a new token
type JoinToken struct {
	// The join token. If not set, one will be generated
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
	// TTL in seconds
	Ttl                  int32    `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JoinToken) Reset()         { *m = JoinToken{} }
func (m *JoinToken) String() string { return proto.CompactTextString(m) }
func (*JoinToken) ProtoMessage()    {}
func (*JoinToken) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{7}
}
func (m *JoinToken) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JoinToken.Unmarshal(m, b)
}
func (m *JoinToken) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JoinToken.Marshal(b, m, deterministic)
}
func (dst *JoinToken) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JoinToken.Merge(dst, src)
}
func (m *JoinToken) XXX_Size() int {
	return xxx_messageInfo_JoinToken.Size(m)
}
func (m *JoinToken) XXX_DiscardUnknown() {
	xxx_messageInfo_JoinToken.DiscardUnknown(m)
}

var xxx_messageInfo_JoinToken proto.InternalMessageInfo

func (m *JoinToken) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

func (m *JoinToken) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// CA Bundle of the server
type Bundle struct {
	// ASN.1 DER data of the bundle.
	CaCerts              []byte   `protobuf:"bytes,1,opt,name=ca_certs,json=caCerts,proto3" json:"ca_certs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Bundle) Reset()         { *m = Bundle{} }
func (m *Bundle) String() string { return proto.CompactTextString(m) }
func (*Bundle) ProtoMessage()    {}
func (*Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor_registration_f0d00f73febef181, []int{8}
}
func (m *Bundle) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Bundle.Unmarshal(m, b)
}
func (m *Bundle) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Bundle.Marshal(b, m, deterministic)
}
func (dst *Bundle) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bundle.Merge(dst, src)
}
func (m *Bundle) XXX_Size() int {
	return xxx_messageInfo_Bundle.Size(m)
}
func (m *Bundle) XXX_DiscardUnknown() {
	xxx_messageInfo_Bundle.DiscardUnknown(m)
}

var xxx_messageInfo_Bundle proto.InternalMessageInfo

func (m *Bundle) GetCaCerts() []byte {
	if m != nil {
		return m.CaCerts
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistrationEntryID)(nil), "spire.api.registration.RegistrationEntryID")
	proto.RegisterType((*ParentID)(nil), "spire.api.registration.ParentID")
	proto.RegisterType((*SpiffeID)(nil), "spire.api.registration.SpiffeID")
	proto.RegisterType((*UpdateEntryRequest)(nil), "spire.api.registration.UpdateEntryRequest")
	proto.RegisterType((*FederatedBundle)(nil), "spire.api.registration.FederatedBundle")
	proto.RegisterType((*FederatedBundles)(nil), "spire.api.registration.FederatedBundles")
	proto.RegisterType((*FederatedBundleID)(nil), "spire.api.registration.FederatedBundleID")
	proto.RegisterType((*JoinToken)(nil), "spire.api.registration.JoinToken")
	proto.RegisterType((*Bundle)(nil), "spire.api.registration.Bundle")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FederatedBundles, error)
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *common.RegistrationEntry, opts ...grpc.CallOption) (*RegistrationEntryID, error) {
	out := new(RegistrationEntryID)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/CreateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntry(ctx context.Context, in *RegistrationEntryID, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchEntries(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/FetchEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateEntry(ctx context.Context, in *UpdateEntryRequest, opts ...grpc.CallOption) (*common.RegistrationEntry, error) {
	out := new(common.RegistrationEntry)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/UpdateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByParentID(ctx context.Context, in *ParentID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/ListByParentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *common.Selector, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/ListBySelector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *SpiffeID, opts ...grpc.CallOption) (*common.RegistrationEntries, error) {
	out := new(common.RegistrationEntries)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/ListBySpiffeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/CreateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*FederatedBundle, error) {
	out := new(FederatedBundle)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/FetchFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*FederatedBundles, error) {
	out := new(FederatedBundles)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/ListFederatedBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *FederatedBundle, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/UpdateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *FederatedBundleID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/DeleteFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateJoinToken(ctx context.Context, in *JoinToken, opts ...grpc.CallOption) (*JoinToken, error) {
	out := new(JoinToken)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/CreateJoinToken", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) FetchBundle(ctx context.Context, in *common.Empty, opts ...grpc.CallOption) (*Bundle, error) {
	out := new(Bundle)
	err := grpc.Invoke(ctx, "/spire.api.registration.Registration/FetchBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	// Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads.
	CreateEntry(context.Context, *common.RegistrationEntry) (*RegistrationEntryID, error)
	// Deletes an entry and returns the deleted entry.
	DeleteEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve a specific registered entry.
	FetchEntry(context.Context, *RegistrationEntryID) (*common.RegistrationEntry, error)
	// Retrieve all registered entries.
	FetchEntries(context.Context, *common.Empty) (*common.RegistrationEntries, error)
	// Updates a specific registered entry.
	UpdateEntry(context.Context, *UpdateEntryRequest) (*common.RegistrationEntry, error)
	// Returns all the Entries associated with the ParentID value.
	ListByParentID(context.Context, *ParentID) (*common.RegistrationEntries, error)
	// Returns all the entries associated with a selector value.
	ListBySelector(context.Context, *common.Selector) (*common.RegistrationEntries, error)
	// Return all registration entries for which SPIFFE ID matches.
	ListBySpiffeID(context.Context, *SpiffeID) (*common.RegistrationEntries, error)
	// Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFE IDs and their associated CA bundle.
	CreateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Retrieves a single federated bundle
	FetchFederatedBundle(context.Context, *FederatedBundleID) (*FederatedBundle, error)
	// Retrieves Federated bundles for all the Federated SPIFFE IDs.
	ListFederatedBundles(context.Context, *common.Empty) (*FederatedBundles, error)
	// Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(context.Context, *FederatedBundle) (*common.Empty, error)
	// Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(context.Context, *FederatedBundleID) (*common.Empty, error)
	// Create a new join token
	CreateJoinToken(context.Context, *JoinToken) (*JoinToken, error)
	// Retrieves the CA bundle.
	FetchBundle(context.Context, *common.Empty) (*Bundle, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RegistrationEntry)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*common.RegistrationEntry))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationEntryID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntry(ctx, req.(*RegistrationEntryID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchEntries(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateEntry(ctx, req.(*UpdateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParentID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListByParentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByParentID(ctx, req.(*ParentID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Selector)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*common.Selector))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpiffeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*SpiffeID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchFederatedBundle(ctx, req.(*FederatedBundleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/ListFederatedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundle)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*FederatedBundle))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FederatedBundleID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*FederatedBundleID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateJoinToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateJoinToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/CreateJoinToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateJoinToken(ctx, req.(*JoinToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_FetchBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).FetchBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.api.registration.Registration/FetchBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).FetchBundle(ctx, req.(*common.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.api.registration.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "FetchEntry",
			Handler:    _Registration_FetchEntry_Handler,
		},
		{
			MethodName: "FetchEntries",
			Handler:    _Registration_FetchEntries_Handler,
		},
		{
			MethodName: "UpdateEntry",
			Handler:    _Registration_UpdateEntry_Handler,
		},
		{
			MethodName: "ListByParentID",
			Handler:    _Registration_ListByParentID_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "FetchFederatedBundle",
			Handler:    _Registration_FetchFederatedBundle_Handler,
		},
		{
			MethodName: "ListFederatedBundles",
			Handler:    _Registration_ListFederatedBundles_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
		{
			MethodName: "CreateJoinToken",
			Handler:    _Registration_CreateJoinToken_Handler,
		},
		{
			MethodName: "FetchBundle",
			Handler:    _Registration_FetchBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor_registration_f0d00f73febef181) }

var fileDescriptor_registration_f0d00f73febef181 = []byte{
	// 621 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xa9, 0xda, 0xa6, 0xe3, 0x90, 0xb6, 0xd3, 0x1f, 0x15, 0x83, 0x20, 0x75, 0x85, 0x08,
	0x45, 0xb2, 0x45, 0x2b, 0x2e, 0xdc, 0x48, 0xd3, 0x4a, 0x01, 0x0e, 0x91, 0x4b, 0x40, 0x82, 0x43,
	0xe5, 0xd8, 0xdb, 0x74, 0xdb, 0xc4, 0x6b, 0xec, 0xcd, 0x21, 0x42, 0x5c, 0xfa, 0x0a, 0x3c, 0x1a,
	0xaf, 0xc0, 0x83, 0xa0, 0xec, 0xda, 0xc6, 0x71, 0x6c, 0x62, 0x04, 0x9c, 0xb2, 0xde, 0x99, 0xf9,
	0xbe, 0xf9, 0x66, 0x76, 0x26, 0x80, 0x01, 0x19, 0xd0, 0x90, 0x07, 0x36, 0xa7, 0xcc, 0x33, 0xfc,
	0x80, 0x71, 0x86, 0xbb, 0xa1, 0x4f, 0x03, 0x62, 0xd8, 0x3e, 0x35, 0xd2, 0x56, 0xed, 0xc1, 0x80,
	0xb1, 0xc1, 0x90, 0x98, 0xb6, 0x4f, 0x4d, 0xdb, 0xf3, 0x18, 0x17, 0xd7, 0xa1, 0x8c, 0xd2, 0x9e,
	0x0f, 0x28, 0xbf, 0x1a, 0xf7, 0x0d, 0x87, 0x8d, 0xcc, 0xd0, 0xa7, 0x97, 0x97, 0xc4, 0x14, 0x38,
	0xa6, 0x30, 0x9b, 0x0e, 0x1b, 0x8d, 0x98, 0x17, 0xfd, 0xc8, 0x10, 0xfd, 0x31, 0x6c, 0x59, 0x29,
	0x82, 0x53, 0x8f, 0x07, 0x93, 0x4e, 0x1b, 0xeb, 0x50, 0xa1, 0xee, 0x9e, 0xd2, 0x50, 0x9a, 0x6b,
	0x56, 0x85, 0xba, 0xba, 0x06, 0xd5, 0xae, 0x1d, 0x10, 0x8f, 0xe7, 0xdb, 0xce, 0x05, 0x59, 0x8e,
	0xed, 0x13, 0x60, 0xcf, 0x77, 0x6d, 0x4e, 0x04, 0xb0, 0x45, 0x3e, 0x8f, 0x49, 0xc8, 0xb3, 0x5e,
	0xf8, 0x02, 0x96, 0xc9, 0xd4, 0xbe, 0x57, 0x69, 0x28, 0x4d, 0xf5, 0xe8, 0x91, 0x21, 0xd5, 0x47,
	0x89, 0xce, 0xe5, 0x67, 0x49, 0x6f, 0xbd, 0x03, 0xeb, 0x67, 0xc4, 0x25, 0x81, 0xcd, 0x89, 0xdb,
	0x1a, 0x7b, 0xee, 0x90, 0xe0, 0x7d, 0x58, 0x93, 0xc2, 0x2f, 0x12, 0x82, 0xaa, 0xbc, 0xe8, 0xb8,
	0x78, 0x0f, 0xaa, 0x8e, 0x7d, 0xe1, 0x90, 0x80, 0x87, 0x82, 0xa9, 0x66, 0xad, 0x3a, 0xf6, 0xc9,
	0xf4, 0x53, 0xef, 0xc1, 0x46, 0x06, 0x2a, 0xc4, 0x57, 0xb0, 0xda, 0x97, 0xc7, 0x3d, 0xa5, 0xb1,
	0xd4, 0x54, 0x8f, 0x9e, 0x18, 0xf9, 0x5d, 0x31, 0x32, 0xa1, 0x56, 0x1c, 0xa7, 0x1f, 0xc0, 0x66,
	0xc6, 0x96, 0x53, 0xa3, 0x63, 0x58, 0x7b, 0xcd, 0xa8, 0xf7, 0x8e, 0xdd, 0x10, 0x0f, 0xb7, 0x61,
	0x99, 0x4f, 0x0f, 0x91, 0x5d, 0x7e, 0xe0, 0x06, 0x2c, 0x71, 0x3e, 0x14, 0x49, 0x2f, 0x5b, 0xd3,
	0xa3, 0x7e, 0x00, 0x2b, 0x91, 0xe4, 0xb4, 0x2a, 0x65, 0x46, 0xd5, 0xd1, 0xad, 0x0a, 0xb5, 0x74,
	0xf5, 0xd0, 0x03, 0xf5, 0x24, 0x20, 0x71, 0x3b, 0x70, 0x51, 0xa1, 0xb5, 0x67, 0x45, 0x8a, 0x73,
	0xde, 0x8c, 0xbe, 0x79, 0xfb, 0xfd, 0xc7, 0xb7, 0x8a, 0xaa, 0xaf, 0x98, 0xa2, 0x3d, 0x2f, 0x95,
	0x43, 0xbc, 0x01, 0xb5, 0x4d, 0x86, 0x24, 0xe6, 0xfb, 0x13, 0x38, 0x6d, 0x51, 0x72, 0x7a, 0x5d,
	0xf0, 0x55, 0x0f, 0x23, 0x3e, 0x64, 0x00, 0x67, 0x84, 0x3b, 0x57, 0xff, 0x83, 0x6b, 0x4b, 0x70,
	0xdd, 0x45, 0x55, 0x72, 0x99, 0x5f, 0xa8, 0xfb, 0x15, 0xdf, 0x43, 0x2d, 0x21, 0xa4, 0x24, 0xc4,
	0xad, 0x59, 0x94, 0xd3, 0x91, 0xcf, 0x27, 0xda, 0xfe, 0xef, 0xa1, 0x29, 0x09, 0x63, 0x21, 0x18,
	0x0b, 0xb9, 0x06, 0x35, 0x35, 0x34, 0x78, 0x58, 0xa4, 0x64, 0x7e, 0xb2, 0x4a, 0x17, 0x4d, 0x8b,
	0xb9, 0x7a, 0x50, 0x7f, 0x4b, 0x43, 0xde, 0x9a, 0x24, 0xe3, 0xdd, 0x28, 0xa2, 0x8b, 0x3d, 0x4a,
	0x48, 0xc2, 0x37, 0x31, 0xec, 0x39, 0x19, 0x12, 0x87, 0xb3, 0x00, 0x77, 0x67, 0x83, 0xe2, 0xfb,
	0x32, 0x60, 0x49, 0x8e, 0xc9, 0x9a, 0x29, 0xcc, 0x31, 0xf6, 0x28, 0x07, 0xbb, 0x23, 0x87, 0x21,
	0xbb, 0x44, 0xca, 0xce, 0xb9, 0x96, 0xd7, 0x70, 0xbc, 0x86, 0x6d, 0xf1, 0x2a, 0xb2, 0xa8, 0x4f,
	0x4b, 0xa2, 0x76, 0xda, 0x5a, 0xd9, 0x04, 0xb0, 0x07, 0xdb, 0xd3, 0xca, 0xcc, 0xad, 0xae, 0xdc,
	0x97, 0xd8, 0x2c, 0x89, 0x2a, 0x2a, 0x23, 0xdf, 0xd6, 0xbf, 0xad, 0xcc, 0x07, 0xd8, 0x91, 0xdb,
	0xe0, 0x2f, 0x4a, 0x53, 0x00, 0xbc, 0x2e, 0x3b, 0xf9, 0x6b, 0x8f, 0xee, 0x17, 0x41, 0x26, 0x2e,
	0xda, 0x62, 0x17, 0x6c, 0x81, 0x2a, 0x7a, 0x19, 0xe5, 0x99, 0x5b, 0xd6, 0x87, 0x45, 0x30, 0x32,
	0xa8, 0x55, 0xff, 0x58, 0x4b, 0x5f, 0x77, 0xef, 0x74, 0x95, 0xfe, 0x8a, 0xf8, 0xf3, 0x3d, 0xfe,
	0x19, 0x00, 0x00, 0xff, 0xff, 0x40, 0xe6, 0xd6, 0xee, 0xfb, 0x07, 0x00, 0x00,
}
