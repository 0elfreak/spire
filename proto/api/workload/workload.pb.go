// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workload.proto

package workload

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type X509SVIDRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVIDRequest) Reset()         { *m = X509SVIDRequest{} }
func (m *X509SVIDRequest) String() string { return proto.CompactTextString(m) }
func (*X509SVIDRequest) ProtoMessage()    {}
func (*X509SVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{0}
}
func (m *X509SVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDRequest.Unmarshal(m, b)
}
func (m *X509SVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDRequest.Marshal(b, m, deterministic)
}
func (dst *X509SVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDRequest.Merge(dst, src)
}
func (m *X509SVIDRequest) XXX_Size() int {
	return xxx_messageInfo_X509SVIDRequest.Size(m)
}
func (m *X509SVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDRequest proto.InternalMessageInfo

// The X509SVIDResponse message carries a set of X.509 SVIDs and their
// associated information. It also carries a set of global CRLs, and a
// TTL to inform the workload when it should check back next.
type X509SVIDResponse struct {
	// A list of X509SVID messages, each of which includes a single
	// SPIFFE Verifiable Identity Document, along with its private key
	// and bundle.
	Svids []*X509SVID `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	// ASN.1 DER encoded
	Crl [][]byte `protobuf:"bytes,2,rep,name=crl,proto3" json:"crl,omitempty"`
	// CA certificate bundles belonging to foreign Trust Domains that the
	// workload should trust, keyed by the SPIFFE ID of the foreign
	// domain. Bundles are ASN.1 DER encoded.
	FederatedBundles     map[string][]byte `protobuf:"bytes,3,rep,name=federated_bundles,json=federatedBundles,proto3" json:"federated_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *X509SVIDResponse) Reset()         { *m = X509SVIDResponse{} }
func (m *X509SVIDResponse) String() string { return proto.CompactTextString(m) }
func (*X509SVIDResponse) ProtoMessage()    {}
func (*X509SVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{1}
}
func (m *X509SVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVIDResponse.Unmarshal(m, b)
}
func (m *X509SVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVIDResponse.Marshal(b, m, deterministic)
}
func (dst *X509SVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVIDResponse.Merge(dst, src)
}
func (m *X509SVIDResponse) XXX_Size() int {
	return xxx_messageInfo_X509SVIDResponse.Size(m)
}
func (m *X509SVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVIDResponse proto.InternalMessageInfo

func (m *X509SVIDResponse) GetSvids() []*X509SVID {
	if m != nil {
		return m.Svids
	}
	return nil
}

func (m *X509SVIDResponse) GetCrl() [][]byte {
	if m != nil {
		return m.Crl
	}
	return nil
}

func (m *X509SVIDResponse) GetFederatedBundles() map[string][]byte {
	if m != nil {
		return m.FederatedBundles
	}
	return nil
}

// The X509SVID message carries a single SVID and all associated
// information, including CA bundles.
type X509SVID struct {
	// The SPIFFE ID of the SVID in this entry
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// ASN.1 DER encoded certificate chain. MAY include intermediates,
	// the leaf certificate (or SVID itself) MUST come first.
	X509Svid []byte `protobuf:"bytes,2,opt,name=x509_svid,json=x509Svid,proto3" json:"x509_svid,omitempty"`
	// ASN.1 DER encoded PKCS#8 private key. MUST be unencrypted.
	X509SvidKey []byte `protobuf:"bytes,3,opt,name=x509_svid_key,json=x509SvidKey,proto3" json:"x509_svid_key,omitempty"`
	// CA certificates belonging to the Trust Domain
	// ASN.1 DER encoded
	Bundle []byte `protobuf:"bytes,4,opt,name=bundle,proto3" json:"bundle,omitempty"`
	// List of trust domains the SVID federates with, which corresponds to
	// keys in the federated_bundles map in the X509SVIDResponse message.
	FederatesWith        []string `protobuf:"bytes,5,rep,name=federates_with,json=federatesWith,proto3" json:"federates_with,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *X509SVID) Reset()         { *m = X509SVID{} }
func (m *X509SVID) String() string { return proto.CompactTextString(m) }
func (*X509SVID) ProtoMessage()    {}
func (*X509SVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{2}
}
func (m *X509SVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_X509SVID.Unmarshal(m, b)
}
func (m *X509SVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_X509SVID.Marshal(b, m, deterministic)
}
func (dst *X509SVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_X509SVID.Merge(dst, src)
}
func (m *X509SVID) XXX_Size() int {
	return xxx_messageInfo_X509SVID.Size(m)
}
func (m *X509SVID) XXX_DiscardUnknown() {
	xxx_messageInfo_X509SVID.DiscardUnknown(m)
}

var xxx_messageInfo_X509SVID proto.InternalMessageInfo

func (m *X509SVID) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *X509SVID) GetX509Svid() []byte {
	if m != nil {
		return m.X509Svid
	}
	return nil
}

func (m *X509SVID) GetX509SvidKey() []byte {
	if m != nil {
		return m.X509SvidKey
	}
	return nil
}

func (m *X509SVID) GetBundle() []byte {
	if m != nil {
		return m.Bundle
	}
	return nil
}

func (m *X509SVID) GetFederatesWith() []string {
	if m != nil {
		return m.FederatesWith
	}
	return nil
}

type JWTASVID struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	// Encoded using JWS Compact Serialization
	Svid                 string   `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTASVID) Reset()         { *m = JWTASVID{} }
func (m *JWTASVID) String() string { return proto.CompactTextString(m) }
func (*JWTASVID) ProtoMessage()    {}
func (*JWTASVID) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{3}
}
func (m *JWTASVID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTASVID.Unmarshal(m, b)
}
func (m *JWTASVID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTASVID.Marshal(b, m, deterministic)
}
func (dst *JWTASVID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTASVID.Merge(dst, src)
}
func (m *JWTASVID) XXX_Size() int {
	return xxx_messageInfo_JWTASVID.Size(m)
}
func (m *JWTASVID) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTASVID.DiscardUnknown(m)
}

var xxx_messageInfo_JWTASVID proto.InternalMessageInfo

func (m *JWTASVID) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *JWTASVID) GetSvid() string {
	if m != nil {
		return m.Svid
	}
	return ""
}

type JWTASVIDRequest struct {
	Audience []string `protobuf:"bytes,1,rep,name=audience,proto3" json:"audience,omitempty"`
	// SPIFFE ID of the JWT being requested
	// If not set, all IDs will be returned
	SpiffeId             string   `protobuf:"bytes,2,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTASVIDRequest) Reset()         { *m = JWTASVIDRequest{} }
func (m *JWTASVIDRequest) String() string { return proto.CompactTextString(m) }
func (*JWTASVIDRequest) ProtoMessage()    {}
func (*JWTASVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{4}
}
func (m *JWTASVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTASVIDRequest.Unmarshal(m, b)
}
func (m *JWTASVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTASVIDRequest.Marshal(b, m, deterministic)
}
func (dst *JWTASVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTASVIDRequest.Merge(dst, src)
}
func (m *JWTASVIDRequest) XXX_Size() int {
	return xxx_messageInfo_JWTASVIDRequest.Size(m)
}
func (m *JWTASVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTASVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWTASVIDRequest proto.InternalMessageInfo

func (m *JWTASVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *JWTASVIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

type JWTASVIDResponse struct {
	Svids                []*JWTASVID `protobuf:"bytes,1,rep,name=svids,proto3" json:"svids,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *JWTASVIDResponse) Reset()         { *m = JWTASVIDResponse{} }
func (m *JWTASVIDResponse) String() string { return proto.CompactTextString(m) }
func (*JWTASVIDResponse) ProtoMessage()    {}
func (*JWTASVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{5}
}
func (m *JWTASVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTASVIDResponse.Unmarshal(m, b)
}
func (m *JWTASVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTASVIDResponse.Marshal(b, m, deterministic)
}
func (dst *JWTASVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTASVIDResponse.Merge(dst, src)
}
func (m *JWTASVIDResponse) XXX_Size() int {
	return xxx_messageInfo_JWTASVIDResponse.Size(m)
}
func (m *JWTASVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTASVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWTASVIDResponse proto.InternalMessageInfo

func (m *JWTASVIDResponse) GetSvids() []*JWTASVID {
	if m != nil {
		return m.Svids
	}
	return nil
}

type JWTABundlesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *JWTABundlesRequest) Reset()         { *m = JWTABundlesRequest{} }
func (m *JWTABundlesRequest) String() string { return proto.CompactTextString(m) }
func (*JWTABundlesRequest) ProtoMessage()    {}
func (*JWTABundlesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{6}
}
func (m *JWTABundlesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTABundlesRequest.Unmarshal(m, b)
}
func (m *JWTABundlesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTABundlesRequest.Marshal(b, m, deterministic)
}
func (dst *JWTABundlesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTABundlesRequest.Merge(dst, src)
}
func (m *JWTABundlesRequest) XXX_Size() int {
	return xxx_messageInfo_JWTABundlesRequest.Size(m)
}
func (m *JWTABundlesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTABundlesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_JWTABundlesRequest proto.InternalMessageInfo

type JWTABundlesResponse struct {
	// JWK sets, keyed by trust domain URI
	Bundles              map[string][]byte `protobuf:"bytes,1,rep,name=bundles,proto3" json:"bundles,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *JWTABundlesResponse) Reset()         { *m = JWTABundlesResponse{} }
func (m *JWTABundlesResponse) String() string { return proto.CompactTextString(m) }
func (*JWTABundlesResponse) ProtoMessage()    {}
func (*JWTABundlesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{7}
}
func (m *JWTABundlesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_JWTABundlesResponse.Unmarshal(m, b)
}
func (m *JWTABundlesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_JWTABundlesResponse.Marshal(b, m, deterministic)
}
func (dst *JWTABundlesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_JWTABundlesResponse.Merge(dst, src)
}
func (m *JWTABundlesResponse) XXX_Size() int {
	return xxx_messageInfo_JWTABundlesResponse.Size(m)
}
func (m *JWTABundlesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_JWTABundlesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_JWTABundlesResponse proto.InternalMessageInfo

func (m *JWTABundlesResponse) GetBundles() map[string][]byte {
	if m != nil {
		return m.Bundles
	}
	return nil
}

type ValidateJWTASVIDRequest struct {
	Audience []string `protobuf:"bytes,1,rep,name=audience,proto3" json:"audience,omitempty"`
	// Encoded using JWS Compact Serialization
	Svid                 string   `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ValidateJWTASVIDRequest) Reset()         { *m = ValidateJWTASVIDRequest{} }
func (m *ValidateJWTASVIDRequest) String() string { return proto.CompactTextString(m) }
func (*ValidateJWTASVIDRequest) ProtoMessage()    {}
func (*ValidateJWTASVIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{8}
}
func (m *ValidateJWTASVIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateJWTASVIDRequest.Unmarshal(m, b)
}
func (m *ValidateJWTASVIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateJWTASVIDRequest.Marshal(b, m, deterministic)
}
func (dst *ValidateJWTASVIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateJWTASVIDRequest.Merge(dst, src)
}
func (m *ValidateJWTASVIDRequest) XXX_Size() int {
	return xxx_messageInfo_ValidateJWTASVIDRequest.Size(m)
}
func (m *ValidateJWTASVIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateJWTASVIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateJWTASVIDRequest proto.InternalMessageInfo

func (m *ValidateJWTASVIDRequest) GetAudience() []string {
	if m != nil {
		return m.Audience
	}
	return nil
}

func (m *ValidateJWTASVIDRequest) GetSvid() string {
	if m != nil {
		return m.Svid
	}
	return ""
}

type ValidateJWTASVIDResponse struct {
	SpiffeId             string          `protobuf:"bytes,1,opt,name=spiffe_id,json=spiffeId,proto3" json:"spiffe_id,omitempty"`
	Claims               *_struct.Struct `protobuf:"bytes,2,opt,name=claims,proto3" json:"claims,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *ValidateJWTASVIDResponse) Reset()         { *m = ValidateJWTASVIDResponse{} }
func (m *ValidateJWTASVIDResponse) String() string { return proto.CompactTextString(m) }
func (*ValidateJWTASVIDResponse) ProtoMessage()    {}
func (*ValidateJWTASVIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_workload_9b684f4104ab33ac, []int{9}
}
func (m *ValidateJWTASVIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ValidateJWTASVIDResponse.Unmarshal(m, b)
}
func (m *ValidateJWTASVIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ValidateJWTASVIDResponse.Marshal(b, m, deterministic)
}
func (dst *ValidateJWTASVIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidateJWTASVIDResponse.Merge(dst, src)
}
func (m *ValidateJWTASVIDResponse) XXX_Size() int {
	return xxx_messageInfo_ValidateJWTASVIDResponse.Size(m)
}
func (m *ValidateJWTASVIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidateJWTASVIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ValidateJWTASVIDResponse proto.InternalMessageInfo

func (m *ValidateJWTASVIDResponse) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *ValidateJWTASVIDResponse) GetClaims() *_struct.Struct {
	if m != nil {
		return m.Claims
	}
	return nil
}

func init() {
	proto.RegisterType((*X509SVIDRequest)(nil), "X509SVIDRequest")
	proto.RegisterType((*X509SVIDResponse)(nil), "X509SVIDResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "X509SVIDResponse.FederatedBundlesEntry")
	proto.RegisterType((*X509SVID)(nil), "X509SVID")
	proto.RegisterType((*JWTASVID)(nil), "JWTASVID")
	proto.RegisterType((*JWTASVIDRequest)(nil), "JWTASVIDRequest")
	proto.RegisterType((*JWTASVIDResponse)(nil), "JWTASVIDResponse")
	proto.RegisterType((*JWTABundlesRequest)(nil), "JWTABundlesRequest")
	proto.RegisterType((*JWTABundlesResponse)(nil), "JWTABundlesResponse")
	proto.RegisterMapType((map[string][]byte)(nil), "JWTABundlesResponse.BundlesEntry")
	proto.RegisterType((*ValidateJWTASVIDRequest)(nil), "ValidateJWTASVIDRequest")
	proto.RegisterType((*ValidateJWTASVIDResponse)(nil), "ValidateJWTASVIDResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SpiffeWorkloadAPIClient is the client API for SpiffeWorkloadAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SpiffeWorkloadAPIClient interface {
	// JWT-SVID Profile
	FetchJWTASVID(ctx context.Context, in *JWTASVIDRequest, opts ...grpc.CallOption) (*JWTASVIDResponse, error)
	FetchJWTABundles(ctx context.Context, in *JWTABundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchJWTABundlesClient, error)
	ValidateJWTASVID(ctx context.Context, in *ValidateJWTASVIDRequest, opts ...grpc.CallOption) (*ValidateJWTASVIDResponse, error)
	// X.509-SVID Profile
	// Fetch all SPIFFE identities the workload is entitled to, as
	// well as related information like trust bundles and CRLs. As
	// this information changes, subsequent messages will be sent.
	FetchX509SVID(ctx context.Context, in *X509SVIDRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509SVIDClient, error)
}

type spiffeWorkloadAPIClient struct {
	cc *grpc.ClientConn
}

func NewSpiffeWorkloadAPIClient(cc *grpc.ClientConn) SpiffeWorkloadAPIClient {
	return &spiffeWorkloadAPIClient{cc}
}

func (c *spiffeWorkloadAPIClient) FetchJWTASVID(ctx context.Context, in *JWTASVIDRequest, opts ...grpc.CallOption) (*JWTASVIDResponse, error) {
	out := new(JWTASVIDResponse)
	err := c.cc.Invoke(ctx, "/SpiffeWorkloadAPI/FetchJWTASVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiffeWorkloadAPIClient) FetchJWTABundles(ctx context.Context, in *JWTABundlesRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchJWTABundlesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpiffeWorkloadAPI_serviceDesc.Streams[0], "/SpiffeWorkloadAPI/FetchJWTABundles", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiffeWorkloadAPIFetchJWTABundlesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiffeWorkloadAPI_FetchJWTABundlesClient interface {
	Recv() (*JWTABundlesResponse, error)
	grpc.ClientStream
}

type spiffeWorkloadAPIFetchJWTABundlesClient struct {
	grpc.ClientStream
}

func (x *spiffeWorkloadAPIFetchJWTABundlesClient) Recv() (*JWTABundlesResponse, error) {
	m := new(JWTABundlesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *spiffeWorkloadAPIClient) ValidateJWTASVID(ctx context.Context, in *ValidateJWTASVIDRequest, opts ...grpc.CallOption) (*ValidateJWTASVIDResponse, error) {
	out := new(ValidateJWTASVIDResponse)
	err := c.cc.Invoke(ctx, "/SpiffeWorkloadAPI/ValidateJWTASVID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiffeWorkloadAPIClient) FetchX509SVID(ctx context.Context, in *X509SVIDRequest, opts ...grpc.CallOption) (SpiffeWorkloadAPI_FetchX509SVIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SpiffeWorkloadAPI_serviceDesc.Streams[1], "/SpiffeWorkloadAPI/FetchX509SVID", opts...)
	if err != nil {
		return nil, err
	}
	x := &spiffeWorkloadAPIFetchX509SVIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SpiffeWorkloadAPI_FetchX509SVIDClient interface {
	Recv() (*X509SVIDResponse, error)
	grpc.ClientStream
}

type spiffeWorkloadAPIFetchX509SVIDClient struct {
	grpc.ClientStream
}

func (x *spiffeWorkloadAPIFetchX509SVIDClient) Recv() (*X509SVIDResponse, error) {
	m := new(X509SVIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpiffeWorkloadAPIServer is the server API for SpiffeWorkloadAPI service.
type SpiffeWorkloadAPIServer interface {
	// JWT-SVID Profile
	FetchJWTASVID(context.Context, *JWTASVIDRequest) (*JWTASVIDResponse, error)
	FetchJWTABundles(*JWTABundlesRequest, SpiffeWorkloadAPI_FetchJWTABundlesServer) error
	ValidateJWTASVID(context.Context, *ValidateJWTASVIDRequest) (*ValidateJWTASVIDResponse, error)
	// X.509-SVID Profile
	// Fetch all SPIFFE identities the workload is entitled to, as
	// well as related information like trust bundles and CRLs. As
	// this information changes, subsequent messages will be sent.
	FetchX509SVID(*X509SVIDRequest, SpiffeWorkloadAPI_FetchX509SVIDServer) error
}

func RegisterSpiffeWorkloadAPIServer(s *grpc.Server, srv SpiffeWorkloadAPIServer) {
	s.RegisterService(&_SpiffeWorkloadAPI_serviceDesc, srv)
}

func _SpiffeWorkloadAPI_FetchJWTASVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JWTASVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiffeWorkloadAPIServer).FetchJWTASVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpiffeWorkloadAPI/FetchJWTASVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiffeWorkloadAPIServer).FetchJWTASVID(ctx, req.(*JWTASVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiffeWorkloadAPI_FetchJWTABundles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(JWTABundlesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiffeWorkloadAPIServer).FetchJWTABundles(m, &spiffeWorkloadAPIFetchJWTABundlesServer{stream})
}

type SpiffeWorkloadAPI_FetchJWTABundlesServer interface {
	Send(*JWTABundlesResponse) error
	grpc.ServerStream
}

type spiffeWorkloadAPIFetchJWTABundlesServer struct {
	grpc.ServerStream
}

func (x *spiffeWorkloadAPIFetchJWTABundlesServer) Send(m *JWTABundlesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _SpiffeWorkloadAPI_ValidateJWTASVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateJWTASVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiffeWorkloadAPIServer).ValidateJWTASVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/SpiffeWorkloadAPI/ValidateJWTASVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiffeWorkloadAPIServer).ValidateJWTASVID(ctx, req.(*ValidateJWTASVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiffeWorkloadAPI_FetchX509SVID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(X509SVIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SpiffeWorkloadAPIServer).FetchX509SVID(m, &spiffeWorkloadAPIFetchX509SVIDServer{stream})
}

type SpiffeWorkloadAPI_FetchX509SVIDServer interface {
	Send(*X509SVIDResponse) error
	grpc.ServerStream
}

type spiffeWorkloadAPIFetchX509SVIDServer struct {
	grpc.ServerStream
}

func (x *spiffeWorkloadAPIFetchX509SVIDServer) Send(m *X509SVIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _SpiffeWorkloadAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "SpiffeWorkloadAPI",
	HandlerType: (*SpiffeWorkloadAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchJWTASVID",
			Handler:    _SpiffeWorkloadAPI_FetchJWTASVID_Handler,
		},
		{
			MethodName: "ValidateJWTASVID",
			Handler:    _SpiffeWorkloadAPI_ValidateJWTASVID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchJWTABundles",
			Handler:       _SpiffeWorkloadAPI_FetchJWTABundles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FetchX509SVID",
			Handler:       _SpiffeWorkloadAPI_FetchX509SVID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "workload.proto",
}

func init() { proto.RegisterFile("workload.proto", fileDescriptor_workload_9b684f4104ab33ac) }

var fileDescriptor_workload_9b684f4104ab33ac = []byte{
	// 549 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x6f, 0x6f, 0xd2, 0x40,
	0x18, 0xcf, 0xd1, 0x81, 0xf4, 0x01, 0xb6, 0x72, 0x43, 0x57, 0xab, 0x89, 0xd8, 0xc4, 0xc8, 0xab,
	0x83, 0x30, 0x67, 0xdc, 0xf6, 0xc2, 0xcc, 0x3f, 0x33, 0xcc, 0x37, 0xa6, 0x2c, 0xc3, 0x77, 0xa4,
	0x70, 0xc7, 0x68, 0x56, 0x29, 0xf6, 0xae, 0x4c, 0x3e, 0x83, 0x89, 0x5f, 0xc3, 0xaf, 0xe5, 0x47,
	0x31, 0xbd, 0x5e, 0xbb, 0x50, 0x40, 0xa3, 0xef, 0xee, 0xf9, 0x3d, 0xbf, 0xe7, 0xd7, 0xe7, 0x6f,
	0x61, 0xf7, 0x36, 0x08, 0x6f, 0xfc, 0xc0, 0xa5, 0x64, 0x1e, 0x06, 0x22, 0xb0, 0x1e, 0x5f, 0x07,
	0xc1, 0xb5, 0xcf, 0xda, 0xd2, 0x1a, 0x45, 0x93, 0x36, 0x17, 0x61, 0x34, 0x16, 0x89, 0xd7, 0xae,
	0xc3, 0xde, 0xe7, 0xa3, 0xce, 0x71, 0xff, 0xaa, 0xf7, 0xce, 0x61, 0x5f, 0x23, 0xc6, 0x85, 0xfd,
	0x0b, 0x81, 0x71, 0x87, 0xf1, 0x79, 0x30, 0xe3, 0x0c, 0x3f, 0x81, 0x22, 0x5f, 0x78, 0x94, 0x9b,
	0xa8, 0xa9, 0xb5, 0x2a, 0x5d, 0x9d, 0x64, 0x8c, 0x04, 0xc7, 0x06, 0x68, 0xe3, 0xd0, 0x37, 0x0b,
	0x4d, 0xad, 0x55, 0x75, 0xe2, 0x27, 0xbe, 0x84, 0xfa, 0x84, 0x51, 0x16, 0xba, 0x82, 0xd1, 0xe1,
	0x28, 0x9a, 0x51, 0x9f, 0x71, 0x53, 0x93, 0xe1, 0xcf, 0x49, 0xfe, 0x03, 0xe4, 0x3c, 0xa5, 0xbe,
	0x49, 0x98, 0xef, 0x67, 0x22, 0x5c, 0x3a, 0xc6, 0x24, 0x07, 0x5b, 0x6f, 0xe1, 0xfe, 0x46, 0x6a,
	0x9c, 0xc0, 0x0d, 0x5b, 0x9a, 0xa8, 0x89, 0x5a, 0xba, 0x13, 0x3f, 0x71, 0x03, 0x8a, 0x0b, 0xd7,
	0x8f, 0x98, 0x59, 0x68, 0xa2, 0x56, 0xd5, 0x49, 0x8c, 0x93, 0xc2, 0x2b, 0x64, 0xff, 0x44, 0x50,
	0x4e, 0x33, 0xc0, 0x8f, 0x40, 0xe7, 0x73, 0x6f, 0x32, 0x61, 0x43, 0x8f, 0xaa, 0xf0, 0x72, 0x02,
	0xf4, 0x68, 0xec, 0xfc, 0x76, 0xd4, 0x39, 0x1e, 0xc6, 0x45, 0x2a, 0x9d, 0x72, 0x0c, 0xf4, 0x17,
	0x1e, 0xc5, 0x36, 0xd4, 0x32, 0xe7, 0x30, 0xfe, 0xb8, 0x26, 0x09, 0x95, 0x94, 0xf0, 0x91, 0x2d,
	0xf1, 0x03, 0x28, 0x25, 0xb5, 0x9b, 0x3b, 0xd2, 0xa9, 0x2c, 0xfc, 0x0c, 0x76, 0xd3, 0xda, 0xf8,
	0xf0, 0xd6, 0x13, 0x53, 0xb3, 0xd8, 0xd4, 0x5a, 0xba, 0x53, 0xcb, 0xd0, 0x81, 0x27, 0xa6, 0xf6,
	0x29, 0x94, 0x2f, 0x06, 0x97, 0x67, 0x7f, 0x4f, 0x14, 0xc3, 0x4e, 0x96, 0xa3, 0xee, 0xc8, 0xb7,
	0x7d, 0x01, 0x7b, 0x69, 0xb0, 0x1a, 0x2e, 0xb6, 0xa0, 0xec, 0x46, 0xd4, 0x63, 0xb3, 0x31, 0x93,
	0xa3, 0xd4, 0x9d, 0xcc, 0x5e, 0xd5, 0x2f, 0xac, 0xea, 0xdb, 0x87, 0x60, 0xdc, 0x69, 0x6d, 0x5b,
	0x8a, 0x8c, 0x91, 0xe0, 0x76, 0x03, 0x70, 0x0c, 0xa9, 0x39, 0xa5, 0x0b, 0xf6, 0x03, 0xc1, 0xfe,
	0x0a, 0xac, 0xe4, 0x4e, 0xe1, 0x5e, 0xba, 0x26, 0x89, 0xe0, 0x53, 0xb2, 0x81, 0x46, 0x56, 0x16,
	0x24, 0x8d, 0xb0, 0x4e, 0xa0, 0xfa, 0xdf, 0xeb, 0xd0, 0x83, 0x83, 0x2b, 0xd7, 0xf7, 0xa8, 0x2b,
	0xd8, 0xbf, 0xf4, 0x6b, 0x53, 0xcb, 0xa7, 0x60, 0xae, 0x4b, 0xa9, 0xfa, 0xfe, 0x38, 0xbf, 0x36,
	0x94, 0xc6, 0xbe, 0xeb, 0x7d, 0xe1, 0x52, 0xae, 0xd2, 0x3d, 0x20, 0xc9, 0xdd, 0x92, 0xf4, 0x6e,
	0x49, 0x5f, 0xde, 0xad, 0xa3, 0x68, 0xdd, 0xef, 0x05, 0xa8, 0xf7, 0x65, 0xf4, 0x40, 0x1d, 0xfc,
	0xd9, 0xa7, 0x1e, 0x7e, 0x01, 0xb5, 0x73, 0x26, 0xc6, 0xd3, 0x6c, 0x69, 0x0c, 0x92, 0x2b, 0xc9,
	0xaa, 0x93, 0xb5, 0xcc, 0x5e, 0x83, 0x91, 0x45, 0xa9, 0x2e, 0xe2, 0x7d, 0xb2, 0x3e, 0x3a, 0xab,
	0xb1, 0x69, 0x22, 0x1d, 0x84, 0x3f, 0x80, 0x91, 0x2f, 0x1b, 0x9b, 0x64, 0x4b, 0x53, 0xad, 0x87,
	0x64, 0x6b, 0x8f, 0x5e, 0xaa, 0xfc, 0xb3, 0xeb, 0x34, 0x48, 0xee, 0xff, 0x64, 0xd5, 0xd7, 0x7e,
	0x1e, 0x1d, 0x34, 0x2a, 0xc9, 0x36, 0x1d, 0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x0d, 0x56,
	0x31, 0xfe, 0x04, 0x00, 0x00,
}
