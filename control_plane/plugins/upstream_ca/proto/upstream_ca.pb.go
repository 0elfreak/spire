// Code generated by protoc-gen-go. DO NOT EDIT.
// source: upstream_ca.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	upstream_ca.proto

It has these top-level messages:
	SubmitCSRRequest
	SubmitCSRResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/spiffe/control-plane/plugins/common/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/control-plane/plugins/common/proto/common.proto
type ConfigureRequest proto2.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*proto2.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*proto2.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*proto2.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/control-plane/plugins/common/proto/common.proto
type ConfigureResponse proto2.ConfigureResponse

func (m *ConfigureResponse) Reset()         { (*proto2.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string { return (*proto2.ConfigureResponse)(m).String() }
func (*ConfigureResponse) ProtoMessage()    {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*proto2.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/control-plane/plugins/common/proto/common.proto
type GetPluginInfoRequest proto2.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset()         { (*proto2.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string { return (*proto2.GetPluginInfoRequest)(m).String() }
func (*GetPluginInfoRequest) ProtoMessage()    {}

// GetPluginInfoResponse from public import github.com/spiffe/control-plane/plugins/common/proto/common.proto
type GetPluginInfoResponse proto2.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset()          { (*proto2.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string  { return (*proto2.GetPluginInfoResponse)(m).String() }
func (*GetPluginInfoResponse) ProtoMessage()     {}
func (m *GetPluginInfoResponse) GetName() string { return (*proto2.GetPluginInfoResponse)(m).GetName() }
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string { return (*proto2.GetPluginInfoResponse)(m).GetType() }
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*proto2.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*proto2.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*proto2.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCompany()
}

type SubmitCSRRequest struct {
	Csr []byte `protobuf:"bytes,1,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (m *SubmitCSRRequest) Reset()                    { *m = SubmitCSRRequest{} }
func (m *SubmitCSRRequest) String() string            { return proto1.CompactTextString(m) }
func (*SubmitCSRRequest) ProtoMessage()               {}
func (*SubmitCSRRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SubmitCSRRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

type SubmitCSRResponse struct {
	Cert                []byte `protobuf:"bytes,1,opt,name=cert,proto3" json:"cert,omitempty"`
	UpstreamTrustBundle []byte `protobuf:"bytes,2,opt,name=upstreamTrustBundle,proto3" json:"upstreamTrustBundle,omitempty"`
}

func (m *SubmitCSRResponse) Reset()                    { *m = SubmitCSRResponse{} }
func (m *SubmitCSRResponse) String() string            { return proto1.CompactTextString(m) }
func (*SubmitCSRResponse) ProtoMessage()               {}
func (*SubmitCSRResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubmitCSRResponse) GetCert() []byte {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (m *SubmitCSRResponse) GetUpstreamTrustBundle() []byte {
	if m != nil {
		return m.UpstreamTrustBundle
	}
	return nil
}

func init() {
	proto1.RegisterType((*SubmitCSRRequest)(nil), "proto.SubmitCSRRequest")
	proto1.RegisterType((*SubmitCSRResponse)(nil), "proto.SubmitCSRResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UpstreamCA service

type UpstreamCAClient interface {
	// *Responsible for configuration of the plugin.
	Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error)
	// *Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error)
	// *Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error)
}

type upstreamCAClient struct {
	cc *grpc.ClientConn
}

func NewUpstreamCAClient(cc *grpc.ClientConn) UpstreamCAClient {
	return &upstreamCAClient{cc}
}

func (c *upstreamCAClient) Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error) {
	out := new(proto2.ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.UpstreamCA/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error) {
	out := new(proto2.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/proto.UpstreamCA/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamCAClient) SubmitCSR(ctx context.Context, in *SubmitCSRRequest, opts ...grpc.CallOption) (*SubmitCSRResponse, error) {
	out := new(SubmitCSRResponse)
	err := grpc.Invoke(ctx, "/proto.UpstreamCA/SubmitCSR", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UpstreamCA service

type UpstreamCAServer interface {
	// *Responsible for configuration of the plugin.
	Configure(context.Context, *proto2.ConfigureRequest) (*proto2.ConfigureResponse, error)
	// *Returns the  version and related metadata of the installed plugin.
	GetPluginInfo(context.Context, *proto2.GetPluginInfoRequest) (*proto2.GetPluginInfoResponse, error)
	// *Will take in a CSR and submit it to the upstream CA for signing
	// (“upstream” CA can be local self-signed root in simple case).
	SubmitCSR(context.Context, *SubmitCSRRequest) (*SubmitCSRResponse, error)
}

func RegisterUpstreamCAServer(s *grpc.Server, srv UpstreamCAServer) {
	s.RegisterService(&_UpstreamCA_serviceDesc, srv)
}

func _UpstreamCA_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpstreamCA/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).Configure(ctx, req.(*proto2.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpstreamCA/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).GetPluginInfo(ctx, req.(*proto2.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpstreamCA_SubmitCSR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCSRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpstreamCA/SubmitCSR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamCAServer).SubmitCSR(ctx, req.(*SubmitCSRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpstreamCA_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpstreamCA",
	HandlerType: (*UpstreamCAServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Configure",
			Handler:    _UpstreamCA_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _UpstreamCA_GetPluginInfo_Handler,
		},
		{
			MethodName: "SubmitCSR",
			Handler:    _UpstreamCA_SubmitCSR_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upstream_ca.proto",
}

func init() { proto1.RegisterFile("upstream_ca.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x3f, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x29, 0xff, 0xa4, 0x9e, 0x40, 0x6a, 0xcd, 0x40, 0x54, 0x18, 0x50, 0xc5, 0xc0, 0x42,
	0x8c, 0x60, 0xaf, 0x54, 0x32, 0x20, 0x98, 0xaa, 0x14, 0x06, 0x26, 0x94, 0x98, 0x4b, 0xb0, 0x14,
	0xfb, 0x8c, 0xff, 0x7c, 0x57, 0x3e, 0x0e, 0xc2, 0x75, 0x23, 0xa0, 0x9d, 0x72, 0x79, 0xef, 0xf9,
	0xe9, 0x77, 0x07, 0xe3, 0x60, 0x9c, 0xb7, 0x58, 0xa9, 0x37, 0x51, 0xe5, 0xc6, 0x92, 0x27, 0x76,
	0x10, 0x3f, 0x93, 0x79, 0x2b, 0xfd, 0x47, 0xa8, 0x73, 0x41, 0x8a, 0x3b, 0x23, 0x9b, 0x06, 0xb9,
	0x20, 0xed, 0x2d, 0x75, 0xd7, 0xa6, 0xab, 0x34, 0x72, 0xd3, 0x85, 0x56, 0x6a, 0xc7, 0x05, 0x29,
	0x45, 0x9a, 0xc7, 0x57, 0xe9, 0x67, 0xd5, 0x34, 0xbd, 0x84, 0xd1, 0x32, 0xd4, 0x4a, 0xfa, 0x62,
	0x59, 0x96, 0xf8, 0x19, 0xd0, 0x79, 0x36, 0x82, 0x3d, 0xe1, 0x6c, 0x36, 0xb8, 0x18, 0x5c, 0x1d,
	0x95, 0x3f, 0xe3, 0xf4, 0x15, 0xc6, 0xbf, 0x52, 0xce, 0x90, 0x76, 0xc8, 0x18, 0xec, 0x0b, 0xb4,
	0x3e, 0xe5, 0xe2, 0xcc, 0x6e, 0xe0, 0x64, 0x4d, 0xfb, 0x6c, 0x83, 0xf3, 0xf7, 0x41, 0xbf, 0x77,
	0x98, 0xed, 0xc6, 0xc8, 0x36, 0xeb, 0xf6, 0x6b, 0x00, 0xf0, 0x92, 0xf4, 0x62, 0xce, 0x66, 0x30,
	0x2c, 0x48, 0x37, 0xb2, 0x0d, 0x16, 0xd9, 0xe9, 0x0a, 0x32, 0xef, 0x95, 0x44, 0x38, 0xc9, 0x36,
	0x8d, 0x04, 0xf5, 0x04, 0xc7, 0x0f, 0xe8, 0x17, 0x71, 0xef, 0x47, 0xdd, 0x10, 0x3b, 0x4b, 0xd1,
	0x3f, 0xea, 0xba, 0xe7, 0x7c, 0xbb, 0x99, 0xba, 0x66, 0x30, 0xec, 0xb7, 0xee, 0x59, 0xfe, 0x5f,
	0xab, 0x67, 0xd9, 0x38, 0xd0, 0x62, 0xa7, 0x3e, 0x8c, 0xd6, 0xdd, 0x77, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb7, 0x77, 0xc1, 0x3d, 0xc3, 0x01, 0x00, 0x00,
}
