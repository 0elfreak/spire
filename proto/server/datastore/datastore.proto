syntax = "proto3";
package spire.server.datastore;
option go_package = "datastore";

import public "google/protobuf/wrappers.proto";
import public "github.com/spiffe/spire/proto/common/plugin/plugin.proto";
import public "github.com/spiffe/spire/proto/common/common.proto";

/////////////////////////////////////////////////////////////////////////////
// Bundle Messages
/////////////////////////////////////////////////////////////////////////////

message Bundle {
    // Trust domain SPIFFE ID
    string trust_domain = 1;

    // CA Certificates (ASN.1 DER encoded)
    bytes ca_certs = 2;
}

message CreateBundleRequest {
    Bundle bundle = 1;
}

message CreateBundleResponse {
    Bundle bundle = 1;
}

message FetchBundleRequest {
    string trust_domain = 1;
}

message FetchBundleResponse {
    Bundle bundle = 1;
}

message ListBundlesRequest {
}

message ListBundlesResponse {
    repeated Bundle bundles = 1;
}

message UpdateBundleRequest {
    Bundle bundle = 1;
}

message UpdateBundleResponse {
    Bundle bundle = 1;
}

message AppendBundleRequest {
    Bundle bundle = 1;
}

message AppendBundleResponse {
    Bundle bundle = 1;
}

message DeleteBundleRequest {
    string trust_domain = 1;
}

message DeleteBundleResponse {
    Bundle bundle = 1;
}


/////////////////////////////////////////////////////////////////////////////
// NodeResolverMapEntry Messages
/////////////////////////////////////////////////////////////////////////////

message NodeResolverMapEntry {
    // Node SPIFFE ID
    string spiffe_id = 1;

    // Node selector
    spire.common.Selector selector = 2;
}

message CreateNodeResolverMapEntryRequest {
    NodeResolverMapEntry entry = 1;
}

message CreateNodeResolverMapEntryResponse {
    NodeResolverMapEntry entry = 1;
}

message ListNodeResolverMapEntriesRequest {
    string spiffe_id = 1;
}

message ListNodeResolverMapEntriesResponse {
    repeated NodeResolverMapEntry entries = 1;
}

message DeleteNodeResolverMapEntryRequest {
    NodeResolverMapEntry entry = 1;
}

message DeleteNodeResolverMapEntryResponse {
    repeated NodeResolverMapEntry entries = 1;
}

message RectifyNodeResolverMapEntriesRequest {
    repeated NodeResolverMapEntry entries = 1;
}

message RectifyNodeResolverMapEntriesResponse {
    repeated NodeResolverMapEntry entries = 1;
}

/////////////////////////////////////////////////////////////////////////////
// AttestedNodeEntry Messages
/////////////////////////////////////////////////////////////////////////////

message AttestedNodeEntry {
    // Node SPIFFE ID
    string spiffe_id = 1;

    // Attestation data type
    string attestation_data_type = 2;

    // Node certificate serial number
    string cert_serial_number = 3;

    // Node certificate not_after (seconds since unix epoch)
    int64 cert_not_after = 4;
}

message CreateAttestedNodeEntryRequest {
    AttestedNodeEntry entry = 1;
}

message CreateAttestedNodeEntryResponse {
    AttestedNodeEntry entry = 1;
}

message FetchAttestedNodeEntryRequest {
    string spiffe_id = 1;
}

message FetchAttestedNodeEntryResponse {
    AttestedNodeEntry entry = 1;
}

message ListAttestedNodeEntriesRequest {
    google.protobuf.Int64Value by_expires_before = 1;
}

message ListAttestedNodeEntriesResponse {
    repeated AttestedNodeEntry entries = 1;
}

message UpdateAttestedNodeEntryRequest {
    string spiffe_id = 1;

    string cert_serial_number = 2;

    int64 cert_not_after = 3;
}

message UpdateAttestedNodeEntryResponse {
    AttestedNodeEntry entry = 1;
}

message DeleteAttestedNodeEntryRequest {
    string spiffe_id = 1;
}

message DeleteAttestedNodeEntryResponse {
    AttestedNodeEntry entry = 1;
}


/////////////////////////////////////////////////////////////////////////////
// Registration Entries
/////////////////////////////////////////////////////////////////////////////

message CreateRegistrationEntryRequest {
    spire.common.RegistrationEntry entry = 1;
}

message CreateRegistrationEntryResponse {
    string entry_id = 1;
}

message FetchRegistrationEntryRequest {
    string entry_id = 1;
}

message FetchRegistrationEntryResponse {
    spire.common.RegistrationEntry entry = 1;
}

message BySelectors {
    repeated spire.common.Selector selectors = 1;
    bool allow_any_combination = 2;
}

message ListRegistrationEntriesRequest {
    google.protobuf.StringValue by_parent_id = 1;
    BySelectors by_selectors = 2;
    google.protobuf.StringValue by_spiffe_id = 3;
}

message ListRegistrationEntriesResponse {
    repeated spire.common.RegistrationEntry entries = 1;
}

message UpdateRegistrationEntryRequest {
    spire.common.RegistrationEntry entry = 1;
}

message UpdateRegistrationEntryResponse {
    spire.common.RegistrationEntry entry = 1;
}

message DeleteRegistrationEntryRequest {
    string entry_id = 1;
}

message DeleteRegistrationEntryResponse {
    spire.common.RegistrationEntry entry = 1;
}

/////////////////////////////////////////////////////////////////////////////
// JoinToken Messages
/////////////////////////////////////////////////////////////////////////////

message JoinToken {
    // Token value
    string token = 1;

    // Expiration in seconds since unix epoch
    int64 expiry = 2;
}

message CreateJoinTokenRequest {
    JoinToken join_token = 1;
}

message CreateJoinTokenResponse {
    JoinToken join_token = 1;
}

message FetchJoinTokenRequest {
    string token = 1;
}

message FetchJoinTokenResponse {
    JoinToken join_token = 1;
}

message DeleteJoinTokenRequest {
    string token = 1;
}

message DeleteJoinTokenResponse {
    JoinToken join_token = 1;
}

message PruneJoinTokensRequest {
    int64 expires_before = 1;
}

message PruneJoinTokensResponse {
}


/////////////////////////////////////////////////////////////////////////////
// Service Definition
/////////////////////////////////////////////////////////////////////////////

service DataStore {
    // Creates a bundle
    rpc CreateBundle(CreateBundleRequest) returns (CreateBundleResponse);
    // Fetches a specific bundle
    rpc FetchBundle(FetchBundleRequest) returns (FetchBundleResponse);
    // Lists bundles (optionally filtered)
    rpc ListBundles(ListBundlesRequest) returns (ListBundlesResponse);
    // Updates a specific bundle, overwriting existing certs
    rpc UpdateBundle(UpdateBundleRequest) returns (UpdateBundleResponse);
    // Appends the provided certs onto an existing bundle, creating a new bundle if one doesn't exist
    rpc AppendBundle(AppendBundleRequest) returns (AppendBundleResponse);
    // Deletes a specific bundle
    rpc DeleteBundle(DeleteBundleRequest) returns (DeleteBundleResponse);

    // Creates an attested node entry
    rpc CreateAttestedNodeEntry(CreateAttestedNodeEntryRequest) returns (CreateAttestedNodeEntryResponse);
    // Fetches a specific attested node entry
    rpc FetchAttestedNodeEntry(FetchAttestedNodeEntryRequest) returns (FetchAttestedNodeEntryResponse);
    // Lists attested node entries (optionally filtered)
    rpc ListAttestedNodeEntries(ListAttestedNodeEntriesRequest) returns (ListAttestedNodeEntriesResponse);
    // Updates a specific attested node entry
    rpc UpdateAttestedNodeEntry(UpdateAttestedNodeEntryRequest) returns (UpdateAttestedNodeEntryResponse);
    // Deletes a specific attested node entry
    rpc DeleteAttestedNodeEntry(DeleteAttestedNodeEntryRequest) returns (DeleteAttestedNodeEntryResponse);

    // Creates a node resolver map entry
    rpc CreateNodeResolverMapEntry(CreateNodeResolverMapEntryRequest) returns (CreateNodeResolverMapEntryResponse);
    // Lists node resolver map entries for a specified SPIFFE ID
    rpc ListNodeResolverMapEntries(ListNodeResolverMapEntriesRequest) returns (ListNodeResolverMapEntriesResponse);
    // Deletes a specific node resolver map entry
    rpc DeleteNodeResolverMapEntry(DeleteNodeResolverMapEntryRequest) returns (DeleteNodeResolverMapEntryResponse);
    // Sets the list of node resolver map entries for the specified SPIFFE ID
    rpc RectifyNodeResolverMapEntries(RectifyNodeResolverMapEntriesRequest) returns (RectifyNodeResolverMapEntriesResponse);

    // Creates a registration entry
    rpc CreateRegistrationEntry(CreateRegistrationEntryRequest) returns (CreateRegistrationEntryResponse);
    // Fetches a specific registration entry
    rpc FetchRegistrationEntry(FetchRegistrationEntryRequest) returns (FetchRegistrationEntryResponse);
    // Lists registration entries (optionally filtered)
    rpc ListRegistrationEntries(ListRegistrationEntriesRequest) returns (ListRegistrationEntriesResponse);
    // Updates a specific registration entry
    rpc UpdateRegistrationEntry(UpdateRegistrationEntryRequest) returns (UpdateRegistrationEntryResponse);
    // Deletes a specific registration entry
    rpc DeleteRegistrationEntry(DeleteRegistrationEntryRequest) returns (DeleteRegistrationEntryResponse);

    // Creates a join token
    rpc CreateJoinToken(CreateJoinTokenRequest) returns (CreateJoinTokenResponse);
    // Fetches a specific join token
    rpc FetchJoinToken(FetchJoinTokenRequest) returns (FetchJoinTokenResponse);
    // Delete a specific join token
    rpc DeleteJoinToken(DeleteJoinTokenRequest) returns (DeleteJoinTokenResponse);
    // Prunes all join tokens that expire before the specified timestamp
    rpc PruneJoinTokens(PruneJoinTokensRequest) returns (PruneJoinTokensResponse);

    // Applies the plugin configuration
    rpc Configure(spire.common.plugin.ConfigureRequest) returns (spire.common.plugin.ConfigureResponse);
    // Returns the version and related metadata of the installed plugin
    rpc GetPluginInfo(spire.common.plugin.GetPluginInfoRequest) returns (spire.common.plugin.GetPluginInfoResponse);
}
