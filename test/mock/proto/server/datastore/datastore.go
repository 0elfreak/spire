// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/proto/server/datastore (interfaces: DataStore,Plugin)

// Package mock_datastore is a generated GoMock package.
package mock_datastore

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	plugin "github.com/spiffe/spire/proto/common/plugin"
	datastore "github.com/spiffe/spire/proto/server/datastore"
	reflect "reflect"
)

// MockDataStore is a mock of DataStore interface
type MockDataStore struct {
	ctrl     *gomock.Controller
	recorder *MockDataStoreMockRecorder
}

// MockDataStoreMockRecorder is the mock recorder for MockDataStore
type MockDataStoreMockRecorder struct {
	mock *MockDataStore
}

// NewMockDataStore creates a new mock instance
func NewMockDataStore(ctrl *gomock.Controller) *MockDataStore {
	mock := &MockDataStore{ctrl: ctrl}
	mock.recorder = &MockDataStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDataStore) EXPECT() *MockDataStoreMockRecorder {
	return m.recorder
}

// AppendBundle mocks base method
func (m *MockDataStore) AppendBundle(arg0 context.Context, arg1 *datastore.AppendBundleRequest) (*datastore.AppendBundleResponse, error) {
	ret := m.ctrl.Call(m, "AppendBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.AppendBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendBundle indicates an expected call of AppendBundle
func (mr *MockDataStoreMockRecorder) AppendBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBundle", reflect.TypeOf((*MockDataStore)(nil).AppendBundle), arg0, arg1)
}

// CreateAttestedNodeEntry mocks base method
func (m *MockDataStore) CreateAttestedNodeEntry(arg0 context.Context, arg1 *datastore.CreateAttestedNodeEntryRequest) (*datastore.CreateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttestedNodeEntry indicates an expected call of CreateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) CreateAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).CreateAttestedNodeEntry), arg0, arg1)
}

// CreateBundle mocks base method
func (m *MockDataStore) CreateBundle(arg0 context.Context, arg1 *datastore.CreateBundleRequest) (*datastore.CreateBundleResponse, error) {
	ret := m.ctrl.Call(m, "CreateBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBundle indicates an expected call of CreateBundle
func (mr *MockDataStoreMockRecorder) CreateBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBundle", reflect.TypeOf((*MockDataStore)(nil).CreateBundle), arg0, arg1)
}

// CreateJoinToken mocks base method
func (m *MockDataStore) CreateJoinToken(arg0 context.Context, arg1 *datastore.CreateJoinTokenRequest) (*datastore.CreateJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "CreateJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJoinToken indicates an expected call of CreateJoinToken
func (mr *MockDataStoreMockRecorder) CreateJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinToken", reflect.TypeOf((*MockDataStore)(nil).CreateJoinToken), arg0, arg1)
}

// CreateNodeResolverMapEntry mocks base method
func (m *MockDataStore) CreateNodeResolverMapEntry(arg0 context.Context, arg1 *datastore.CreateNodeResolverMapEntryRequest) (*datastore.CreateNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateNodeResolverMapEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeResolverMapEntry indicates an expected call of CreateNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) CreateNodeResolverMapEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).CreateNodeResolverMapEntry), arg0, arg1)
}

// CreateRegistrationEntry mocks base method
func (m *MockDataStore) CreateRegistrationEntry(arg0 context.Context, arg1 *datastore.CreateRegistrationEntryRequest) (*datastore.CreateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationEntry indicates an expected call of CreateRegistrationEntry
func (mr *MockDataStoreMockRecorder) CreateRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).CreateRegistrationEntry), arg0, arg1)
}

// DeleteAttestedNodeEntry mocks base method
func (m *MockDataStore) DeleteAttestedNodeEntry(arg0 context.Context, arg1 *datastore.DeleteAttestedNodeEntryRequest) (*datastore.DeleteAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttestedNodeEntry indicates an expected call of DeleteAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) DeleteAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteAttestedNodeEntry), arg0, arg1)
}

// DeleteBundle mocks base method
func (m *MockDataStore) DeleteBundle(arg0 context.Context, arg1 *datastore.DeleteBundleRequest) (*datastore.DeleteBundleResponse, error) {
	ret := m.ctrl.Call(m, "DeleteBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBundle indicates an expected call of DeleteBundle
func (mr *MockDataStoreMockRecorder) DeleteBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBundle", reflect.TypeOf((*MockDataStore)(nil).DeleteBundle), arg0, arg1)
}

// DeleteJoinToken mocks base method
func (m *MockDataStore) DeleteJoinToken(arg0 context.Context, arg1 *datastore.DeleteJoinTokenRequest) (*datastore.DeleteJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "DeleteJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJoinToken indicates an expected call of DeleteJoinToken
func (mr *MockDataStoreMockRecorder) DeleteJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJoinToken", reflect.TypeOf((*MockDataStore)(nil).DeleteJoinToken), arg0, arg1)
}

// DeleteNodeResolverMapEntry mocks base method
func (m *MockDataStore) DeleteNodeResolverMapEntry(arg0 context.Context, arg1 *datastore.DeleteNodeResolverMapEntryRequest) (*datastore.DeleteNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteNodeResolverMapEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeResolverMapEntry indicates an expected call of DeleteNodeResolverMapEntry
func (mr *MockDataStoreMockRecorder) DeleteNodeResolverMapEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeResolverMapEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteNodeResolverMapEntry), arg0, arg1)
}

// DeleteRegistrationEntry mocks base method
func (m *MockDataStore) DeleteRegistrationEntry(arg0 context.Context, arg1 *datastore.DeleteRegistrationEntryRequest) (*datastore.DeleteRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationEntry indicates an expected call of DeleteRegistrationEntry
func (mr *MockDataStoreMockRecorder) DeleteRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).DeleteRegistrationEntry), arg0, arg1)
}

// FetchAttestedNodeEntry mocks base method
func (m *MockDataStore) FetchAttestedNodeEntry(arg0 context.Context, arg1 *datastore.FetchAttestedNodeEntryRequest) (*datastore.FetchAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttestedNodeEntry indicates an expected call of FetchAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) FetchAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).FetchAttestedNodeEntry), arg0, arg1)
}

// FetchBundle mocks base method
func (m *MockDataStore) FetchBundle(arg0 context.Context, arg1 *datastore.FetchBundleRequest) (*datastore.FetchBundleResponse, error) {
	ret := m.ctrl.Call(m, "FetchBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBundle indicates an expected call of FetchBundle
func (mr *MockDataStoreMockRecorder) FetchBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBundle", reflect.TypeOf((*MockDataStore)(nil).FetchBundle), arg0, arg1)
}

// FetchJoinToken mocks base method
func (m *MockDataStore) FetchJoinToken(arg0 context.Context, arg1 *datastore.FetchJoinTokenRequest) (*datastore.FetchJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "FetchJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJoinToken indicates an expected call of FetchJoinToken
func (mr *MockDataStoreMockRecorder) FetchJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJoinToken", reflect.TypeOf((*MockDataStore)(nil).FetchJoinToken), arg0, arg1)
}

// FetchRegistrationEntry mocks base method
func (m *MockDataStore) FetchRegistrationEntry(arg0 context.Context, arg1 *datastore.FetchRegistrationEntryRequest) (*datastore.FetchRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRegistrationEntry indicates an expected call of FetchRegistrationEntry
func (mr *MockDataStoreMockRecorder) FetchRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).FetchRegistrationEntry), arg0, arg1)
}

// ListAttestedNodeEntries mocks base method
func (m *MockDataStore) ListAttestedNodeEntries(arg0 context.Context, arg1 *datastore.ListAttestedNodeEntriesRequest) (*datastore.ListAttestedNodeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListAttestedNodeEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListAttestedNodeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestedNodeEntries indicates an expected call of ListAttestedNodeEntries
func (mr *MockDataStoreMockRecorder) ListAttestedNodeEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestedNodeEntries", reflect.TypeOf((*MockDataStore)(nil).ListAttestedNodeEntries), arg0, arg1)
}

// ListBundles mocks base method
func (m *MockDataStore) ListBundles(arg0 context.Context, arg1 *datastore.ListBundlesRequest) (*datastore.ListBundlesResponse, error) {
	ret := m.ctrl.Call(m, "ListBundles", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListBundlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBundles indicates an expected call of ListBundles
func (mr *MockDataStoreMockRecorder) ListBundles(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBundles", reflect.TypeOf((*MockDataStore)(nil).ListBundles), arg0, arg1)
}

// ListNodeResolverMapEntries mocks base method
func (m *MockDataStore) ListNodeResolverMapEntries(arg0 context.Context, arg1 *datastore.ListNodeResolverMapEntriesRequest) (*datastore.ListNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListNodeResolverMapEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeResolverMapEntries indicates an expected call of ListNodeResolverMapEntries
func (mr *MockDataStoreMockRecorder) ListNodeResolverMapEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeResolverMapEntries", reflect.TypeOf((*MockDataStore)(nil).ListNodeResolverMapEntries), arg0, arg1)
}

// ListRegistrationEntries mocks base method
func (m *MockDataStore) ListRegistrationEntries(arg0 context.Context, arg1 *datastore.ListRegistrationEntriesRequest) (*datastore.ListRegistrationEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListRegistrationEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListRegistrationEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistrationEntries indicates an expected call of ListRegistrationEntries
func (mr *MockDataStoreMockRecorder) ListRegistrationEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationEntries", reflect.TypeOf((*MockDataStore)(nil).ListRegistrationEntries), arg0, arg1)
}

// PruneJoinTokens mocks base method
func (m *MockDataStore) PruneJoinTokens(arg0 context.Context, arg1 *datastore.PruneJoinTokensRequest) (*datastore.PruneJoinTokensResponse, error) {
	ret := m.ctrl.Call(m, "PruneJoinTokens", arg0, arg1)
	ret0, _ := ret[0].(*datastore.PruneJoinTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneJoinTokens indicates an expected call of PruneJoinTokens
func (mr *MockDataStoreMockRecorder) PruneJoinTokens(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneJoinTokens", reflect.TypeOf((*MockDataStore)(nil).PruneJoinTokens), arg0, arg1)
}

// RectifyNodeResolverMapEntries mocks base method
func (m *MockDataStore) RectifyNodeResolverMapEntries(arg0 context.Context, arg1 *datastore.RectifyNodeResolverMapEntriesRequest) (*datastore.RectifyNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "RectifyNodeResolverMapEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.RectifyNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyNodeResolverMapEntries indicates an expected call of RectifyNodeResolverMapEntries
func (mr *MockDataStoreMockRecorder) RectifyNodeResolverMapEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyNodeResolverMapEntries", reflect.TypeOf((*MockDataStore)(nil).RectifyNodeResolverMapEntries), arg0, arg1)
}

// UpdateAttestedNodeEntry mocks base method
func (m *MockDataStore) UpdateAttestedNodeEntry(arg0 context.Context, arg1 *datastore.UpdateAttestedNodeEntryRequest) (*datastore.UpdateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttestedNodeEntry indicates an expected call of UpdateAttestedNodeEntry
func (mr *MockDataStoreMockRecorder) UpdateAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestedNodeEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateAttestedNodeEntry), arg0, arg1)
}

// UpdateBundle mocks base method
func (m *MockDataStore) UpdateBundle(arg0 context.Context, arg1 *datastore.UpdateBundleRequest) (*datastore.UpdateBundleResponse, error) {
	ret := m.ctrl.Call(m, "UpdateBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBundle indicates an expected call of UpdateBundle
func (mr *MockDataStoreMockRecorder) UpdateBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBundle", reflect.TypeOf((*MockDataStore)(nil).UpdateBundle), arg0, arg1)
}

// UpdateRegistrationEntry mocks base method
func (m *MockDataStore) UpdateRegistrationEntry(arg0 context.Context, arg1 *datastore.UpdateRegistrationEntryRequest) (*datastore.UpdateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationEntry indicates an expected call of UpdateRegistrationEntry
func (mr *MockDataStoreMockRecorder) UpdateRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationEntry", reflect.TypeOf((*MockDataStore)(nil).UpdateRegistrationEntry), arg0, arg1)
}

// MockPlugin is a mock of Plugin interface
type MockPlugin struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMockRecorder
}

// MockPluginMockRecorder is the mock recorder for MockPlugin
type MockPluginMockRecorder struct {
	mock *MockPlugin
}

// NewMockPlugin creates a new mock instance
func NewMockPlugin(ctrl *gomock.Controller) *MockPlugin {
	mock := &MockPlugin{ctrl: ctrl}
	mock.recorder = &MockPluginMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlugin) EXPECT() *MockPluginMockRecorder {
	return m.recorder
}

// AppendBundle mocks base method
func (m *MockPlugin) AppendBundle(arg0 context.Context, arg1 *datastore.AppendBundleRequest) (*datastore.AppendBundleResponse, error) {
	ret := m.ctrl.Call(m, "AppendBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.AppendBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AppendBundle indicates an expected call of AppendBundle
func (mr *MockPluginMockRecorder) AppendBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendBundle", reflect.TypeOf((*MockPlugin)(nil).AppendBundle), arg0, arg1)
}

// Configure mocks base method
func (m *MockPlugin) Configure(arg0 context.Context, arg1 *plugin.ConfigureRequest) (*plugin.ConfigureResponse, error) {
	ret := m.ctrl.Call(m, "Configure", arg0, arg1)
	ret0, _ := ret[0].(*plugin.ConfigureResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Configure indicates an expected call of Configure
func (mr *MockPluginMockRecorder) Configure(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Configure", reflect.TypeOf((*MockPlugin)(nil).Configure), arg0, arg1)
}

// CreateAttestedNodeEntry mocks base method
func (m *MockPlugin) CreateAttestedNodeEntry(arg0 context.Context, arg1 *datastore.CreateAttestedNodeEntryRequest) (*datastore.CreateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAttestedNodeEntry indicates an expected call of CreateAttestedNodeEntry
func (mr *MockPluginMockRecorder) CreateAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAttestedNodeEntry", reflect.TypeOf((*MockPlugin)(nil).CreateAttestedNodeEntry), arg0, arg1)
}

// CreateBundle mocks base method
func (m *MockPlugin) CreateBundle(arg0 context.Context, arg1 *datastore.CreateBundleRequest) (*datastore.CreateBundleResponse, error) {
	ret := m.ctrl.Call(m, "CreateBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBundle indicates an expected call of CreateBundle
func (mr *MockPluginMockRecorder) CreateBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBundle", reflect.TypeOf((*MockPlugin)(nil).CreateBundle), arg0, arg1)
}

// CreateJoinToken mocks base method
func (m *MockPlugin) CreateJoinToken(arg0 context.Context, arg1 *datastore.CreateJoinTokenRequest) (*datastore.CreateJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "CreateJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJoinToken indicates an expected call of CreateJoinToken
func (mr *MockPluginMockRecorder) CreateJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJoinToken", reflect.TypeOf((*MockPlugin)(nil).CreateJoinToken), arg0, arg1)
}

// CreateNodeResolverMapEntry mocks base method
func (m *MockPlugin) CreateNodeResolverMapEntry(arg0 context.Context, arg1 *datastore.CreateNodeResolverMapEntryRequest) (*datastore.CreateNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateNodeResolverMapEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNodeResolverMapEntry indicates an expected call of CreateNodeResolverMapEntry
func (mr *MockPluginMockRecorder) CreateNodeResolverMapEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNodeResolverMapEntry", reflect.TypeOf((*MockPlugin)(nil).CreateNodeResolverMapEntry), arg0, arg1)
}

// CreateRegistrationEntry mocks base method
func (m *MockPlugin) CreateRegistrationEntry(arg0 context.Context, arg1 *datastore.CreateRegistrationEntryRequest) (*datastore.CreateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "CreateRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.CreateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRegistrationEntry indicates an expected call of CreateRegistrationEntry
func (mr *MockPluginMockRecorder) CreateRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRegistrationEntry", reflect.TypeOf((*MockPlugin)(nil).CreateRegistrationEntry), arg0, arg1)
}

// DeleteAttestedNodeEntry mocks base method
func (m *MockPlugin) DeleteAttestedNodeEntry(arg0 context.Context, arg1 *datastore.DeleteAttestedNodeEntryRequest) (*datastore.DeleteAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAttestedNodeEntry indicates an expected call of DeleteAttestedNodeEntry
func (mr *MockPluginMockRecorder) DeleteAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAttestedNodeEntry", reflect.TypeOf((*MockPlugin)(nil).DeleteAttestedNodeEntry), arg0, arg1)
}

// DeleteBundle mocks base method
func (m *MockPlugin) DeleteBundle(arg0 context.Context, arg1 *datastore.DeleteBundleRequest) (*datastore.DeleteBundleResponse, error) {
	ret := m.ctrl.Call(m, "DeleteBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteBundle indicates an expected call of DeleteBundle
func (mr *MockPluginMockRecorder) DeleteBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBundle", reflect.TypeOf((*MockPlugin)(nil).DeleteBundle), arg0, arg1)
}

// DeleteJoinToken mocks base method
func (m *MockPlugin) DeleteJoinToken(arg0 context.Context, arg1 *datastore.DeleteJoinTokenRequest) (*datastore.DeleteJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "DeleteJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteJoinToken indicates an expected call of DeleteJoinToken
func (mr *MockPluginMockRecorder) DeleteJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteJoinToken", reflect.TypeOf((*MockPlugin)(nil).DeleteJoinToken), arg0, arg1)
}

// DeleteNodeResolverMapEntry mocks base method
func (m *MockPlugin) DeleteNodeResolverMapEntry(arg0 context.Context, arg1 *datastore.DeleteNodeResolverMapEntryRequest) (*datastore.DeleteNodeResolverMapEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteNodeResolverMapEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteNodeResolverMapEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNodeResolverMapEntry indicates an expected call of DeleteNodeResolverMapEntry
func (mr *MockPluginMockRecorder) DeleteNodeResolverMapEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeResolverMapEntry", reflect.TypeOf((*MockPlugin)(nil).DeleteNodeResolverMapEntry), arg0, arg1)
}

// DeleteRegistrationEntry mocks base method
func (m *MockPlugin) DeleteRegistrationEntry(arg0 context.Context, arg1 *datastore.DeleteRegistrationEntryRequest) (*datastore.DeleteRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "DeleteRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.DeleteRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteRegistrationEntry indicates an expected call of DeleteRegistrationEntry
func (mr *MockPluginMockRecorder) DeleteRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRegistrationEntry", reflect.TypeOf((*MockPlugin)(nil).DeleteRegistrationEntry), arg0, arg1)
}

// FetchAttestedNodeEntry mocks base method
func (m *MockPlugin) FetchAttestedNodeEntry(arg0 context.Context, arg1 *datastore.FetchAttestedNodeEntryRequest) (*datastore.FetchAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAttestedNodeEntry indicates an expected call of FetchAttestedNodeEntry
func (mr *MockPluginMockRecorder) FetchAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAttestedNodeEntry", reflect.TypeOf((*MockPlugin)(nil).FetchAttestedNodeEntry), arg0, arg1)
}

// FetchBundle mocks base method
func (m *MockPlugin) FetchBundle(arg0 context.Context, arg1 *datastore.FetchBundleRequest) (*datastore.FetchBundleResponse, error) {
	ret := m.ctrl.Call(m, "FetchBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchBundle indicates an expected call of FetchBundle
func (mr *MockPluginMockRecorder) FetchBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchBundle", reflect.TypeOf((*MockPlugin)(nil).FetchBundle), arg0, arg1)
}

// FetchJoinToken mocks base method
func (m *MockPlugin) FetchJoinToken(arg0 context.Context, arg1 *datastore.FetchJoinTokenRequest) (*datastore.FetchJoinTokenResponse, error) {
	ret := m.ctrl.Call(m, "FetchJoinToken", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchJoinTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchJoinToken indicates an expected call of FetchJoinToken
func (mr *MockPluginMockRecorder) FetchJoinToken(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchJoinToken", reflect.TypeOf((*MockPlugin)(nil).FetchJoinToken), arg0, arg1)
}

// FetchRegistrationEntry mocks base method
func (m *MockPlugin) FetchRegistrationEntry(arg0 context.Context, arg1 *datastore.FetchRegistrationEntryRequest) (*datastore.FetchRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "FetchRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.FetchRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchRegistrationEntry indicates an expected call of FetchRegistrationEntry
func (mr *MockPluginMockRecorder) FetchRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchRegistrationEntry", reflect.TypeOf((*MockPlugin)(nil).FetchRegistrationEntry), arg0, arg1)
}

// GetPluginInfo mocks base method
func (m *MockPlugin) GetPluginInfo(arg0 context.Context, arg1 *plugin.GetPluginInfoRequest) (*plugin.GetPluginInfoResponse, error) {
	ret := m.ctrl.Call(m, "GetPluginInfo", arg0, arg1)
	ret0, _ := ret[0].(*plugin.GetPluginInfoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPluginInfo indicates an expected call of GetPluginInfo
func (mr *MockPluginMockRecorder) GetPluginInfo(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPluginInfo", reflect.TypeOf((*MockPlugin)(nil).GetPluginInfo), arg0, arg1)
}

// ListAttestedNodeEntries mocks base method
func (m *MockPlugin) ListAttestedNodeEntries(arg0 context.Context, arg1 *datastore.ListAttestedNodeEntriesRequest) (*datastore.ListAttestedNodeEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListAttestedNodeEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListAttestedNodeEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAttestedNodeEntries indicates an expected call of ListAttestedNodeEntries
func (mr *MockPluginMockRecorder) ListAttestedNodeEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAttestedNodeEntries", reflect.TypeOf((*MockPlugin)(nil).ListAttestedNodeEntries), arg0, arg1)
}

// ListBundles mocks base method
func (m *MockPlugin) ListBundles(arg0 context.Context, arg1 *datastore.ListBundlesRequest) (*datastore.ListBundlesResponse, error) {
	ret := m.ctrl.Call(m, "ListBundles", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListBundlesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBundles indicates an expected call of ListBundles
func (mr *MockPluginMockRecorder) ListBundles(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBundles", reflect.TypeOf((*MockPlugin)(nil).ListBundles), arg0, arg1)
}

// ListNodeResolverMapEntries mocks base method
func (m *MockPlugin) ListNodeResolverMapEntries(arg0 context.Context, arg1 *datastore.ListNodeResolverMapEntriesRequest) (*datastore.ListNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListNodeResolverMapEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodeResolverMapEntries indicates an expected call of ListNodeResolverMapEntries
func (mr *MockPluginMockRecorder) ListNodeResolverMapEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodeResolverMapEntries", reflect.TypeOf((*MockPlugin)(nil).ListNodeResolverMapEntries), arg0, arg1)
}

// ListRegistrationEntries mocks base method
func (m *MockPlugin) ListRegistrationEntries(arg0 context.Context, arg1 *datastore.ListRegistrationEntriesRequest) (*datastore.ListRegistrationEntriesResponse, error) {
	ret := m.ctrl.Call(m, "ListRegistrationEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.ListRegistrationEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRegistrationEntries indicates an expected call of ListRegistrationEntries
func (mr *MockPluginMockRecorder) ListRegistrationEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRegistrationEntries", reflect.TypeOf((*MockPlugin)(nil).ListRegistrationEntries), arg0, arg1)
}

// PruneJoinTokens mocks base method
func (m *MockPlugin) PruneJoinTokens(arg0 context.Context, arg1 *datastore.PruneJoinTokensRequest) (*datastore.PruneJoinTokensResponse, error) {
	ret := m.ctrl.Call(m, "PruneJoinTokens", arg0, arg1)
	ret0, _ := ret[0].(*datastore.PruneJoinTokensResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PruneJoinTokens indicates an expected call of PruneJoinTokens
func (mr *MockPluginMockRecorder) PruneJoinTokens(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneJoinTokens", reflect.TypeOf((*MockPlugin)(nil).PruneJoinTokens), arg0, arg1)
}

// RectifyNodeResolverMapEntries mocks base method
func (m *MockPlugin) RectifyNodeResolverMapEntries(arg0 context.Context, arg1 *datastore.RectifyNodeResolverMapEntriesRequest) (*datastore.RectifyNodeResolverMapEntriesResponse, error) {
	ret := m.ctrl.Call(m, "RectifyNodeResolverMapEntries", arg0, arg1)
	ret0, _ := ret[0].(*datastore.RectifyNodeResolverMapEntriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RectifyNodeResolverMapEntries indicates an expected call of RectifyNodeResolverMapEntries
func (mr *MockPluginMockRecorder) RectifyNodeResolverMapEntries(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RectifyNodeResolverMapEntries", reflect.TypeOf((*MockPlugin)(nil).RectifyNodeResolverMapEntries), arg0, arg1)
}

// UpdateAttestedNodeEntry mocks base method
func (m *MockPlugin) UpdateAttestedNodeEntry(arg0 context.Context, arg1 *datastore.UpdateAttestedNodeEntryRequest) (*datastore.UpdateAttestedNodeEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateAttestedNodeEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateAttestedNodeEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAttestedNodeEntry indicates an expected call of UpdateAttestedNodeEntry
func (mr *MockPluginMockRecorder) UpdateAttestedNodeEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAttestedNodeEntry", reflect.TypeOf((*MockPlugin)(nil).UpdateAttestedNodeEntry), arg0, arg1)
}

// UpdateBundle mocks base method
func (m *MockPlugin) UpdateBundle(arg0 context.Context, arg1 *datastore.UpdateBundleRequest) (*datastore.UpdateBundleResponse, error) {
	ret := m.ctrl.Call(m, "UpdateBundle", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateBundleResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBundle indicates an expected call of UpdateBundle
func (mr *MockPluginMockRecorder) UpdateBundle(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBundle", reflect.TypeOf((*MockPlugin)(nil).UpdateBundle), arg0, arg1)
}

// UpdateRegistrationEntry mocks base method
func (m *MockPlugin) UpdateRegistrationEntry(arg0 context.Context, arg1 *datastore.UpdateRegistrationEntryRequest) (*datastore.UpdateRegistrationEntryResponse, error) {
	ret := m.ctrl.Call(m, "UpdateRegistrationEntry", arg0, arg1)
	ret0, _ := ret[0].(*datastore.UpdateRegistrationEntryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRegistrationEntry indicates an expected call of UpdateRegistrationEntry
func (mr *MockPluginMockRecorder) UpdateRegistrationEntry(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRegistrationEntry", reflect.TypeOf((*MockPlugin)(nil).UpdateRegistrationEntry), arg0, arg1)
}
