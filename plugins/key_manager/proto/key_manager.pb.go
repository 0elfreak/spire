// Code generated by protoc-gen-go. DO NOT EDIT.
// source: key_manager.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	key_manager.proto

It has these top-level messages:
	GenerateKeyPairRequest
	GenerateKeyPairResponse
	FetchPrivateKeyRequest
	FetchPrivateKeyResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/spiffe/node-agent/plugins/common/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/node-agent/plugins/common/proto/common.proto
type ConfigureRequest proto2.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*proto2.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*proto2.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*proto2.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/node-agent/plugins/common/proto/common.proto
type ConfigureResponse proto2.ConfigureResponse

func (m *ConfigureResponse) Reset()         { (*proto2.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string { return (*proto2.ConfigureResponse)(m).String() }
func (*ConfigureResponse) ProtoMessage()    {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*proto2.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/node-agent/plugins/common/proto/common.proto
type GetPluginInfoRequest proto2.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset()         { (*proto2.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string { return (*proto2.GetPluginInfoRequest)(m).String() }
func (*GetPluginInfoRequest) ProtoMessage()    {}

// GetPluginInfoResponse from public import github.com/spiffe/node-agent/plugins/common/proto/common.proto
type GetPluginInfoResponse proto2.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset()          { (*proto2.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string  { return (*proto2.GetPluginInfoResponse)(m).String() }
func (*GetPluginInfoResponse) ProtoMessage()     {}
func (m *GetPluginInfoResponse) GetName() string { return (*proto2.GetPluginInfoResponse)(m).GetName() }
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string { return (*proto2.GetPluginInfoResponse)(m).GetType() }
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*proto2.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*proto2.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*proto2.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCompany()
}

// * Represents an empty request.
type GenerateKeyPairRequest struct {
}

func (m *GenerateKeyPairRequest) Reset()                    { *m = GenerateKeyPairRequest{} }
func (m *GenerateKeyPairRequest) String() string            { return proto1.CompactTextString(m) }
func (*GenerateKeyPairRequest) ProtoMessage()               {}
func (*GenerateKeyPairRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// * Represents a public and private key pair.
type GenerateKeyPairResponse struct {
	PublicKey  []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"`
	PrivateKey []byte `protobuf:"bytes,2,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (m *GenerateKeyPairResponse) Reset()                    { *m = GenerateKeyPairResponse{} }
func (m *GenerateKeyPairResponse) String() string            { return proto1.CompactTextString(m) }
func (*GenerateKeyPairResponse) ProtoMessage()               {}
func (*GenerateKeyPairResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GenerateKeyPairResponse) GetPublicKey() []byte {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

func (m *GenerateKeyPairResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

// * Represents an empty request.
type FetchPrivateKeyRequest struct {
}

func (m *FetchPrivateKeyRequest) Reset()                    { *m = FetchPrivateKeyRequest{} }
func (m *FetchPrivateKeyRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchPrivateKeyRequest) ProtoMessage()               {}
func (*FetchPrivateKeyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// * Represents a private key.
type FetchPrivateKeyResponse struct {
	PrivateKey []byte `protobuf:"bytes,1,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
}

func (m *FetchPrivateKeyResponse) Reset()                    { *m = FetchPrivateKeyResponse{} }
func (m *FetchPrivateKeyResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchPrivateKeyResponse) ProtoMessage()               {}
func (*FetchPrivateKeyResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchPrivateKeyResponse) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func init() {
	proto1.RegisterType((*GenerateKeyPairRequest)(nil), "proto.GenerateKeyPairRequest")
	proto1.RegisterType((*GenerateKeyPairResponse)(nil), "proto.GenerateKeyPairResponse")
	proto1.RegisterType((*FetchPrivateKeyRequest)(nil), "proto.FetchPrivateKeyRequest")
	proto1.RegisterType((*FetchPrivateKeyResponse)(nil), "proto.FetchPrivateKeyResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for KeyManager service

type KeyManagerClient interface {
	// / Creates a key pair that is bound to hardware.
	GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error)
	// / Returns previously generated private key. For use after node restarts.
	FetchPrivateKey(ctx context.Context, in *FetchPrivateKeyRequest, opts ...grpc.CallOption) (*FetchPrivateKeyResponse, error)
	// / Applies the plugin configuration and returns configuration errors.
	Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error)
	// / Returns the version and related metadata of the plugin.
	GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error)
}

type keyManagerClient struct {
	cc *grpc.ClientConn
}

func NewKeyManagerClient(cc *grpc.ClientConn) KeyManagerClient {
	return &keyManagerClient{cc}
}

func (c *keyManagerClient) GenerateKeyPair(ctx context.Context, in *GenerateKeyPairRequest, opts ...grpc.CallOption) (*GenerateKeyPairResponse, error) {
	out := new(GenerateKeyPairResponse)
	err := grpc.Invoke(ctx, "/proto.KeyManager/GenerateKeyPair", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) FetchPrivateKey(ctx context.Context, in *FetchPrivateKeyRequest, opts ...grpc.CallOption) (*FetchPrivateKeyResponse, error) {
	out := new(FetchPrivateKeyResponse)
	err := grpc.Invoke(ctx, "/proto.KeyManager/FetchPrivateKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error) {
	out := new(proto2.ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.KeyManager/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keyManagerClient) GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error) {
	out := new(proto2.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/proto.KeyManager/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for KeyManager service

type KeyManagerServer interface {
	// / Creates a key pair that is bound to hardware.
	GenerateKeyPair(context.Context, *GenerateKeyPairRequest) (*GenerateKeyPairResponse, error)
	// / Returns previously generated private key. For use after node restarts.
	FetchPrivateKey(context.Context, *FetchPrivateKeyRequest) (*FetchPrivateKeyResponse, error)
	// / Applies the plugin configuration and returns configuration errors.
	Configure(context.Context, *proto2.ConfigureRequest) (*proto2.ConfigureResponse, error)
	// / Returns the version and related metadata of the plugin.
	GetPluginInfo(context.Context, *proto2.GetPluginInfoRequest) (*proto2.GetPluginInfoResponse, error)
}

func RegisterKeyManagerServer(s *grpc.Server, srv KeyManagerServer) {
	s.RegisterService(&_KeyManager_serviceDesc, srv)
}

func _KeyManager_GenerateKeyPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateKeyPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GenerateKeyPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManager/GenerateKeyPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GenerateKeyPair(ctx, req.(*GenerateKeyPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_FetchPrivateKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchPrivateKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).FetchPrivateKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManager/FetchPrivateKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).FetchPrivateKey(ctx, req.(*FetchPrivateKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManager/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).Configure(ctx, req.(*proto2.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeyManager_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.KeyManager/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyManagerServer).GetPluginInfo(ctx, req.(*proto2.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _KeyManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.KeyManager",
	HandlerType: (*KeyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenerateKeyPair",
			Handler:    _KeyManager_GenerateKeyPair_Handler,
		},
		{
			MethodName: "FetchPrivateKey",
			Handler:    _KeyManager_FetchPrivateKey_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _KeyManager_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _KeyManager_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_manager.proto",
}

func init() { proto1.RegisterFile("key_manager.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 295 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0xc3, 0x30,
	0x14, 0xc6, 0xed, 0x40, 0x61, 0x0f, 0x65, 0x98, 0x83, 0x2d, 0x73, 0x0e, 0xd9, 0xc9, 0x8b, 0x2d,
	0xe8, 0xc9, 0xcb, 0x2e, 0x82, 0x43, 0x8b, 0x10, 0x76, 0xf1, 0x28, 0x6d, 0x7d, 0xed, 0x82, 0x6b,
	0x12, 0xd3, 0x54, 0xe8, 0xff, 0xe6, 0x1f, 0x27, 0xb6, 0x69, 0xdc, 0xda, 0xee, 0x54, 0xfa, 0x7d,
	0x79, 0xbf, 0xf7, 0x7d, 0x09, 0x9c, 0x7f, 0x62, 0xf5, 0x9e, 0x47, 0x3c, 0xca, 0x50, 0xf9, 0x52,
	0x09, 0x2d, 0xc8, 0x71, 0xfd, 0x99, 0x2e, 0x33, 0xa6, 0x37, 0x65, 0xec, 0x27, 0x22, 0x0f, 0x0a,
	0xc9, 0xd2, 0x14, 0x03, 0x2e, 0x3e, 0xf0, 0x36, 0xca, 0x90, 0xeb, 0x40, 0x6e, 0xcb, 0x8c, 0xf1,
	0x22, 0x48, 0x44, 0x9e, 0x0b, 0x1e, 0xd4, 0x23, 0xe6, 0xa7, 0xc1, 0x2c, 0x3c, 0xb8, 0x58, 0x21,
	0x47, 0x15, 0x69, 0x0c, 0xb1, 0xa2, 0x11, 0x53, 0x6b, 0xfc, 0x2a, 0xb1, 0xd0, 0x8b, 0x37, 0x70,
	0x7b, 0x4e, 0x21, 0x05, 0x2f, 0x90, 0xcc, 0x60, 0x2c, 0xcb, 0x78, 0xcb, 0x92, 0x10, 0x2b, 0xcf,
	0xb9, 0x76, 0x6e, 0x4e, 0xd7, 0xff, 0x02, 0x99, 0x03, 0x48, 0xc5, 0xbe, 0x9b, 0x39, 0x6f, 0x54,
	0xdb, 0x3b, 0xca, 0xdf, 0xca, 0x27, 0xd4, 0xc9, 0x86, 0x5a, 0xa9, 0x5d, 0xf9, 0x00, 0x6e, 0xcf,
	0x31, 0x2b, 0xf7, 0xa1, 0x4e, 0x17, 0x7a, 0xf7, 0x33, 0x02, 0x08, 0xb1, 0x7a, 0x6d, 0xee, 0x88,
	0x50, 0x98, 0x74, 0xc2, 0x93, 0xab, 0xa6, 0xb1, 0x3f, 0x5c, 0x77, 0x3a, 0x3f, 0x64, 0x9b, 0x00,
	0x14, 0x26, 0x9d, 0x6c, 0x96, 0x38, 0xdc, 0xc6, 0x12, 0x0f, 0x55, 0x5a, 0xc2, 0xf8, 0x51, 0xf0,
	0x94, 0x65, 0xa5, 0x42, 0xe2, 0x9a, 0xc3, 0x56, 0x69, 0x29, 0x5e, 0xdf, 0x30, 0xf3, 0x2f, 0x70,
	0xb6, 0x42, 0x4d, 0xeb, 0x27, 0x7e, 0xe6, 0xa9, 0x20, 0x97, 0xb6, 0xc2, 0x8e, 0xda, 0x72, 0x66,
	0xc3, 0x66, 0xc3, 0xa2, 0x47, 0xf1, 0x49, 0x6d, 0xdf, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x6e,
	0x74, 0xf7, 0x0e, 0x6b, 0x02, 0x00, 0x00,
}
