/**Resolves the derived selectors for a given Node Agent. This mapping will be stored, and used to further derive which workloads the Node Agent is authorized to run.*/
syntax = "proto3";
package noderesolver;

import public "github.com/spiffe/sri/common/plugin/plugin.proto";

/**Represents a a type with a selectorType and a selector.*/
message NodeResolution {
    string selectorType = 1; ///It represents the type of attestation used in attesting the entity (Eg: AWS, K8).
    string selector = 2; ///A native property of an entity ( node or workload ).
}

/**Represents a type with a list of NodeResolution.*/
message NodeResolutionList {
    repeated NodeResolution list = 1; ///A list of NodeResolution.
}

/**Represents a request with a list of BaseSPIFFEIDs.*/
message ResolveRequest {
    repeated string baseSpiffeIdList = 1; ///A list of BaseSPIFFE Ids.
}

/**Represents a response with a map of SPIFFE ID to a list of Noderesolution.*/
message ResolveResponse {
    map<string, NodeResolutionList> map = 1; ///Map[SPIFFE_ID] => NodeResolutionList.
}

/**Represents an empty message*/
message Empty{}

service NodeResolver {
    /**Responsible for configuration of the plugin.*/
    rpc Configure(sriplugin.ConfigureRequest) returns (sriplugin.ConfigureResponse);
    /**Returns the  version and related metadata of the installed plugin.*/
    rpc GetPluginInfo(sriplugin.GetPluginInfoRequest) returns (sriplugin.GetPluginInfoResponse);
    /**Retrieves a list of properties reflecting the current state of a particular node(s).*/
    rpc Resolve(ResolveRequest) returns (ResolveResponse);
}
