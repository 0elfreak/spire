// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/spiffe/spire/pkg/agent/cache (interfaces: Manager)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cache "github.com/spiffe/spire/pkg/agent/cache"
)

// MockManager is a mock of Manager interface
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Busy mocks base method
func (m *MockManager) Busy() bool {
	ret := m.ctrl.Call(m, "Busy")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Busy indicates an expected call of Busy
func (mr *MockManagerMockRecorder) Busy() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Busy", reflect.TypeOf((*MockManager)(nil).Busy))
}

// Cache mocks base method
func (m *MockManager) Cache() cache.Cache {
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(cache.Cache)
	return ret0
}

// Cache indicates an expected call of Cache
func (mr *MockManagerMockRecorder) Cache() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockManager)(nil).Cache))
}

// Done mocks base method
func (m *MockManager) Done() <-chan struct{} {
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done
func (mr *MockManagerMockRecorder) Done() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockManager)(nil).Done))
}

// Err mocks base method
func (m *MockManager) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockManagerMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockManager)(nil).Err))
}

// Init mocks base method
func (m *MockManager) Init() {
	m.ctrl.Call(m, "Init")
}

// Init indicates an expected call of Init
func (mr *MockManagerMockRecorder) Init() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockManager)(nil).Init))
}

// Shutdown mocks base method
func (m *MockManager) Shutdown(arg0 error) {
	m.ctrl.Call(m, "Shutdown", arg0)
}

// Shutdown indicates an expected call of Shutdown
func (mr *MockManagerMockRecorder) Shutdown(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockManager)(nil).Shutdown), arg0)
}
