// Code generated by protoc-gen-go. DO NOT EDIT.
// source: spire/types/federateswithmatch.proto

package types

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FederatesWithMatch_MatchBehavior int32

const (
	// Indicates that the federated trust domains in this match are
	// equal to the candidate trust domains, independent of ordering.
	FederatesWithMatch_MATCH_EXACT FederatesWithMatch_MatchBehavior = 0
	// Indicates that the federated trust domains in this match are
	// a subset of the candidate trust domains.
	FederatesWithMatch_MATCH_SUBSET FederatesWithMatch_MatchBehavior = 1
)

var FederatesWithMatch_MatchBehavior_name = map[int32]string{
	0: "MATCH_EXACT",
	1: "MATCH_SUBSET",
}

var FederatesWithMatch_MatchBehavior_value = map[string]int32{
	"MATCH_EXACT":  0,
	"MATCH_SUBSET": 1,
}

func (x FederatesWithMatch_MatchBehavior) String() string {
	return proto.EnumName(FederatesWithMatch_MatchBehavior_name, int32(x))
}

func (FederatesWithMatch_MatchBehavior) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ff1a26982e5649ef, []int{0, 0}
}

type FederatesWithMatch struct {
	// The set of trust domains to match on.
	TrustDomains []string `protobuf:"bytes,1,rep,name=trust_domains,json=trustDomains,proto3" json:"trust_domains,omitempty"`
	// How to match the trust domains.
	Match                FederatesWithMatch_MatchBehavior `protobuf:"varint,2,opt,name=match,proto3,enum=spire.types.FederatesWithMatch_MatchBehavior" json:"match,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                         `json:"-"`
	XXX_unrecognized     []byte                           `json:"-"`
	XXX_sizecache        int32                            `json:"-"`
}

func (m *FederatesWithMatch) Reset()         { *m = FederatesWithMatch{} }
func (m *FederatesWithMatch) String() string { return proto.CompactTextString(m) }
func (*FederatesWithMatch) ProtoMessage()    {}
func (*FederatesWithMatch) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff1a26982e5649ef, []int{0}
}

func (m *FederatesWithMatch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FederatesWithMatch.Unmarshal(m, b)
}
func (m *FederatesWithMatch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FederatesWithMatch.Marshal(b, m, deterministic)
}
func (m *FederatesWithMatch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FederatesWithMatch.Merge(m, src)
}
func (m *FederatesWithMatch) XXX_Size() int {
	return xxx_messageInfo_FederatesWithMatch.Size(m)
}
func (m *FederatesWithMatch) XXX_DiscardUnknown() {
	xxx_messageInfo_FederatesWithMatch.DiscardUnknown(m)
}

var xxx_messageInfo_FederatesWithMatch proto.InternalMessageInfo

func (m *FederatesWithMatch) GetTrustDomains() []string {
	if m != nil {
		return m.TrustDomains
	}
	return nil
}

func (m *FederatesWithMatch) GetMatch() FederatesWithMatch_MatchBehavior {
	if m != nil {
		return m.Match
	}
	return FederatesWithMatch_MATCH_EXACT
}

func init() {
	proto.RegisterEnum("spire.types.FederatesWithMatch_MatchBehavior", FederatesWithMatch_MatchBehavior_name, FederatesWithMatch_MatchBehavior_value)
	proto.RegisterType((*FederatesWithMatch)(nil), "spire.types.FederatesWithMatch")
}

func init() {
	proto.RegisterFile("spire/types/federateswithmatch.proto", fileDescriptor_ff1a26982e5649ef)
}

var fileDescriptor_ff1a26982e5649ef = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0x2e, 0xc8, 0x2c,
	0x4a, 0xd5, 0x2f, 0xa9, 0x2c, 0x48, 0x2d, 0xd6, 0x4f, 0x4b, 0x4d, 0x49, 0x2d, 0x4a, 0x2c, 0x49,
	0x2d, 0x2e, 0xcf, 0x2c, 0xc9, 0xc8, 0x4d, 0x2c, 0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x06, 0xab, 0xd2, 0x03, 0xab, 0x52, 0xda, 0xc4, 0xc8, 0x25, 0xe4, 0x06, 0x53, 0x19,
	0x9e, 0x59, 0x92, 0xe1, 0x0b, 0x52, 0x29, 0xa4, 0xcc, 0xc5, 0x5b, 0x52, 0x54, 0x5a, 0x5c, 0x12,
	0x9f, 0x92, 0x9f, 0x9b, 0x98, 0x99, 0x57, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x19, 0xc4, 0x03,
	0x16, 0x74, 0x81, 0x88, 0x09, 0x39, 0x73, 0xb1, 0x82, 0xcd, 0x95, 0x60, 0x52, 0x60, 0xd4, 0xe0,
	0x33, 0xd2, 0xd5, 0x43, 0x32, 0x58, 0x0f, 0xd3, 0x50, 0x3d, 0x30, 0xe9, 0x94, 0x9a, 0x91, 0x58,
	0x96, 0x99, 0x5f, 0x14, 0x04, 0xd1, 0xab, 0x64, 0xc4, 0xc5, 0x8b, 0x22, 0x2e, 0xc4, 0xcf, 0xc5,
	0xed, 0xeb, 0x18, 0xe2, 0xec, 0x11, 0xef, 0x1a, 0xe1, 0xe8, 0x1c, 0x22, 0xc0, 0x20, 0x24, 0xc0,
	0xc5, 0x03, 0x11, 0x08, 0x0e, 0x75, 0x0a, 0x76, 0x0d, 0x11, 0x60, 0x74, 0xd2, 0x8e, 0xd2, 0x4c,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0x2e, 0xc8, 0x4c, 0x4b, 0x4b,
	0xd5, 0x87, 0xf8, 0x1d, 0xec, 0x45, 0x7d, 0xa4, 0x70, 0x48, 0x62, 0x03, 0x0b, 0x19, 0x03, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x53, 0xc5, 0x74, 0xf0, 0x1d, 0x01, 0x00, 0x00,
}
