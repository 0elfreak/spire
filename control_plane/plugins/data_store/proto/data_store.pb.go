// Code generated by protoc-gen-go. DO NOT EDIT.
// source: data_store.proto

/*
Package control_plane_proto is a generated protocol buffer package.

It is generated from these files:
	data_store.proto

It has these top-level messages:
	Selector
	RegisteredEntry
	FederatedBundle
	NodeResolverMapEntry
	AttestedNodeEntry
	CreateFederatedEntryRequest
	CreateFederatedEntryResponse
	ListFederatedEntryRequest
	ListFederatedEntryResponse
	UpdateFederatedEntryRequest
	UpdateFederatedEntryResponse
	DeleteFederatedEntryRequest
	DeleteFederatedEntryResponse
	CreateAttestedNodeEntryRequest
	CreateAttestedNodeEntryResponse
	FetchAttestedNodeEntryRequest
	FetchAttestedNodeEntryResponse
	FetchStaleNodeEntriesRequest
	FetchStaleNodeEntriesResponse
	UpdateAttestedNodeEntryRequest
	UpdateAttestedNodeEntryResponse
	DeleteAttestedNodeEntryRequest
	DeleteAttestedNodeEntryResponse
	CreateNodeResolverMapEntryRequest
	CreateNodeResolverMapEntryResponse
	FetchNodeResolverMapEntryRequest
	FetchNodeResolverMapEntryResponse
	DeleteNodeResolverMapEntryRequest
	DeleteNodeResolverMapEntryResponse
	RectifyNodeResolverMapEntriesRequest
	RectifyNodeResolverMapEntriesResponse
	CreateRegistrationEntryRequest
	CreateRegistrationEntryResponse
	FetchRegistrationEntryRequest
	FetchRegistrationEntryResponse
	UpdateRegistrationEntryRequest
	UpdateRegistrationEntryResponse
	DeleteRegistrationEntryRequest
	DeleteRegistrationEntryResponse
	ListParentIDEntriesRequest
	ListParentIDEntriesResponse
	ListSelectorEntriesRequest
	ListSelectorEntriesResponse
	ListSpiffeEntriesRequest
	ListSpiffeEntriesResponse
*/
package control_plane_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import control_plane_proto1 "github.com/spiffe/sri/control_plane/plugins/common/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type ConfigureRequest control_plane_proto1.ConfigureRequest

func (m *ConfigureRequest) Reset() { (*control_plane_proto1.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string {
	return (*control_plane_proto1.ConfigureRequest)(m).String()
}
func (*ConfigureRequest) ProtoMessage() {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*control_plane_proto1.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type ConfigureResponse control_plane_proto1.ConfigureResponse

func (m *ConfigureResponse) Reset() { (*control_plane_proto1.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string {
	return (*control_plane_proto1.ConfigureResponse)(m).String()
}
func (*ConfigureResponse) ProtoMessage() {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*control_plane_proto1.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type GetPluginInfoRequest control_plane_proto1.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset() { (*control_plane_proto1.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string {
	return (*control_plane_proto1.GetPluginInfoRequest)(m).String()
}
func (*GetPluginInfoRequest) ProtoMessage() {}

// GetPluginInfoResponse from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type GetPluginInfoResponse control_plane_proto1.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset() { (*control_plane_proto1.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).String()
}
func (*GetPluginInfoResponse) ProtoMessage() {}
func (m *GetPluginInfoResponse) GetName() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetName()
}
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetType()
}
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*control_plane_proto1.GetPluginInfoResponse)(m).GetCompany()
}

// * Describes the conditions under which a registration entry is matched.
type Selector struct {
	Type  string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (m *Selector) Reset()                    { *m = Selector{} }
func (m *Selector) String() string            { return proto.CompactTextString(m) }
func (*Selector) ProtoMessage()               {}
func (*Selector) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Selector) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Selector) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// * Represents a single Registration Entry.
type RegisteredEntry struct {
	SelectorList                []*Selector `protobuf:"bytes,1,rep,name=selectorList" json:"selectorList,omitempty"`
	SpiffeId                    string      `protobuf:"bytes,2,opt,name=spiffeId" json:"spiffeId,omitempty"`
	ParentId                    string      `protobuf:"bytes,3,opt,name=parentId" json:"parentId,omitempty"`
	Ttl                         int32       `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
	FederatedBundleSpiffeIdList []string    `protobuf:"bytes,5,rep,name=federatedBundleSpiffeIdList" json:"federatedBundleSpiffeIdList,omitempty"`
}

func (m *RegisteredEntry) Reset()                    { *m = RegisteredEntry{} }
func (m *RegisteredEntry) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntry) ProtoMessage()               {}
func (*RegisteredEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegisteredEntry) GetSelectorList() []*Selector {
	if m != nil {
		return m.SelectorList
	}
	return nil
}

func (m *RegisteredEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegisteredEntry) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *RegisteredEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegisteredEntry) GetFederatedBundleSpiffeIdList() []string {
	if m != nil {
		return m.FederatedBundleSpiffeIdList
	}
	return nil
}

// * Represents the trust chain for a different trust domain, along with
// a TTL describing its expiration, keyed by the SPIFFE ID of the foreign
// trust domain.
type FederatedBundle struct {
	FederatedBundleSpiffeId string `protobuf:"bytes,1,opt,name=federatedBundleSpiffeId" json:"federatedBundleSpiffeId,omitempty"`
	FederatedTrustBundle    []byte `protobuf:"bytes,2,opt,name=federatedTrustBundle,proto3" json:"federatedTrustBundle,omitempty"`
	Ttl                     int32  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *FederatedBundle) Reset()                    { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string            { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()               {}
func (*FederatedBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FederatedBundle) GetFederatedBundleSpiffeId() string {
	if m != nil {
		return m.FederatedBundleSpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetFederatedTrustBundle() []byte {
	if m != nil {
		return m.FederatedTrustBundle
	}
	return nil
}

func (m *FederatedBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// * Represents a single entry in NodeResolverMap and maps node properties to
// logical attributes (i.e. an AWS instance to its ASG).
type NodeResolverMapEntry struct {
	BaseSpiffeId string    `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	Selector     *Selector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *NodeResolverMapEntry) Reset()                    { *m = NodeResolverMapEntry{} }
func (m *NodeResolverMapEntry) String() string            { return proto.CompactTextString(m) }
func (*NodeResolverMapEntry) ProtoMessage()               {}
func (*NodeResolverMapEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NodeResolverMapEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *NodeResolverMapEntry) GetSelector() *Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// * Represents a single entry in AttestedNodes and stores the node's SPIFFE ID, the
// type of attestation it performed, as well as the serial number and expiration date
// of its node SVID.
type AttestedNodeEntry struct {
	BaseSpiffeId       string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	AttestedDataType   string `protobuf:"bytes,2,opt,name=attestedDataType" json:"attestedDataType,omitempty"`
	CertSerialNumber   string `protobuf:"bytes,3,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	CertExpirationDate string `protobuf:"bytes,4,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
}

func (m *AttestedNodeEntry) Reset()                    { *m = AttestedNodeEntry{} }
func (m *AttestedNodeEntry) String() string            { return proto.CompactTextString(m) }
func (*AttestedNodeEntry) ProtoMessage()               {}
func (*AttestedNodeEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AttestedNodeEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *AttestedNodeEntry) GetAttestedDataType() string {
	if m != nil {
		return m.AttestedDataType
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// * Represents a Federated bundle
type CreateFederatedEntryRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *CreateFederatedEntryRequest) Reset()                    { *m = CreateFederatedEntryRequest{} }
func (m *CreateFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedEntryRequest) ProtoMessage()               {}
func (*CreateFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateFederatedEntryRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Empty
type CreateFederatedEntryResponse struct {
}

func (m *CreateFederatedEntryResponse) Reset()                    { *m = CreateFederatedEntryResponse{} }
func (m *CreateFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedEntryResponse) ProtoMessage()               {}
func (*CreateFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// * Empty
type ListFederatedEntryRequest struct {
}

func (m *ListFederatedEntryRequest) Reset()                    { *m = ListFederatedEntryRequest{} }
func (m *ListFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedEntryRequest) ProtoMessage()               {}
func (*ListFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

// * Represents a list of SPIFFE IDs of foreign trust domains
type ListFederatedEntryResponse struct {
	FederatedBundleSpiffeIdList []string `protobuf:"bytes,1,rep,name=federatedBundleSpiffeIdList" json:"federatedBundleSpiffeIdList,omitempty"`
}

func (m *ListFederatedEntryResponse) Reset()                    { *m = ListFederatedEntryResponse{} }
func (m *ListFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedEntryResponse) ProtoMessage()               {}
func (*ListFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListFederatedEntryResponse) GetFederatedBundleSpiffeIdList() []string {
	if m != nil {
		return m.FederatedBundleSpiffeIdList
	}
	return nil
}

// * Represents a federated bundle to update
type UpdateFederatedEntryRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedEntryRequest) Reset()                    { *m = UpdateFederatedEntryRequest{} }
func (m *UpdateFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedEntryRequest) ProtoMessage()               {}
func (*UpdateFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateFederatedEntryRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents the updated federated bundle
type UpdateFederatedEntryResponse struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedEntryResponse) Reset()                    { *m = UpdateFederatedEntryResponse{} }
func (m *UpdateFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedEntryResponse) ProtoMessage()               {}
func (*UpdateFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateFederatedEntryResponse) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents the Spiffe ID of the federated bundle to delete
type DeleteFederatedEntryRequest struct {
	FederatedBundleSpiffeId string `protobuf:"bytes,1,opt,name=federatedBundleSpiffeId" json:"federatedBundleSpiffeId,omitempty"`
}

func (m *DeleteFederatedEntryRequest) Reset()                    { *m = DeleteFederatedEntryRequest{} }
func (m *DeleteFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedEntryRequest) ProtoMessage()               {}
func (*DeleteFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteFederatedEntryRequest) GetFederatedBundleSpiffeId() string {
	if m != nil {
		return m.FederatedBundleSpiffeId
	}
	return ""
}

// * Represents the deleted federated bundle
type DeleteFederatedEntryResponse struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *DeleteFederatedEntryResponse) Reset()                    { *m = DeleteFederatedEntryResponse{} }
func (m *DeleteFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedEntryResponse) ProtoMessage()               {}
func (*DeleteFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteFederatedEntryResponse) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents an Attested Node entry to create
type CreateAttestedNodeEntryRequest struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *CreateAttestedNodeEntryRequest) Reset()                    { *m = CreateAttestedNodeEntryRequest{} }
func (m *CreateAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryRequest) ProtoMessage()               {}
func (*CreateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CreateAttestedNodeEntryRequest) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the created Attested Node entry
type CreateAttestedNodeEntryResponse struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *CreateAttestedNodeEntryResponse) Reset()         { *m = CreateAttestedNodeEntryResponse{} }
func (m *CreateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*CreateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14}
}

func (m *CreateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the Spiffe ID of the node entry to retrieve
type FetchAttestedNodeEntryRequest struct {
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *FetchAttestedNodeEntryRequest) Reset()                    { *m = FetchAttestedNodeEntryRequest{} }
func (m *FetchAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryRequest) ProtoMessage()               {}
func (*FetchAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FetchAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents an Attested Node entry
type FetchAttestedNodeEntryResponse struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *FetchAttestedNodeEntryResponse) Reset()                    { *m = FetchAttestedNodeEntryResponse{} }
func (m *FetchAttestedNodeEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryResponse) ProtoMessage()               {}
func (*FetchAttestedNodeEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FetchAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Empty
type FetchStaleNodeEntriesRequest struct {
}

func (m *FetchStaleNodeEntriesRequest) Reset()                    { *m = FetchStaleNodeEntriesRequest{} }
func (m *FetchStaleNodeEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesRequest) ProtoMessage()               {}
func (*FetchStaleNodeEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// * Represents dead nodes for which the base SVID has expired
type FetchStaleNodeEntriesResponse struct {
	AttestedNodeEntryList []*AttestedNodeEntry `protobuf:"bytes,1,rep,name=attestedNodeEntryList" json:"attestedNodeEntryList,omitempty"`
}

func (m *FetchStaleNodeEntriesResponse) Reset()                    { *m = FetchStaleNodeEntriesResponse{} }
func (m *FetchStaleNodeEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesResponse) ProtoMessage()               {}
func (*FetchStaleNodeEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *FetchStaleNodeEntriesResponse) GetAttestedNodeEntryList() []*AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntryList
	}
	return nil
}

// * Represents Attested node entry fields to update
type UpdateAttestedNodeEntryRequest struct {
	BaseSpiffeId       string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	CertSerialNumber   string `protobuf:"bytes,2,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	CertExpirationDate string `protobuf:"bytes,3,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
}

func (m *UpdateAttestedNodeEntryRequest) Reset()                    { *m = UpdateAttestedNodeEntryRequest{} }
func (m *UpdateAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryRequest) ProtoMessage()               {}
func (*UpdateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *UpdateAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// * Represents the updated Attested node entry
type UpdateAttestedNodeEntryResponse struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *UpdateAttestedNodeEntryResponse) Reset()         { *m = UpdateAttestedNodeEntryResponse{} }
func (m *UpdateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*UpdateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *UpdateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the Spiffe ID of the Attested node entry to delete
type DeleteAttestedNodeEntryRequest struct {
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *DeleteAttestedNodeEntryRequest) Reset()                    { *m = DeleteAttestedNodeEntryRequest{} }
func (m *DeleteAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryRequest) ProtoMessage()               {}
func (*DeleteAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeleteAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents the deleted Attested node entry
type DeleteAttestedNodeEntryResponse struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *DeleteAttestedNodeEntryResponse) Reset()         { *m = DeleteAttestedNodeEntryResponse{} }
func (m *DeleteAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryResponse) ProtoMessage()    {}
func (*DeleteAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *DeleteAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents a Node resolver map entry to create
type CreateNodeResolverMapEntryRequest struct {
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *CreateNodeResolverMapEntryRequest) Reset()         { *m = CreateNodeResolverMapEntryRequest{} }
func (m *CreateNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *CreateNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents the created Node resolver map entry
type CreateNodeResolverMapEntryResponse struct {
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *CreateNodeResolverMapEntryResponse) Reset()         { *m = CreateNodeResolverMapEntryResponse{} }
func (m *CreateNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *CreateNodeResolverMapEntryResponse) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents a Spiffe ID
type FetchNodeResolverMapEntryRequest struct {
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *FetchNodeResolverMapEntryRequest) Reset()         { *m = FetchNodeResolverMapEntryRequest{} }
func (m *FetchNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *FetchNodeResolverMapEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents a list of Node resolver map entries for the specified Spiffe ID
type FetchNodeResolverMapEntryResponse struct {
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *FetchNodeResolverMapEntryResponse) Reset()         { *m = FetchNodeResolverMapEntryResponse{} }
func (m *FetchNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *FetchNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a Node resolver map entry to delete
type DeleteNodeResolverMapEntryRequest struct {
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *DeleteNodeResolverMapEntryRequest) Reset()         { *m = DeleteNodeResolverMapEntryRequest{} }
func (m *DeleteNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *DeleteNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents a list of Node resolver map entries
type DeleteNodeResolverMapEntryResponse struct {
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *DeleteNodeResolverMapEntryResponse) Reset()         { *m = DeleteNodeResolverMapEntryResponse{} }
func (m *DeleteNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *DeleteNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesRequest struct {
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *RectifyNodeResolverMapEntriesRequest) Reset()         { *m = RectifyNodeResolverMapEntriesRequest{} }
func (m *RectifyNodeResolverMapEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesRequest) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{29}
}

func (m *RectifyNodeResolverMapEntriesRequest) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesResponse struct {
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *RectifyNodeResolverMapEntriesResponse) Reset()         { *m = RectifyNodeResolverMapEntriesResponse{} }
func (m *RectifyNodeResolverMapEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesResponse) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *RectifyNodeResolverMapEntriesResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a Registration entry to create
type CreateRegistrationEntryRequest struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *CreateRegistrationEntryRequest) Reset()                    { *m = CreateRegistrationEntryRequest{} }
func (m *CreateRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryRequest) ProtoMessage()               {}
func (*CreateRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CreateRegistrationEntryRequest) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents the created Registration entry
type CreateRegistrationEntryResponse struct {
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *CreateRegistrationEntryResponse) Reset()         { *m = CreateRegistrationEntryResponse{} }
func (m *CreateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryResponse) ProtoMessage()    {}
func (*CreateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{32}
}

func (m *CreateRegistrationEntryResponse) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents a Registration entry ID to fetch
type FetchRegistrationEntryRequest struct {
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *FetchRegistrationEntryRequest) Reset()                    { *m = FetchRegistrationEntryRequest{} }
func (m *FetchRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryRequest) ProtoMessage()               {}
func (*FetchRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *FetchRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents a Registration entry
type FetchRegistrationEntryResponse struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *FetchRegistrationEntryResponse) Reset()                    { *m = FetchRegistrationEntryResponse{} }
func (m *FetchRegistrationEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryResponse) ProtoMessage()               {}
func (*FetchRegistrationEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{34} }

func (m *FetchRegistrationEntryResponse) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Registration entry to update
type UpdateRegistrationEntryRequest struct {
	RegisteredEntryId string           `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	RegisteredEntry   *RegisteredEntry `protobuf:"bytes,2,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *UpdateRegistrationEntryRequest) Reset()                    { *m = UpdateRegistrationEntryRequest{} }
func (m *UpdateRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryRequest) ProtoMessage()               {}
func (*UpdateRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents the updated Registration entry
type UpdateRegistrationEntryResponse struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *UpdateRegistrationEntryResponse) Reset()         { *m = UpdateRegistrationEntryResponse{} }
func (m *UpdateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryResponse) ProtoMessage()    {}
func (*UpdateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *UpdateRegistrationEntryResponse) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Registration entry ID to delete
type DeleteRegistrationEntryRequest struct {
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *DeleteRegistrationEntryRequest) Reset()                    { *m = DeleteRegistrationEntryRequest{} }
func (m *DeleteRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryRequest) ProtoMessage()               {}
func (*DeleteRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *DeleteRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents the deleted Registration entry
type DeleteRegistrationEntryResponse struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *DeleteRegistrationEntryResponse) Reset()         { *m = DeleteRegistrationEntryResponse{} }
func (m *DeleteRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryResponse) ProtoMessage()    {}
func (*DeleteRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{38}
}

func (m *DeleteRegistrationEntryResponse) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Parent ID
type ListParentIDEntriesRequest struct {
	ParentId string `protobuf:"bytes,1,opt,name=parentId" json:"parentId,omitempty"`
}

func (m *ListParentIDEntriesRequest) Reset()                    { *m = ListParentIDEntriesRequest{} }
func (m *ListParentIDEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListParentIDEntriesRequest) ProtoMessage()               {}
func (*ListParentIDEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ListParentIDEntriesRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

// * Represents a list of Registered entries with the specified Parent ID
type ListParentIDEntriesResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListParentIDEntriesResponse) Reset()                    { *m = ListParentIDEntriesResponse{} }
func (m *ListParentIDEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListParentIDEntriesResponse) ProtoMessage()               {}
func (*ListParentIDEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ListParentIDEntriesResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a selector
type ListSelectorEntriesRequest struct {
	Selector *Selector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
}

func (m *ListSelectorEntriesRequest) Reset()                    { *m = ListSelectorEntriesRequest{} }
func (m *ListSelectorEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSelectorEntriesRequest) ProtoMessage()               {}
func (*ListSelectorEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ListSelectorEntriesRequest) GetSelector() *Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// * Represents a list of Registered entries with the specified selector
type ListSelectorEntriesResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListSelectorEntriesResponse) Reset()                    { *m = ListSelectorEntriesResponse{} }
func (m *ListSelectorEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSelectorEntriesResponse) ProtoMessage()               {}
func (*ListSelectorEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ListSelectorEntriesResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a Spiffe ID
type ListSpiffeEntriesRequest struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *ListSpiffeEntriesRequest) Reset()                    { *m = ListSpiffeEntriesRequest{} }
func (m *ListSpiffeEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesRequest) ProtoMessage()               {}
func (*ListSpiffeEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{43} }

func (m *ListSpiffeEntriesRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

// * Represents a list of Registered entries with the specified Spiffe ID
type ListSpiffeEntriesResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListSpiffeEntriesResponse) Reset()                    { *m = ListSpiffeEntriesResponse{} }
func (m *ListSpiffeEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesResponse) ProtoMessage()               {}
func (*ListSpiffeEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{44} }

func (m *ListSpiffeEntriesResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

func init() {
	proto.RegisterType((*Selector)(nil), "control_plane_proto.Selector")
	proto.RegisterType((*RegisteredEntry)(nil), "control_plane_proto.RegisteredEntry")
	proto.RegisterType((*FederatedBundle)(nil), "control_plane_proto.FederatedBundle")
	proto.RegisterType((*NodeResolverMapEntry)(nil), "control_plane_proto.NodeResolverMapEntry")
	proto.RegisterType((*AttestedNodeEntry)(nil), "control_plane_proto.AttestedNodeEntry")
	proto.RegisterType((*CreateFederatedEntryRequest)(nil), "control_plane_proto.CreateFederatedEntryRequest")
	proto.RegisterType((*CreateFederatedEntryResponse)(nil), "control_plane_proto.CreateFederatedEntryResponse")
	proto.RegisterType((*ListFederatedEntryRequest)(nil), "control_plane_proto.ListFederatedEntryRequest")
	proto.RegisterType((*ListFederatedEntryResponse)(nil), "control_plane_proto.ListFederatedEntryResponse")
	proto.RegisterType((*UpdateFederatedEntryRequest)(nil), "control_plane_proto.UpdateFederatedEntryRequest")
	proto.RegisterType((*UpdateFederatedEntryResponse)(nil), "control_plane_proto.UpdateFederatedEntryResponse")
	proto.RegisterType((*DeleteFederatedEntryRequest)(nil), "control_plane_proto.DeleteFederatedEntryRequest")
	proto.RegisterType((*DeleteFederatedEntryResponse)(nil), "control_plane_proto.DeleteFederatedEntryResponse")
	proto.RegisterType((*CreateAttestedNodeEntryRequest)(nil), "control_plane_proto.CreateAttestedNodeEntryRequest")
	proto.RegisterType((*CreateAttestedNodeEntryResponse)(nil), "control_plane_proto.CreateAttestedNodeEntryResponse")
	proto.RegisterType((*FetchAttestedNodeEntryRequest)(nil), "control_plane_proto.FetchAttestedNodeEntryRequest")
	proto.RegisterType((*FetchAttestedNodeEntryResponse)(nil), "control_plane_proto.FetchAttestedNodeEntryResponse")
	proto.RegisterType((*FetchStaleNodeEntriesRequest)(nil), "control_plane_proto.FetchStaleNodeEntriesRequest")
	proto.RegisterType((*FetchStaleNodeEntriesResponse)(nil), "control_plane_proto.FetchStaleNodeEntriesResponse")
	proto.RegisterType((*UpdateAttestedNodeEntryRequest)(nil), "control_plane_proto.UpdateAttestedNodeEntryRequest")
	proto.RegisterType((*UpdateAttestedNodeEntryResponse)(nil), "control_plane_proto.UpdateAttestedNodeEntryResponse")
	proto.RegisterType((*DeleteAttestedNodeEntryRequest)(nil), "control_plane_proto.DeleteAttestedNodeEntryRequest")
	proto.RegisterType((*DeleteAttestedNodeEntryResponse)(nil), "control_plane_proto.DeleteAttestedNodeEntryResponse")
	proto.RegisterType((*CreateNodeResolverMapEntryRequest)(nil), "control_plane_proto.CreateNodeResolverMapEntryRequest")
	proto.RegisterType((*CreateNodeResolverMapEntryResponse)(nil), "control_plane_proto.CreateNodeResolverMapEntryResponse")
	proto.RegisterType((*FetchNodeResolverMapEntryRequest)(nil), "control_plane_proto.FetchNodeResolverMapEntryRequest")
	proto.RegisterType((*FetchNodeResolverMapEntryResponse)(nil), "control_plane_proto.FetchNodeResolverMapEntryResponse")
	proto.RegisterType((*DeleteNodeResolverMapEntryRequest)(nil), "control_plane_proto.DeleteNodeResolverMapEntryRequest")
	proto.RegisterType((*DeleteNodeResolverMapEntryResponse)(nil), "control_plane_proto.DeleteNodeResolverMapEntryResponse")
	proto.RegisterType((*RectifyNodeResolverMapEntriesRequest)(nil), "control_plane_proto.RectifyNodeResolverMapEntriesRequest")
	proto.RegisterType((*RectifyNodeResolverMapEntriesResponse)(nil), "control_plane_proto.RectifyNodeResolverMapEntriesResponse")
	proto.RegisterType((*CreateRegistrationEntryRequest)(nil), "control_plane_proto.CreateRegistrationEntryRequest")
	proto.RegisterType((*CreateRegistrationEntryResponse)(nil), "control_plane_proto.CreateRegistrationEntryResponse")
	proto.RegisterType((*FetchRegistrationEntryRequest)(nil), "control_plane_proto.FetchRegistrationEntryRequest")
	proto.RegisterType((*FetchRegistrationEntryResponse)(nil), "control_plane_proto.FetchRegistrationEntryResponse")
	proto.RegisterType((*UpdateRegistrationEntryRequest)(nil), "control_plane_proto.UpdateRegistrationEntryRequest")
	proto.RegisterType((*UpdateRegistrationEntryResponse)(nil), "control_plane_proto.UpdateRegistrationEntryResponse")
	proto.RegisterType((*DeleteRegistrationEntryRequest)(nil), "control_plane_proto.DeleteRegistrationEntryRequest")
	proto.RegisterType((*DeleteRegistrationEntryResponse)(nil), "control_plane_proto.DeleteRegistrationEntryResponse")
	proto.RegisterType((*ListParentIDEntriesRequest)(nil), "control_plane_proto.ListParentIDEntriesRequest")
	proto.RegisterType((*ListParentIDEntriesResponse)(nil), "control_plane_proto.ListParentIDEntriesResponse")
	proto.RegisterType((*ListSelectorEntriesRequest)(nil), "control_plane_proto.ListSelectorEntriesRequest")
	proto.RegisterType((*ListSelectorEntriesResponse)(nil), "control_plane_proto.ListSelectorEntriesResponse")
	proto.RegisterType((*ListSpiffeEntriesRequest)(nil), "control_plane_proto.ListSpiffeEntriesRequest")
	proto.RegisterType((*ListSpiffeEntriesResponse)(nil), "control_plane_proto.ListSpiffeEntriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataStore service

type DataStoreClient interface {
	// / Creates a Federated Bundle
	CreateFederatedEntry(ctx context.Context, in *CreateFederatedEntryRequest, opts ...grpc.CallOption) (*CreateFederatedEntryResponse, error)
	// / List all Federated SPIFFE IDs
	ListFederatedEntry(ctx context.Context, in *ListFederatedEntryRequest, opts ...grpc.CallOption) (*ListFederatedEntryResponse, error)
	// / Updates the specified Federated Bundle
	UpdateFederatedEntry(ctx context.Context, in *UpdateFederatedEntryRequest, opts ...grpc.CallOption) (*UpdateFederatedEntryResponse, error)
	// / Deletes the specified Federated Bundle
	DeleteFederatedEntry(ctx context.Context, in *DeleteFederatedEntryRequest, opts ...grpc.CallOption) (*DeleteFederatedEntryResponse, error)
	// / Creates an Attested Node Entry
	CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error)
	// / Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error)
	// / Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error)
	// / Updates the Attested Node Entry
	UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error)
	// / Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error)
	// / Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error)
	// / Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error)
	// / Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error)
	// / Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error)
	// / Creates a Registered Entry
	CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error)
	// / Retrieve a specific registered entry
	FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error)
	// / Updates a specific registered entry
	UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error)
	// / Deletes a specific registered entry
	DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error)
	// / Retrieves all the  registered entry with the same ParentID
	ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error)
	// / Retrieves all the  registered entry with the same Selector
	ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error)
	// / Retrieves all the  registered entry with the same SpiffeId
	ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error)
	// / Applies the plugin configuration
	Configure(ctx context.Context, in *control_plane_proto1.ConfigureRequest, opts ...grpc.CallOption) (*control_plane_proto1.ConfigureResponse, error)
	// / Returns the version and related metadata of the installed plugin
	GetPluginInfo(ctx context.Context, in *control_plane_proto1.GetPluginInfoRequest, opts ...grpc.CallOption) (*control_plane_proto1.GetPluginInfoResponse, error)
}

type dataStoreClient struct {
	cc *grpc.ClientConn
}

func NewDataStoreClient(cc *grpc.ClientConn) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) CreateFederatedEntry(ctx context.Context, in *CreateFederatedEntryRequest, opts ...grpc.CallOption) (*CreateFederatedEntryResponse, error) {
	out := new(CreateFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/CreateFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListFederatedEntry(ctx context.Context, in *ListFederatedEntryRequest, opts ...grpc.CallOption) (*ListFederatedEntryResponse, error) {
	out := new(ListFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/ListFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateFederatedEntry(ctx context.Context, in *UpdateFederatedEntryRequest, opts ...grpc.CallOption) (*UpdateFederatedEntryResponse, error) {
	out := new(UpdateFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/UpdateFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteFederatedEntry(ctx context.Context, in *DeleteFederatedEntryRequest, opts ...grpc.CallOption) (*DeleteFederatedEntryResponse, error) {
	out := new(DeleteFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/DeleteFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error) {
	out := new(CreateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/CreateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error) {
	out := new(FetchAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/FetchAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error) {
	out := new(FetchStaleNodeEntriesResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/FetchStaleNodeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error) {
	out := new(UpdateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/UpdateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error) {
	out := new(DeleteAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/DeleteAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error) {
	out := new(CreateNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/CreateNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error) {
	out := new(FetchNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/FetchNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error) {
	out := new(DeleteNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/DeleteNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error) {
	out := new(RectifyNodeResolverMapEntriesResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/RectifyNodeResolverMapEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error) {
	out := new(CreateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/CreateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error) {
	out := new(FetchRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/FetchRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error) {
	out := new(UpdateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/UpdateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error) {
	out := new(DeleteRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/DeleteRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error) {
	out := new(ListParentIDEntriesResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/ListParentIDEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error) {
	out := new(ListSelectorEntriesResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/ListSelectorEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error) {
	out := new(ListSpiffeEntriesResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/ListSpiffeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) Configure(ctx context.Context, in *control_plane_proto1.ConfigureRequest, opts ...grpc.CallOption) (*control_plane_proto1.ConfigureResponse, error) {
	out := new(control_plane_proto1.ConfigureResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) GetPluginInfo(ctx context.Context, in *control_plane_proto1.GetPluginInfoRequest, opts ...grpc.CallOption) (*control_plane_proto1.GetPluginInfoResponse, error) {
	out := new(control_plane_proto1.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/control_plane_proto.DataStore/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataStore service

type DataStoreServer interface {
	// / Creates a Federated Bundle
	CreateFederatedEntry(context.Context, *CreateFederatedEntryRequest) (*CreateFederatedEntryResponse, error)
	// / List all Federated SPIFFE IDs
	ListFederatedEntry(context.Context, *ListFederatedEntryRequest) (*ListFederatedEntryResponse, error)
	// / Updates the specified Federated Bundle
	UpdateFederatedEntry(context.Context, *UpdateFederatedEntryRequest) (*UpdateFederatedEntryResponse, error)
	// / Deletes the specified Federated Bundle
	DeleteFederatedEntry(context.Context, *DeleteFederatedEntryRequest) (*DeleteFederatedEntryResponse, error)
	// / Creates an Attested Node Entry
	CreateAttestedNodeEntry(context.Context, *CreateAttestedNodeEntryRequest) (*CreateAttestedNodeEntryResponse, error)
	// / Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(context.Context, *FetchAttestedNodeEntryRequest) (*FetchAttestedNodeEntryResponse, error)
	// / Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(context.Context, *FetchStaleNodeEntriesRequest) (*FetchStaleNodeEntriesResponse, error)
	// / Updates the Attested Node Entry
	UpdateAttestedNodeEntry(context.Context, *UpdateAttestedNodeEntryRequest) (*UpdateAttestedNodeEntryResponse, error)
	// / Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(context.Context, *DeleteAttestedNodeEntryRequest) (*DeleteAttestedNodeEntryResponse, error)
	// / Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(context.Context, *CreateNodeResolverMapEntryRequest) (*CreateNodeResolverMapEntryResponse, error)
	// / Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(context.Context, *FetchNodeResolverMapEntryRequest) (*FetchNodeResolverMapEntryResponse, error)
	// / Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(context.Context, *DeleteNodeResolverMapEntryRequest) (*DeleteNodeResolverMapEntryResponse, error)
	// / Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(context.Context, *RectifyNodeResolverMapEntriesRequest) (*RectifyNodeResolverMapEntriesResponse, error)
	// / Creates a Registered Entry
	CreateRegistrationEntry(context.Context, *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error)
	// / Retrieve a specific registered entry
	FetchRegistrationEntry(context.Context, *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error)
	// / Updates a specific registered entry
	UpdateRegistrationEntry(context.Context, *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error)
	// / Deletes a specific registered entry
	DeleteRegistrationEntry(context.Context, *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error)
	// / Retrieves all the  registered entry with the same ParentID
	ListParentIDEntries(context.Context, *ListParentIDEntriesRequest) (*ListParentIDEntriesResponse, error)
	// / Retrieves all the  registered entry with the same Selector
	ListSelectorEntries(context.Context, *ListSelectorEntriesRequest) (*ListSelectorEntriesResponse, error)
	// / Retrieves all the  registered entry with the same SpiffeId
	ListSpiffeEntries(context.Context, *ListSpiffeEntriesRequest) (*ListSpiffeEntriesResponse, error)
	// / Applies the plugin configuration
	Configure(context.Context, *control_plane_proto1.ConfigureRequest) (*control_plane_proto1.ConfigureResponse, error)
	// / Returns the version and related metadata of the installed plugin
	GetPluginInfo(context.Context, *control_plane_proto1.GetPluginInfoRequest) (*control_plane_proto1.GetPluginInfoResponse, error)
}

func RegisterDataStoreServer(s *grpc.Server, srv DataStoreServer) {
	s.RegisterService(&_DataStore_serviceDesc, srv)
}

func _DataStore_CreateFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/CreateFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateFederatedEntry(ctx, req.(*CreateFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/ListFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListFederatedEntry(ctx, req.(*ListFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/UpdateFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateFederatedEntry(ctx, req.(*UpdateFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/DeleteFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteFederatedEntry(ctx, req.(*DeleteFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/CreateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, req.(*CreateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/FetchAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, req.(*FetchAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchStaleNodeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchStaleNodeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/FetchStaleNodeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, req.(*FetchStaleNodeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/UpdateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, req.(*UpdateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/DeleteAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, req.(*DeleteAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/CreateNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, req.(*CreateNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/FetchNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, req.(*FetchNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/DeleteNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, req.(*DeleteNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_RectifyNodeResolverMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectifyNodeResolverMapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/RectifyNodeResolverMapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, req.(*RectifyNodeResolverMapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/CreateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, req.(*CreateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/FetchRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, req.(*FetchRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/UpdateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, req.(*UpdateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/DeleteRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, req.(*DeleteRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListParentIDEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParentIDEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/ListParentIDEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, req.(*ListParentIDEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSelectorEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectorEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/ListSelectorEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, req.(*ListSelectorEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSpiffeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpiffeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/ListSpiffeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, req.(*ListSpiffeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(control_plane_proto1.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).Configure(ctx, req.(*control_plane_proto1.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(control_plane_proto1.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/control_plane_proto.DataStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetPluginInfo(ctx, req.(*control_plane_proto1.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "control_plane_proto.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFederatedEntry",
			Handler:    _DataStore_CreateFederatedEntry_Handler,
		},
		{
			MethodName: "ListFederatedEntry",
			Handler:    _DataStore_ListFederatedEntry_Handler,
		},
		{
			MethodName: "UpdateFederatedEntry",
			Handler:    _DataStore_UpdateFederatedEntry_Handler,
		},
		{
			MethodName: "DeleteFederatedEntry",
			Handler:    _DataStore_DeleteFederatedEntry_Handler,
		},
		{
			MethodName: "CreateAttestedNodeEntry",
			Handler:    _DataStore_CreateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchAttestedNodeEntry",
			Handler:    _DataStore_FetchAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchStaleNodeEntries",
			Handler:    _DataStore_FetchStaleNodeEntries_Handler,
		},
		{
			MethodName: "UpdateAttestedNodeEntry",
			Handler:    _DataStore_UpdateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "DeleteAttestedNodeEntry",
			Handler:    _DataStore_DeleteAttestedNodeEntry_Handler,
		},
		{
			MethodName: "CreateNodeResolverMapEntry",
			Handler:    _DataStore_CreateNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "FetchNodeResolverMapEntry",
			Handler:    _DataStore_FetchNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "DeleteNodeResolverMapEntry",
			Handler:    _DataStore_DeleteNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "RectifyNodeResolverMapEntries",
			Handler:    _DataStore_RectifyNodeResolverMapEntries_Handler,
		},
		{
			MethodName: "CreateRegistrationEntry",
			Handler:    _DataStore_CreateRegistrationEntry_Handler,
		},
		{
			MethodName: "FetchRegistrationEntry",
			Handler:    _DataStore_FetchRegistrationEntry_Handler,
		},
		{
			MethodName: "UpdateRegistrationEntry",
			Handler:    _DataStore_UpdateRegistrationEntry_Handler,
		},
		{
			MethodName: "DeleteRegistrationEntry",
			Handler:    _DataStore_DeleteRegistrationEntry_Handler,
		},
		{
			MethodName: "ListParentIDEntries",
			Handler:    _DataStore_ListParentIDEntries_Handler,
		},
		{
			MethodName: "ListSelectorEntries",
			Handler:    _DataStore_ListSelectorEntries_Handler,
		},
		{
			MethodName: "ListSpiffeEntries",
			Handler:    _DataStore_ListSpiffeEntries_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _DataStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _DataStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "data_store.proto",
}

func init() { proto.RegisterFile("data_store.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1328 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x67, 0xeb, 0x06, 0x25, 0xd3, 0xa0, 0x24, 0x1b, 0xb7, 0x75, 0xcf, 0xf9, 0xd7, 0x53, 0x5b,
	0x85, 0x0a, 0xec, 0xd6, 0x29, 0xa1, 0xe5, 0x89, 0x12, 0x27, 0x28, 0x12, 0x0d, 0xd1, 0x25, 0x50,
	0x09, 0x01, 0xd1, 0xc5, 0x5e, 0xa7, 0x27, 0xd9, 0x77, 0x97, 0xbb, 0xbd, 0xa4, 0x51, 0x04, 0x12,
	0x7f, 0x9e, 0x8a, 0x8a, 0xc4, 0x0b, 0x6f, 0x20, 0xbe, 0x09, 0x5f, 0x85, 0x8f, 0x82, 0x7c, 0xb7,
	0x67, 0xec, 0xbb, 0x9d, 0xf5, 0x5d, 0x13, 0x9b, 0x37, 0xdf, 0xce, 0xce, 0xcc, 0x6f, 0x66, 0x76,
	0x67, 0x67, 0xc6, 0x30, 0xdb, 0x34, 0xb9, 0x79, 0xe0, 0x73, 0xc7, 0x63, 0x15, 0xd7, 0x73, 0xb8,
	0x43, 0xe7, 0x1b, 0x8e, 0xcd, 0x3d, 0xa7, 0x7d, 0xe0, 0xb6, 0x4d, 0x9b, 0x1d, 0x84, 0x8b, 0xda,
	0xe6, 0x91, 0xc5, 0x5f, 0x04, 0x87, 0x95, 0x86, 0xd3, 0xa9, 0xfa, 0xae, 0xd5, 0x6a, 0xb1, 0xaa,
	0xef, 0x59, 0xd5, 0x81, 0xad, 0x55, 0xb7, 0x1d, 0x1c, 0x59, 0xb6, 0x5f, 0x6d, 0x38, 0x9d, 0x8e,
	0x63, 0x57, 0x43, 0x4e, 0xf1, 0x11, 0xc9, 0xd6, 0x1f, 0xc1, 0xe4, 0x1e, 0x6b, 0xb3, 0x06, 0x77,
	0x3c, 0x4a, 0xe1, 0x2a, 0x3f, 0x73, 0x59, 0x89, 0xac, 0x90, 0xd5, 0x29, 0x23, 0xfc, 0x4d, 0x8b,
	0x30, 0x71, 0x62, 0xb6, 0x03, 0x56, 0xba, 0x12, 0x2e, 0x46, 0x1f, 0xfa, 0x3f, 0x04, 0x66, 0x0c,
	0x76, 0x64, 0xf9, 0x9c, 0x79, 0xac, 0xb9, 0x69, 0x73, 0xef, 0x8c, 0x3e, 0x85, 0x69, 0x5f, 0x48,
	0xfa, 0xcc, 0xf2, 0x79, 0x89, 0xac, 0x14, 0x56, 0xaf, 0xd5, 0x16, 0x2b, 0x12, 0xf0, 0x95, 0x58,
	0xa5, 0x31, 0xc0, 0x42, 0x35, 0x98, 0x8c, 0x4c, 0xd9, 0x6e, 0x0a, 0x7d, 0xbd, 0xef, 0x2e, 0xcd,
	0x35, 0x3d, 0x66, 0xf3, 0xed, 0x66, 0xa9, 0x10, 0xd1, 0xe2, 0x6f, 0x3a, 0x0b, 0x05, 0xce, 0xdb,
	0xa5, 0xab, 0x2b, 0x64, 0x75, 0xc2, 0xe8, 0xfe, 0xa4, 0x1f, 0x43, 0xb9, 0xc5, 0x9a, 0xcc, 0x33,
	0x39, 0x6b, 0x7e, 0x12, 0xd8, 0xcd, 0x36, 0xdb, 0x13, 0x82, 0x42, 0x6c, 0x13, 0x2b, 0x85, 0xd5,
	0x29, 0x43, 0xb5, 0x45, 0xff, 0x8d, 0xc0, 0xcc, 0xd6, 0x20, 0x9d, 0x3e, 0x86, 0x9b, 0x08, 0x8b,
	0xf0, 0x19, 0x46, 0xa6, 0x35, 0x28, 0xf6, 0x48, 0xfb, 0x5e, 0xe0, 0xf3, 0x88, 0x1e, 0x5a, 0x39,
	0x6d, 0x48, 0x69, 0xb1, 0x55, 0x85, 0x9e, 0x55, 0x7a, 0x00, 0xc5, 0x1d, 0xa7, 0xc9, 0x0c, 0xe6,
	0x3b, 0xed, 0x13, 0xe6, 0x3d, 0x33, 0xdd, 0xc8, 0xf5, 0x3a, 0x4c, 0x1f, 0x9a, 0x7e, 0x12, 0xcc,
	0xc0, 0x1a, 0x7d, 0x02, 0x93, 0xb1, 0xaf, 0x43, 0xad, 0x43, 0x43, 0xd3, 0xdb, 0xae, 0xff, 0x4d,
	0x60, 0xee, 0x29, 0xe7, 0xcc, 0xe7, 0xac, 0xd9, 0xd5, 0x9f, 0x5d, 0xe9, 0x7d, 0x98, 0x35, 0x05,
	0x63, 0xdd, 0xe4, 0xe6, 0x7e, 0xf7, 0x74, 0x45, 0x81, 0x4d, 0xad, 0x77, 0xf7, 0x36, 0x98, 0xc7,
	0xf7, 0x98, 0x67, 0x99, 0xed, 0x9d, 0xa0, 0x73, 0xc8, 0x3c, 0x11, 0xe8, 0xd4, 0x3a, 0xad, 0x00,
	0xed, 0xae, 0x6d, 0xbe, 0x74, 0x2d, 0xcf, 0xe4, 0x96, 0x63, 0xd7, 0x4d, 0xce, 0xc2, 0xf8, 0x4f,
	0x19, 0x12, 0x8a, 0xde, 0x81, 0xf2, 0x86, 0xc7, 0x4c, 0xce, 0x7a, 0x11, 0x0d, 0x6d, 0x30, 0xd8,
	0x71, 0xc0, 0x7c, 0x4e, 0x77, 0x60, 0x26, 0x11, 0xb8, 0xd0, 0x9a, 0x6b, 0xb5, 0x3b, 0x52, 0x17,
	0x25, 0x8e, 0x85, 0x91, 0x64, 0xd6, 0x97, 0x60, 0x41, 0xae, 0xce, 0x77, 0x1d, 0xdb, 0x67, 0x7a,
	0x19, 0x6e, 0x75, 0xcf, 0x98, 0x14, 0x8c, 0xfe, 0x2d, 0x68, 0x32, 0x62, 0xc4, 0x3a, 0xec, 0x60,
	0x93, 0xe1, 0x07, 0xbb, 0x03, 0xe5, 0x2f, 0xdc, 0xe6, 0xd8, 0x7c, 0x61, 0xc3, 0x82, 0x5c, 0x9d,
	0x30, 0xe8, 0xb2, 0xf5, 0x3d, 0x87, 0x72, 0x9d, 0xb5, 0x19, 0x66, 0xde, 0x1b, 0x5f, 0xe1, 0xae,
	0x21, 0x72, 0xc1, 0x23, 0x32, 0xe4, 0x04, 0x96, 0xa2, 0x43, 0x94, 0xba, 0x7a, 0xb1, 0x2d, 0xfb,
	0x30, 0x67, 0x26, 0x69, 0x42, 0xe7, 0x3d, 0xa9, 0xce, 0xb4, 0xa4, 0xb4, 0x00, 0xfd, 0x14, 0x96,
	0x51, 0xbd, 0xc2, 0xd4, 0xd1, 0x28, 0xde, 0x80, 0xc5, 0x2d, 0xc6, 0x1b, 0x2f, 0x50, 0x7b, 0x33,
	0x64, 0x9c, 0xae, 0xd7, 0x30, 0x21, 0x23, 0x05, 0xbf, 0x04, 0x0b, 0xa1, 0xde, 0x3d, 0x6e, 0xb6,
	0x59, 0xbc, 0x6c, 0x31, 0x3f, 0xbe, 0xd5, 0xdf, 0x09, 0xe3, 0xd2, 0x74, 0x01, 0xeb, 0x6b, 0xb8,
	0x9e, 0x92, 0xda, 0xf7, 0x8e, 0x66, 0x85, 0x26, 0x17, 0xa2, 0xff, 0x45, 0x60, 0x29, 0xba, 0x86,
	0x17, 0xf1, 0xae, 0x34, 0x47, 0x5f, 0xc9, 0x95, 0xa3, 0x0b, 0x68, 0x8e, 0x3e, 0x85, 0x65, 0x14,
	0xe1, 0x48, 0x43, 0x57, 0x87, 0xa5, 0xe8, 0x62, 0x5f, 0xe8, 0xe0, 0x9d, 0xc2, 0x32, 0x2a, 0x65,
	0xa4, 0xf0, 0x7f, 0x24, 0x70, 0x3b, 0xba, 0xb0, 0xb2, 0xda, 0x20, 0x36, 0xe1, 0x1b, 0x28, 0xda,
	0x12, 0xb2, 0x50, 0xff, 0xae, 0x54, 0xbd, 0x54, 0x9e, 0x54, 0x8c, 0xfe, 0x13, 0x01, 0x5d, 0x05,
	0x42, 0x78, 0x60, 0xc4, 0x28, 0xb6, 0x60, 0x25, 0xbc, 0x64, 0x2a, 0x47, 0x64, 0x89, 0xe5, 0x2b,
	0x02, 0xb7, 0x15, 0x82, 0x84, 0x31, 0x0c, 0x4a, 0x32, 0x14, 0x7d, 0x97, 0x36, 0x87, 0x41, 0xa8,
	0xa8, 0x30, 0xbe, 0xd1, 0xc9, 0xfa, 0x1f, 0xe3, 0xfb, 0x0b, 0x01, 0x5d, 0x05, 0x62, 0xbc, 0x2e,
	0x79, 0x4d, 0xe0, 0x8e, 0xc1, 0x1a, 0xdc, 0x6a, 0x9d, 0x49, 0x38, 0xff, 0xcb, 0xba, 0xe3, 0xc2,
	0xf3, 0x2b, 0x81, 0xbb, 0x43, 0xf0, 0x8c, 0xd7, 0x41, 0x6e, 0x5c, 0x3b, 0x44, 0x4d, 0x5a, 0x94,
	0x65, 0x93, 0x65, 0x9e, 0x37, 0xd8, 0xc0, 0x29, 0xab, 0x95, 0x44, 0xb3, 0x67, 0x24, 0x99, 0xf5,
	0xcf, 0xe3, 0xaa, 0x41, 0xa2, 0x51, 0xd8, 0xfe, 0x1e, 0xcc, 0x25, 0xb8, 0x7a, 0xd7, 0x2f, 0x4d,
	0xd0, 0x9f, 0x89, 0x07, 0x13, 0xb5, 0x20, 0x9f, 0x38, 0x57, 0xd4, 0x05, 0x38, 0xbc, 0xcb, 0xf6,
	0xc8, 0x9f, 0xbd, 0x27, 0xf7, 0x72, 0x4c, 0x90, 0x01, 0xbc, 0x72, 0x11, 0x80, 0xc7, 0xf1, 0x83,
	0x3b, 0x3e, 0x9f, 0xec, 0xc4, 0x4f, 0xed, 0x25, 0x45, 0xf5, 0x38, 0x7e, 0x74, 0xc7, 0x67, 0xc2,
	0xe3, 0xa8, 0x3d, 0xdb, 0x8d, 0x66, 0x0f, 0xf5, 0x44, 0xc2, 0xe9, 0x9f, 0x52, 0x90, 0xc1, 0x29,
	0x85, 0x1e, 0x40, 0x59, 0xca, 0x29, 0x80, 0x7e, 0x09, 0xf3, 0x09, 0x5d, 0x7d, 0x59, 0x21, 0x1b,
	0x58, 0x99, 0x00, 0xfd, 0x79, 0x04, 0x38, 0xee, 0xeb, 0x13, 0x80, 0xfb, 0xc7, 0x02, 0x24, 0xdf,
	0x58, 0x40, 0xd8, 0x93, 0x12, 0x3c, 0x62, 0x7b, 0xd6, 0xa1, 0x14, 0xaa, 0x0d, 0x1f, 0xeb, 0xb4,
	0xfb, 0xfd, 0xc1, 0x87, 0xbd, 0xf7, 0xad, 0xfb, 0x51, 0xd3, 0x9d, 0xe0, 0x1b, 0x2d, 0xd8, 0xda,
	0x1f, 0x37, 0x60, 0xaa, 0x6e, 0x72, 0x73, 0x8f, 0x3b, 0x1e, 0xa3, 0xe7, 0x50, 0x94, 0xcd, 0x05,
	0xe8, 0x03, 0xa9, 0x02, 0xc5, 0xc4, 0x42, 0x7b, 0x98, 0x83, 0x43, 0x98, 0x18, 0x00, 0x4d, 0xcf,
	0x15, 0x68, 0x45, 0x2a, 0x08, 0x9d, 0x4e, 0x68, 0xd5, 0xcc, 0xfb, 0x85, 0xda, 0x73, 0x28, 0xca,
	0xfa, 0x7f, 0xc4, 0x66, 0xc5, 0x64, 0x02, 0xb1, 0x59, 0x39, 0x5c, 0x38, 0x87, 0xa2, 0xac, 0x67,
	0x47, 0x94, 0x2b, 0xe6, 0x06, 0x88, 0x72, 0xe5, 0x40, 0xe0, 0x67, 0x02, 0x37, 0x91, 0x4e, 0x9a,
	0xae, 0x29, 0xe2, 0x87, 0xb5, 0x21, 0xda, 0xa3, 0x7c, 0x4c, 0x02, 0xc6, 0x0f, 0x04, 0x6e, 0xc8,
	0x5b, 0x62, 0x5a, 0x43, 0x26, 0x13, 0x8a, 0x26, 0x5c, 0x5b, 0xcb, 0xc5, 0x23, 0x30, 0x7c, 0x0f,
	0xd7, 0xa5, 0xdd, 0x2f, 0x7d, 0x88, 0x4b, 0x43, 0x3a, 0x69, 0xad, 0x96, 0x87, 0xa5, 0x2f, 0x14,
	0x48, 0x73, 0x89, 0x84, 0x42, 0xdd, 0x2c, 0x23, 0xa1, 0x18, 0xd6, 0xbf, 0x76, 0x61, 0x20, 0x4d,
	0x22, 0x02, 0x43, 0xdd, 0x98, 0x22, 0x30, 0x86, 0xf5, 0xa1, 0xaf, 0x09, 0x68, 0x78, 0xb3, 0x46,
	0xd7, 0x15, 0xc7, 0x4c, 0xd1, 0x82, 0x68, 0x1f, 0xe6, 0xe6, 0x13, 0x78, 0x5e, 0x11, 0xb8, 0x85,
	0xb6, 0x5b, 0xf4, 0x03, 0x3c, 0xde, 0x2a, 0x34, 0xeb, 0x79, 0xd9, 0xfa, 0x9c, 0x83, 0x77, 0x3a,
	0x88, 0x73, 0x86, 0xf6, 0x67, 0x88, 0x73, 0x32, 0xb4, 0x54, 0xbf, 0x13, 0x58, 0x54, 0xf6, 0x16,
	0xf4, 0x09, 0xf2, 0x3c, 0x0d, 0xef, 0x8f, 0xb4, 0x8f, 0xde, 0x84, 0x35, 0x95, 0xde, 0x52, 0xc5,
	0x97, 0x32, 0xbd, 0x61, 0xa5, 0x9f, 0x32, 0xbd, 0xe1, 0xf5, 0x5d, 0x2f, 0xbd, 0xa5, 0x51, 0x28,
	0x32, 0x05, 0x0a, 0x62, 0x2d, 0x17, 0x4f, 0x2a, 0xbd, 0x64, 0x75, 0x85, 0xba, 0x31, 0x50, 0xa6,
	0x17, 0x35, 0x0c, 0xa4, 0x1c, 0x56, 0xa6, 0x97, 0x9c, 0x30, 0x86, 0x55, 0xdc, 0x2f, 0x61, 0x5e,
	0x52, 0xe7, 0x52, 0xbc, 0x72, 0x90, 0xd7, 0xd2, 0xda, 0x83, 0xec, 0x0c, 0x83, 0x9a, 0x13, 0x15,
	0xa9, 0x42, 0xb3, 0xbc, 0x28, 0x56, 0x68, 0xc6, 0x8a, 0x5d, 0x0f, 0xe6, 0x52, 0xc5, 0x25, 0x7d,
	0x1f, 0x17, 0x23, 0x29, 0x5e, 0xb5, 0x4a, 0xd6, 0xed, 0x42, 0xe7, 0x57, 0x30, 0xb5, 0xe1, 0xd8,
	0x2d, 0xeb, 0x28, 0xf0, 0x18, 0xbd, 0x2b, 0xbf, 0x3c, 0x31, 0x3d, 0xd6, 0x71, 0x6f, 0xd8, 0x36,
	0x21, 0xbb, 0x05, 0xef, 0x7c, 0xca, 0xf8, 0x6e, 0xf8, 0xf7, 0xf1, 0xb6, 0xdd, 0x72, 0xa8, 0x7c,
	0x2c, 0x31, 0xb0, 0x27, 0xd6, 0x71, 0x3f, 0xcb, 0xd6, 0x48, 0xcf, 0xee, 0x5b, 0x87, 0x6f, 0x87,
	0xe4, 0xb5, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xde, 0x92, 0xf7, 0x65, 0xf7, 0x1e, 0x00, 0x00,
}
