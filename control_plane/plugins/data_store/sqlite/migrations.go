// Code generated by go-bindata.
// sources:
// _migrations/000-initial.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000InitialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x94\xd1\x6f\x9b\x30\x10\xc6\xdf\xfd\x57\xdc\x63\x90\x78\xe8\xa6\xbd\x55\x9b\x44\xd9\xb5\x41\x4d\x4c\xe7\x38\x5b\xfb\x64\xd1\xfa\x32\x21\xd1\x04\x19\xa7\x6a\xff\xfb\x29\xf6\x4a\x20\x38\x0c\xad\x3c\xc2\xf7\xf9\xee\xbe\x1f\xe7\x54\x60\x22\x11\x64\x72\xb5\x40\xd8\x90\x26\x53\x58\xd2\xea\x71\xbf\xd5\x15\x35\x30\x63\x00\xa5\x86\xf6\xc9\xb8\xc4\x1b\x14\xc0\x73\x09\x7c\xbd\x58\xc0\x9d\xc8\x96\x89\x78\x80\x5b\x7c\x80\x64\x2d\xf3\x8c\xa7\x02\x97\xc8\x65\xcc\x00\x9a\xba\xdc\x6c\x48\xb9\x03\x7e\x26\x22\x9d\x27\x62\xf6\xe9\xe2\xf3\x97\xa8\xf5\xc7\x8c\x01\xf8\x62\xbe\xc0\xd5\x22\xbf\xea\x7c\x05\xb0\xb6\xea\x56\x87\xbe\xf5\xc9\x90\xeb\xb7\xb0\x00\x32\x5b\xe2\x4a\x26\xcb\xbb\x9e\x7f\x5f\xeb\x7f\x28\x34\x55\x34\x50\xb8\xd3\xd3\x39\xa6\xb7\x33\x6b\xab\x6f\x5f\x2f\x22\x16\x5d\x32\xf6\x37\xae\x35\xcf\x7e\xac\x11\x32\xfe\x1d\xef\xa1\xd4\xaf\x6a\x90\x9c\x6a\x67\x67\x00\x39\x1f\x46\x3b\x6b\x05\x11\x03\xf8\x35\x47\x81\xdd\x4e\xb2\x95\xeb\xef\x58\xd2\x13\x2a\xac\xa5\xe6\x20\xd9\xee\x34\x29\xda\x5a\x53\x06\x28\x7d\x84\xd3\x28\x29\x5d\xd8\x42\xd9\xb7\xda\xc3\x92\x78\x2f\x7d\xb9\x6e\x9c\x0d\x99\xb2\xa8\xd4\x76\xff\xfc\x48\xe6\x8c\x86\x5e\xeb\xd2\x50\xe3\x22\x0f\x63\x39\x61\x3b\x85\xee\x14\xbe\x1d\xcd\x28\xcf\x60\xce\xa7\x4c\x83\xa2\xff\xe3\xea\x4e\x30\xd4\xec\xaa\x17\x32\xea\xb9\xa8\x47\xd8\x7e\x08\xee\x18\x5d\x0f\xd6\x11\xeb\xe6\xf7\x52\x54\x7b\x3a\x7d\x3d\xe0\x33\x09\xd0\x24\x42\x61\x44\x3e\x27\x43\xbf\xcb\xc6\x92\x21\xdd\x0b\xe8\xe4\xf5\x9b\x9f\xb6\xd7\x72\x37\xa4\x7e\x2c\xe7\x12\x01\xa8\x0b\x43\x5b\x3b\xae\x39\xde\x4f\xee\x76\x6a\x9f\x77\xcd\x70\x86\x86\x2a\x7a\xb2\x3b\x33\xb9\xf5\xf8\x9d\xcd\x34\x34\xd0\xfb\x1f\x66\x81\x02\xb1\x3b\x2e\xf6\xf6\xe8\xe0\xb8\xce\x05\x66\x37\xfc\xe0\x08\x19\x22\x10\x78\x8d\x02\x79\x8a\xab\x00\x83\xa0\x65\x74\xbf\xce\xfe\xef\xee\x76\x51\xae\x31\xbf\x64\x67\x95\xc7\x45\x8b\xdd\x34\x7e\x98\x49\x3b\x77\xec\xa3\x65\xa1\x42\x1c\x72\x7e\x84\x15\x9c\xf1\x92\xfd\x09\x00\x00\xff\xff\x16\xca\xd9\xd0\x40\x07\x00\x00")

func _000InitialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000InitialUpSql,
		"000-initial.up.sql",
	)
}

func _000InitialUpSql() (*asset, error) {
	bytes, err := _000InitialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000-initial.up.sql", size: 1856, mode: os.FileMode(436), modTime: time.Unix(1503079856, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000-initial.up.sql": _000InitialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000-initial.up.sql": &bintree{_000InitialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
