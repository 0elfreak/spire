// Code generated by protoc-gen-go. DO NOT EDIT.
// source: datastore.proto

/*
Package datastore is a generated protocol buffer package.

It is generated from these files:
	datastore.proto

It has these top-level messages:
	FederatedBundle
	NodeResolverMapEntry
	AttestedNodeEntry
	CreateFederatedEntryRequest
	CreateFederatedEntryResponse
	ListFederatedEntryRequest
	ListFederatedEntryResponse
	UpdateFederatedEntryRequest
	UpdateFederatedEntryResponse
	DeleteFederatedEntryRequest
	DeleteFederatedEntryResponse
	CreateAttestedNodeEntryRequest
	CreateAttestedNodeEntryResponse
	FetchAttestedNodeEntryRequest
	FetchAttestedNodeEntryResponse
	FetchStaleNodeEntriesRequest
	FetchStaleNodeEntriesResponse
	UpdateAttestedNodeEntryRequest
	UpdateAttestedNodeEntryResponse
	DeleteAttestedNodeEntryRequest
	DeleteAttestedNodeEntryResponse
	CreateNodeResolverMapEntryRequest
	CreateNodeResolverMapEntryResponse
	FetchNodeResolverMapEntryRequest
	FetchNodeResolverMapEntryResponse
	DeleteNodeResolverMapEntryRequest
	DeleteNodeResolverMapEntryResponse
	RectifyNodeResolverMapEntriesRequest
	RectifyNodeResolverMapEntriesResponse
	CreateRegistrationEntryRequest
	CreateRegistrationEntryResponse
	FetchRegistrationEntryRequest
	FetchRegistrationEntryResponse
	UpdateRegistrationEntryRequest
	UpdateRegistrationEntryResponse
	DeleteRegistrationEntryRequest
	DeleteRegistrationEntryResponse
	ListParentIDEntriesRequest
	ListParentIDEntriesResponse
	ListSelectorEntriesRequest
	ListSelectorEntriesResponse
	ListSpiffeEntriesRequest
	ListSpiffeEntriesResponse
*/
package datastore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import spire_common_plugin "github.com/spiffe/spire/pkg/common/plugin"
import spire_common "github.com/spiffe/spire/pkg/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type ConfigureRequest spire_common_plugin.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*spire_common_plugin.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*spire_common_plugin.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*spire_common_plugin.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type ConfigureResponse spire_common_plugin.ConfigureResponse

func (m *ConfigureResponse) Reset() { (*spire_common_plugin.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string {
	return (*spire_common_plugin.ConfigureResponse)(m).String()
}
func (*ConfigureResponse) ProtoMessage() {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*spire_common_plugin.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type GetPluginInfoRequest spire_common_plugin.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset() { (*spire_common_plugin.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string {
	return (*spire_common_plugin.GetPluginInfoRequest)(m).String()
}
func (*GetPluginInfoRequest) ProtoMessage() {}

// GetPluginInfoResponse from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type GetPluginInfoResponse spire_common_plugin.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset() { (*spire_common_plugin.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).String()
}
func (*GetPluginInfoResponse) ProtoMessage() {}
func (m *GetPluginInfoResponse) GetName() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetName()
}
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetType()
}
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*spire_common_plugin.GetPluginInfoResponse)(m).GetCompany()
}

// PluginInfoRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type PluginInfoRequest spire_common_plugin.PluginInfoRequest

func (m *PluginInfoRequest) Reset() { (*spire_common_plugin.PluginInfoRequest)(m).Reset() }
func (m *PluginInfoRequest) String() string {
	return (*spire_common_plugin.PluginInfoRequest)(m).String()
}
func (*PluginInfoRequest) ProtoMessage() {}

// PluginInfoReply from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type PluginInfoReply spire_common_plugin.PluginInfoReply

func (m *PluginInfoReply) Reset()         { (*spire_common_plugin.PluginInfoReply)(m).Reset() }
func (m *PluginInfoReply) String() string { return (*spire_common_plugin.PluginInfoReply)(m).String() }
func (*PluginInfoReply) ProtoMessage()    {}
func (m *PluginInfoReply) GetPluginInfo() []*GetPluginInfoResponse {
	o := (*spire_common_plugin.PluginInfoReply)(m).GetPluginInfo()
	if o == nil {
		return nil
	}
	s := make([]*GetPluginInfoResponse, len(o))
	for i, x := range o {
		s[i] = (*GetPluginInfoResponse)(x)
	}
	return s
}

// StopRequest from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type StopRequest spire_common_plugin.StopRequest

func (m *StopRequest) Reset()         { (*spire_common_plugin.StopRequest)(m).Reset() }
func (m *StopRequest) String() string { return (*spire_common_plugin.StopRequest)(m).String() }
func (*StopRequest) ProtoMessage()    {}

// StopReply from public import github.com/spiffe/spire/pkg/common/plugin/plugin.proto
type StopReply spire_common_plugin.StopReply

func (m *StopReply) Reset()         { (*spire_common_plugin.StopReply)(m).Reset() }
func (m *StopReply) String() string { return (*spire_common_plugin.StopReply)(m).String() }
func (*StopReply) ProtoMessage()    {}

// Empty from public import github.com/spiffe/spire/pkg/common/common.proto
type Empty spire_common.Empty

func (m *Empty) Reset()         { (*spire_common.Empty)(m).Reset() }
func (m *Empty) String() string { return (*spire_common.Empty)(m).String() }
func (*Empty) ProtoMessage()    {}

// AttestedData from public import github.com/spiffe/spire/pkg/common/common.proto
type AttestedData spire_common.AttestedData

func (m *AttestedData) Reset()          { (*spire_common.AttestedData)(m).Reset() }
func (m *AttestedData) String() string  { return (*spire_common.AttestedData)(m).String() }
func (*AttestedData) ProtoMessage()     {}
func (m *AttestedData) GetType() string { return (*spire_common.AttestedData)(m).GetType() }
func (m *AttestedData) GetData() []byte { return (*spire_common.AttestedData)(m).GetData() }

// Selector from public import github.com/spiffe/spire/pkg/common/common.proto
type Selector spire_common.Selector

func (m *Selector) Reset()           { (*spire_common.Selector)(m).Reset() }
func (m *Selector) String() string   { return (*spire_common.Selector)(m).String() }
func (*Selector) ProtoMessage()      {}
func (m *Selector) GetType() string  { return (*spire_common.Selector)(m).GetType() }
func (m *Selector) GetValue() string { return (*spire_common.Selector)(m).GetValue() }

// Selectors from public import github.com/spiffe/spire/pkg/common/common.proto
type Selectors spire_common.Selectors

func (m *Selectors) Reset()         { (*spire_common.Selectors)(m).Reset() }
func (m *Selectors) String() string { return (*spire_common.Selectors)(m).String() }
func (*Selectors) ProtoMessage()    {}
func (m *Selectors) GetEntries() []*Selector {
	o := (*spire_common.Selectors)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}

// RegistrationEntry from public import github.com/spiffe/spire/pkg/common/common.proto
type RegistrationEntry spire_common.RegistrationEntry

func (m *RegistrationEntry) Reset()         { (*spire_common.RegistrationEntry)(m).Reset() }
func (m *RegistrationEntry) String() string { return (*spire_common.RegistrationEntry)(m).String() }
func (*RegistrationEntry) ProtoMessage()    {}
func (m *RegistrationEntry) GetSelectors() []*Selector {
	o := (*spire_common.RegistrationEntry)(m).GetSelectors()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}
func (m *RegistrationEntry) GetParentId() string {
	return (*spire_common.RegistrationEntry)(m).GetParentId()
}
func (m *RegistrationEntry) GetSpiffeId() string {
	return (*spire_common.RegistrationEntry)(m).GetSpiffeId()
}
func (m *RegistrationEntry) GetTtl() int32 { return (*spire_common.RegistrationEntry)(m).GetTtl() }
func (m *RegistrationEntry) GetFbSpiffeIds() []string {
	return (*spire_common.RegistrationEntry)(m).GetFbSpiffeIds()
}

// RegistrationEntries from public import github.com/spiffe/spire/pkg/common/common.proto
type RegistrationEntries spire_common.RegistrationEntries

func (m *RegistrationEntries) Reset()         { (*spire_common.RegistrationEntries)(m).Reset() }
func (m *RegistrationEntries) String() string { return (*spire_common.RegistrationEntries)(m).String() }
func (*RegistrationEntries) ProtoMessage()    {}
func (m *RegistrationEntries) GetEntries() []*RegistrationEntry {
	o := (*spire_common.RegistrationEntries)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*RegistrationEntry, len(o))
	for i, x := range o {
		s[i] = (*RegistrationEntry)(x)
	}
	return s
}

// * Represents the trust chain for a different trust domain, along with
// a TTL describing its expiration, keyed by the SPIFFE ID of the foreign
// trust domain.
type FederatedBundle struct {
	// * Foreign trust domain SPIFFE ID
	FederatedBundleSpiffeId string `protobuf:"bytes,1,opt,name=federatedBundleSpiffeId" json:"federatedBundleSpiffeId,omitempty"`
	// * Trust chain
	FederatedTrustBundle []byte `protobuf:"bytes,2,opt,name=federatedTrustBundle,proto3" json:"federatedTrustBundle,omitempty"`
	// * TTL
	Ttl int32 `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *FederatedBundle) Reset()                    { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string            { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()               {}
func (*FederatedBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FederatedBundle) GetFederatedBundleSpiffeId() string {
	if m != nil {
		return m.FederatedBundleSpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetFederatedTrustBundle() []byte {
	if m != nil {
		return m.FederatedTrustBundle
	}
	return nil
}

func (m *FederatedBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// * Represents a single entry in NodeResolverMap and maps node properties
// to logical attributes (i.e. an AWS instance to its ASG).
type NodeResolverMapEntry struct {
	BaseSpiffeId string                 `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	Selector     *spire_common.Selector `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *NodeResolverMapEntry) Reset()                    { *m = NodeResolverMapEntry{} }
func (m *NodeResolverMapEntry) String() string            { return proto.CompactTextString(m) }
func (*NodeResolverMapEntry) ProtoMessage()               {}
func (*NodeResolverMapEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeResolverMapEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *NodeResolverMapEntry) GetSelector() *spire_common.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// * Represents a single entry in AttestedNodes and stores the node's
// SPIFFE ID, the type of attestation it performed, as well as the serial
// number and expiration date of its node SVID.
type AttestedNodeEntry struct {
	// * Spiffe ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	// * Attestation type
	AttestedDataType string `protobuf:"bytes,2,opt,name=attestedDataType" json:"attestedDataType,omitempty"`
	// * Serial number
	CertSerialNumber string `protobuf:"bytes,3,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	// *  Expiration date
	CertExpirationDate string `protobuf:"bytes,4,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
}

func (m *AttestedNodeEntry) Reset()                    { *m = AttestedNodeEntry{} }
func (m *AttestedNodeEntry) String() string            { return proto.CompactTextString(m) }
func (*AttestedNodeEntry) ProtoMessage()               {}
func (*AttestedNodeEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *AttestedNodeEntry) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *AttestedNodeEntry) GetAttestedDataType() string {
	if m != nil {
		return m.AttestedDataType
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *AttestedNodeEntry) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// * Represents a Federated bundle
type CreateFederatedEntryRequest struct {
	// * Federated bundle
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *CreateFederatedEntryRequest) Reset()                    { *m = CreateFederatedEntryRequest{} }
func (m *CreateFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedEntryRequest) ProtoMessage()               {}
func (*CreateFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateFederatedEntryRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Empty response
type CreateFederatedEntryResponse struct {
}

func (m *CreateFederatedEntryResponse) Reset()                    { *m = CreateFederatedEntryResponse{} }
func (m *CreateFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedEntryResponse) ProtoMessage()               {}
func (*CreateFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

// * Empty Request
type ListFederatedEntryRequest struct {
}

func (m *ListFederatedEntryRequest) Reset()                    { *m = ListFederatedEntryRequest{} }
func (m *ListFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedEntryRequest) ProtoMessage()               {}
func (*ListFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

// * Represents a list of SPIFFE IDs of foreign trust domains
type ListFederatedEntryResponse struct {
	// * SPIFFE IDs of foreign trust domains
	FederatedBundleSpiffeIdList []string `protobuf:"bytes,1,rep,name=federatedBundleSpiffeIdList" json:"federatedBundleSpiffeIdList,omitempty"`
}

func (m *ListFederatedEntryResponse) Reset()                    { *m = ListFederatedEntryResponse{} }
func (m *ListFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedEntryResponse) ProtoMessage()               {}
func (*ListFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListFederatedEntryResponse) GetFederatedBundleSpiffeIdList() []string {
	if m != nil {
		return m.FederatedBundleSpiffeIdList
	}
	return nil
}

// * Represents a federated bundle to update
type UpdateFederatedEntryRequest struct {
	// * Federated bundle
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedEntryRequest) Reset()                    { *m = UpdateFederatedEntryRequest{} }
func (m *UpdateFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedEntryRequest) ProtoMessage()               {}
func (*UpdateFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateFederatedEntryRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents the updated federated bundle
type UpdateFederatedEntryResponse struct {
	// * Federated bundle
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedEntryResponse) Reset()                    { *m = UpdateFederatedEntryResponse{} }
func (m *UpdateFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedEntryResponse) ProtoMessage()               {}
func (*UpdateFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateFederatedEntryResponse) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents the Spiffe ID of the federated bundle to delete
type DeleteFederatedEntryRequest struct {
	// * SPIFFE ID of foreign trust domain
	FederatedBundleSpiffeId string `protobuf:"bytes,1,opt,name=federatedBundleSpiffeId" json:"federatedBundleSpiffeId,omitempty"`
}

func (m *DeleteFederatedEntryRequest) Reset()                    { *m = DeleteFederatedEntryRequest{} }
func (m *DeleteFederatedEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedEntryRequest) ProtoMessage()               {}
func (*DeleteFederatedEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *DeleteFederatedEntryRequest) GetFederatedBundleSpiffeId() string {
	if m != nil {
		return m.FederatedBundleSpiffeId
	}
	return ""
}

// * Represents the deleted federated bundle
type DeleteFederatedEntryResponse struct {
	// * Federated bundle
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *DeleteFederatedEntryResponse) Reset()                    { *m = DeleteFederatedEntryResponse{} }
func (m *DeleteFederatedEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedEntryResponse) ProtoMessage()               {}
func (*DeleteFederatedEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteFederatedEntryResponse) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * Represents an Attested Node entry to create
type CreateAttestedNodeEntryRequest struct {
	// * Attested node entry
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *CreateAttestedNodeEntryRequest) Reset()                    { *m = CreateAttestedNodeEntryRequest{} }
func (m *CreateAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryRequest) ProtoMessage()               {}
func (*CreateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CreateAttestedNodeEntryRequest) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the created Attested Node entry
type CreateAttestedNodeEntryResponse struct {
	// * Attested node entry
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *CreateAttestedNodeEntryResponse) Reset()         { *m = CreateAttestedNodeEntryResponse{} }
func (m *CreateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*CreateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{12}
}

func (m *CreateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the Spiffe ID of the node entry to retrieve
type FetchAttestedNodeEntryRequest struct {
	// * SPIFFE ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *FetchAttestedNodeEntryRequest) Reset()                    { *m = FetchAttestedNodeEntryRequest{} }
func (m *FetchAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryRequest) ProtoMessage()               {}
func (*FetchAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *FetchAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents an Attested Node entry
type FetchAttestedNodeEntryResponse struct {
	// * Attested node entry
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *FetchAttestedNodeEntryResponse) Reset()                    { *m = FetchAttestedNodeEntryResponse{} }
func (m *FetchAttestedNodeEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchAttestedNodeEntryResponse) ProtoMessage()               {}
func (*FetchAttestedNodeEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *FetchAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Empty Request
type FetchStaleNodeEntriesRequest struct {
}

func (m *FetchStaleNodeEntriesRequest) Reset()                    { *m = FetchStaleNodeEntriesRequest{} }
func (m *FetchStaleNodeEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesRequest) ProtoMessage()               {}
func (*FetchStaleNodeEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

// * Represents dead nodes for which the base SVID has expired
type FetchStaleNodeEntriesResponse struct {
	// * List of attested node entries
	AttestedNodeEntryList []*AttestedNodeEntry `protobuf:"bytes,1,rep,name=attestedNodeEntryList" json:"attestedNodeEntryList,omitempty"`
}

func (m *FetchStaleNodeEntriesResponse) Reset()                    { *m = FetchStaleNodeEntriesResponse{} }
func (m *FetchStaleNodeEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchStaleNodeEntriesResponse) ProtoMessage()               {}
func (*FetchStaleNodeEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FetchStaleNodeEntriesResponse) GetAttestedNodeEntryList() []*AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntryList
	}
	return nil
}

// * Represents Attested node entry fields to update
type UpdateAttestedNodeEntryRequest struct {
	// * SPIFFE ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
	// * Serial number
	CertSerialNumber string `protobuf:"bytes,2,opt,name=certSerialNumber" json:"certSerialNumber,omitempty"`
	// * Expiration date
	CertExpirationDate string `protobuf:"bytes,3,opt,name=certExpirationDate" json:"certExpirationDate,omitempty"`
}

func (m *UpdateAttestedNodeEntryRequest) Reset()                    { *m = UpdateAttestedNodeEntryRequest{} }
func (m *UpdateAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryRequest) ProtoMessage()               {}
func (*UpdateAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpdateAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertSerialNumber() string {
	if m != nil {
		return m.CertSerialNumber
	}
	return ""
}

func (m *UpdateAttestedNodeEntryRequest) GetCertExpirationDate() string {
	if m != nil {
		return m.CertExpirationDate
	}
	return ""
}

// * Represents the updated Attested node entry
type UpdateAttestedNodeEntryResponse struct {
	// * Attested node entry
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *UpdateAttestedNodeEntryResponse) Reset()         { *m = UpdateAttestedNodeEntryResponse{} }
func (m *UpdateAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateAttestedNodeEntryResponse) ProtoMessage()    {}
func (*UpdateAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *UpdateAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents the Spiffe ID of the Attested node entry to delete
type DeleteAttestedNodeEntryRequest struct {
	// * SPIFFE ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *DeleteAttestedNodeEntryRequest) Reset()                    { *m = DeleteAttestedNodeEntryRequest{} }
func (m *DeleteAttestedNodeEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryRequest) ProtoMessage()               {}
func (*DeleteAttestedNodeEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *DeleteAttestedNodeEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents the deleted Attested node entry
type DeleteAttestedNodeEntryResponse struct {
	AttestedNodeEntry *AttestedNodeEntry `protobuf:"bytes,1,opt,name=attestedNodeEntry" json:"attestedNodeEntry,omitempty"`
}

func (m *DeleteAttestedNodeEntryResponse) Reset()         { *m = DeleteAttestedNodeEntryResponse{} }
func (m *DeleteAttestedNodeEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteAttestedNodeEntryResponse) ProtoMessage()    {}
func (*DeleteAttestedNodeEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *DeleteAttestedNodeEntryResponse) GetAttestedNodeEntry() *AttestedNodeEntry {
	if m != nil {
		return m.AttestedNodeEntry
	}
	return nil
}

// * Represents a Node resolver map entry to create
type CreateNodeResolverMapEntryRequest struct {
	// * Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *CreateNodeResolverMapEntryRequest) Reset()         { *m = CreateNodeResolverMapEntryRequest{} }
func (m *CreateNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func (m *CreateNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents the created Node resolver map entry
type CreateNodeResolverMapEntryResponse struct {
	// * Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *CreateNodeResolverMapEntryResponse) Reset()         { *m = CreateNodeResolverMapEntryResponse{} }
func (m *CreateNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*CreateNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{22}
}

func (m *CreateNodeResolverMapEntryResponse) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents a Spiffe ID
type FetchNodeResolverMapEntryRequest struct {
	// * SPIFFE ID
	BaseSpiffeId string `protobuf:"bytes,1,opt,name=baseSpiffeId" json:"baseSpiffeId,omitempty"`
}

func (m *FetchNodeResolverMapEntryRequest) Reset()         { *m = FetchNodeResolverMapEntryRequest{} }
func (m *FetchNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *FetchNodeResolverMapEntryRequest) GetBaseSpiffeId() string {
	if m != nil {
		return m.BaseSpiffeId
	}
	return ""
}

// * Represents a list of Node resolver map entries for the specified
// Spiffe ID
type FetchNodeResolverMapEntryResponse struct {
	// * List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *FetchNodeResolverMapEntryResponse) Reset()         { *m = FetchNodeResolverMapEntryResponse{} }
func (m *FetchNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*FetchNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*FetchNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *FetchNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a Node resolver map entry to delete
type DeleteNodeResolverMapEntryRequest struct {
	// * Node resolver map entry
	NodeResolverMapEntry *NodeResolverMapEntry `protobuf:"bytes,1,opt,name=nodeResolverMapEntry" json:"nodeResolverMapEntry,omitempty"`
}

func (m *DeleteNodeResolverMapEntryRequest) Reset()         { *m = DeleteNodeResolverMapEntryRequest{} }
func (m *DeleteNodeResolverMapEntryRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryRequest) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{25}
}

func (m *DeleteNodeResolverMapEntryRequest) GetNodeResolverMapEntry() *NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntry
	}
	return nil
}

// * Represents a list of Node resolver map entries
type DeleteNodeResolverMapEntryResponse struct {
	// * List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *DeleteNodeResolverMapEntryResponse) Reset()         { *m = DeleteNodeResolverMapEntryResponse{} }
func (m *DeleteNodeResolverMapEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteNodeResolverMapEntryResponse) ProtoMessage()    {}
func (*DeleteNodeResolverMapEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{26}
}

func (m *DeleteNodeResolverMapEntryResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesRequest struct {
	// * List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *RectifyNodeResolverMapEntriesRequest) Reset()         { *m = RectifyNodeResolverMapEntriesRequest{} }
func (m *RectifyNodeResolverMapEntriesRequest) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesRequest) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{27}
}

func (m *RectifyNodeResolverMapEntriesRequest) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a list of Node resolver map entries
type RectifyNodeResolverMapEntriesResponse struct {
	// * List of Node resolver map entries
	NodeResolverMapEntryList []*NodeResolverMapEntry `protobuf:"bytes,1,rep,name=nodeResolverMapEntryList" json:"nodeResolverMapEntryList,omitempty"`
}

func (m *RectifyNodeResolverMapEntriesResponse) Reset()         { *m = RectifyNodeResolverMapEntriesResponse{} }
func (m *RectifyNodeResolverMapEntriesResponse) String() string { return proto.CompactTextString(m) }
func (*RectifyNodeResolverMapEntriesResponse) ProtoMessage()    {}
func (*RectifyNodeResolverMapEntriesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{28}
}

func (m *RectifyNodeResolverMapEntriesResponse) GetNodeResolverMapEntryList() []*NodeResolverMapEntry {
	if m != nil {
		return m.NodeResolverMapEntryList
	}
	return nil
}

// * Represents a Registration entry to create
type CreateRegistrationEntryRequest struct {
	// * Registration entry
	RegisteredEntry *spire_common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *CreateRegistrationEntryRequest) Reset()                    { *m = CreateRegistrationEntryRequest{} }
func (m *CreateRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryRequest) ProtoMessage()               {}
func (*CreateRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CreateRegistrationEntryRequest) GetRegisteredEntry() *spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents the created Registration entry
type CreateRegistrationEntryResponse struct {
	// * Registration entry ID
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *CreateRegistrationEntryResponse) Reset()         { *m = CreateRegistrationEntryResponse{} }
func (m *CreateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*CreateRegistrationEntryResponse) ProtoMessage()    {}
func (*CreateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{30}
}

func (m *CreateRegistrationEntryResponse) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents a Registration entry ID to fetch
type FetchRegistrationEntryRequest struct {
	// * Registration entry ID
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *FetchRegistrationEntryRequest) Reset()                    { *m = FetchRegistrationEntryRequest{} }
func (m *FetchRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryRequest) ProtoMessage()               {}
func (*FetchRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *FetchRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents a Registration entry
type FetchRegistrationEntryResponse struct {
	// * Registration entry
	RegisteredEntry *spire_common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *FetchRegistrationEntryResponse) Reset()                    { *m = FetchRegistrationEntryResponse{} }
func (m *FetchRegistrationEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchRegistrationEntryResponse) ProtoMessage()               {}
func (*FetchRegistrationEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *FetchRegistrationEntryResponse) GetRegisteredEntry() *spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Registration entry to update
type UpdateRegistrationEntryRequest struct {
	// * Registration entry ID
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
	// * Registration entry
	RegisteredEntry *spire_common.RegistrationEntry `protobuf:"bytes,2,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *UpdateRegistrationEntryRequest) Reset()                    { *m = UpdateRegistrationEntryRequest{} }
func (m *UpdateRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryRequest) ProtoMessage()               {}
func (*UpdateRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

func (m *UpdateRegistrationEntryRequest) GetRegisteredEntry() *spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents the updated Registration entry
type UpdateRegistrationEntryResponse struct {
	// * Registration entry
	RegisteredEntry *spire_common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *UpdateRegistrationEntryResponse) Reset()         { *m = UpdateRegistrationEntryResponse{} }
func (m *UpdateRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateRegistrationEntryResponse) ProtoMessage()    {}
func (*UpdateRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{34}
}

func (m *UpdateRegistrationEntryResponse) GetRegisteredEntry() *spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Registration entry ID to delete
type DeleteRegistrationEntryRequest struct {
	// * Registration entry ID
	RegisteredEntryId string `protobuf:"bytes,1,opt,name=registeredEntryId" json:"registeredEntryId,omitempty"`
}

func (m *DeleteRegistrationEntryRequest) Reset()                    { *m = DeleteRegistrationEntryRequest{} }
func (m *DeleteRegistrationEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryRequest) ProtoMessage()               {}
func (*DeleteRegistrationEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{35} }

func (m *DeleteRegistrationEntryRequest) GetRegisteredEntryId() string {
	if m != nil {
		return m.RegisteredEntryId
	}
	return ""
}

// * Represents the deleted Registration entry
type DeleteRegistrationEntryResponse struct {
	// * Registration entry
	RegisteredEntry *spire_common.RegistrationEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *DeleteRegistrationEntryResponse) Reset()         { *m = DeleteRegistrationEntryResponse{} }
func (m *DeleteRegistrationEntryResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteRegistrationEntryResponse) ProtoMessage()    {}
func (*DeleteRegistrationEntryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{36}
}

func (m *DeleteRegistrationEntryResponse) GetRegisteredEntry() *spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * Represents a Parent ID
type ListParentIDEntriesRequest struct {
	// * Parent ID
	ParentId string `protobuf:"bytes,1,opt,name=parentId" json:"parentId,omitempty"`
}

func (m *ListParentIDEntriesRequest) Reset()                    { *m = ListParentIDEntriesRequest{} }
func (m *ListParentIDEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListParentIDEntriesRequest) ProtoMessage()               {}
func (*ListParentIDEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{37} }

func (m *ListParentIDEntriesRequest) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

// * Represents a list of Registered entries with the specified Parent
// ID
type ListParentIDEntriesResponse struct {
	// * List of Registration entries
	RegisteredEntryList []*spire_common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListParentIDEntriesResponse) Reset()                    { *m = ListParentIDEntriesResponse{} }
func (m *ListParentIDEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListParentIDEntriesResponse) ProtoMessage()               {}
func (*ListParentIDEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{38} }

func (m *ListParentIDEntriesResponse) GetRegisteredEntryList() []*spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a selector
type ListSelectorEntriesRequest struct {
	// * Selector
	Selector *spire_common.Selector `protobuf:"bytes,1,opt,name=selector" json:"selector,omitempty"`
}

func (m *ListSelectorEntriesRequest) Reset()                    { *m = ListSelectorEntriesRequest{} }
func (m *ListSelectorEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSelectorEntriesRequest) ProtoMessage()               {}
func (*ListSelectorEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{39} }

func (m *ListSelectorEntriesRequest) GetSelector() *spire_common.Selector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// * Represents a list of Registered entries with the specified selector
type ListSelectorEntriesResponse struct {
	// * List of Registration entries
	RegisteredEntryList []*spire_common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListSelectorEntriesResponse) Reset()                    { *m = ListSelectorEntriesResponse{} }
func (m *ListSelectorEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSelectorEntriesResponse) ProtoMessage()               {}
func (*ListSelectorEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{40} }

func (m *ListSelectorEntriesResponse) GetRegisteredEntryList() []*spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a Spiffe ID
type ListSpiffeEntriesRequest struct {
	// * SPIFFE ID
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *ListSpiffeEntriesRequest) Reset()                    { *m = ListSpiffeEntriesRequest{} }
func (m *ListSpiffeEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesRequest) ProtoMessage()               {}
func (*ListSpiffeEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{41} }

func (m *ListSpiffeEntriesRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

// * Represents a list of Registered entries with the specified Spiffe ID
type ListSpiffeEntriesResponse struct {
	// * List of Registration entries
	RegisteredEntryList []*spire_common.RegistrationEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListSpiffeEntriesResponse) Reset()                    { *m = ListSpiffeEntriesResponse{} }
func (m *ListSpiffeEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListSpiffeEntriesResponse) ProtoMessage()               {}
func (*ListSpiffeEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{42} }

func (m *ListSpiffeEntriesResponse) GetRegisteredEntryList() []*spire_common.RegistrationEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

func init() {
	proto.RegisterType((*FederatedBundle)(nil), "spire.server.datastore.FederatedBundle")
	proto.RegisterType((*NodeResolverMapEntry)(nil), "spire.server.datastore.NodeResolverMapEntry")
	proto.RegisterType((*AttestedNodeEntry)(nil), "spire.server.datastore.AttestedNodeEntry")
	proto.RegisterType((*CreateFederatedEntryRequest)(nil), "spire.server.datastore.CreateFederatedEntryRequest")
	proto.RegisterType((*CreateFederatedEntryResponse)(nil), "spire.server.datastore.CreateFederatedEntryResponse")
	proto.RegisterType((*ListFederatedEntryRequest)(nil), "spire.server.datastore.ListFederatedEntryRequest")
	proto.RegisterType((*ListFederatedEntryResponse)(nil), "spire.server.datastore.ListFederatedEntryResponse")
	proto.RegisterType((*UpdateFederatedEntryRequest)(nil), "spire.server.datastore.UpdateFederatedEntryRequest")
	proto.RegisterType((*UpdateFederatedEntryResponse)(nil), "spire.server.datastore.UpdateFederatedEntryResponse")
	proto.RegisterType((*DeleteFederatedEntryRequest)(nil), "spire.server.datastore.DeleteFederatedEntryRequest")
	proto.RegisterType((*DeleteFederatedEntryResponse)(nil), "spire.server.datastore.DeleteFederatedEntryResponse")
	proto.RegisterType((*CreateAttestedNodeEntryRequest)(nil), "spire.server.datastore.CreateAttestedNodeEntryRequest")
	proto.RegisterType((*CreateAttestedNodeEntryResponse)(nil), "spire.server.datastore.CreateAttestedNodeEntryResponse")
	proto.RegisterType((*FetchAttestedNodeEntryRequest)(nil), "spire.server.datastore.FetchAttestedNodeEntryRequest")
	proto.RegisterType((*FetchAttestedNodeEntryResponse)(nil), "spire.server.datastore.FetchAttestedNodeEntryResponse")
	proto.RegisterType((*FetchStaleNodeEntriesRequest)(nil), "spire.server.datastore.FetchStaleNodeEntriesRequest")
	proto.RegisterType((*FetchStaleNodeEntriesResponse)(nil), "spire.server.datastore.FetchStaleNodeEntriesResponse")
	proto.RegisterType((*UpdateAttestedNodeEntryRequest)(nil), "spire.server.datastore.UpdateAttestedNodeEntryRequest")
	proto.RegisterType((*UpdateAttestedNodeEntryResponse)(nil), "spire.server.datastore.UpdateAttestedNodeEntryResponse")
	proto.RegisterType((*DeleteAttestedNodeEntryRequest)(nil), "spire.server.datastore.DeleteAttestedNodeEntryRequest")
	proto.RegisterType((*DeleteAttestedNodeEntryResponse)(nil), "spire.server.datastore.DeleteAttestedNodeEntryResponse")
	proto.RegisterType((*CreateNodeResolverMapEntryRequest)(nil), "spire.server.datastore.CreateNodeResolverMapEntryRequest")
	proto.RegisterType((*CreateNodeResolverMapEntryResponse)(nil), "spire.server.datastore.CreateNodeResolverMapEntryResponse")
	proto.RegisterType((*FetchNodeResolverMapEntryRequest)(nil), "spire.server.datastore.FetchNodeResolverMapEntryRequest")
	proto.RegisterType((*FetchNodeResolverMapEntryResponse)(nil), "spire.server.datastore.FetchNodeResolverMapEntryResponse")
	proto.RegisterType((*DeleteNodeResolverMapEntryRequest)(nil), "spire.server.datastore.DeleteNodeResolverMapEntryRequest")
	proto.RegisterType((*DeleteNodeResolverMapEntryResponse)(nil), "spire.server.datastore.DeleteNodeResolverMapEntryResponse")
	proto.RegisterType((*RectifyNodeResolverMapEntriesRequest)(nil), "spire.server.datastore.RectifyNodeResolverMapEntriesRequest")
	proto.RegisterType((*RectifyNodeResolverMapEntriesResponse)(nil), "spire.server.datastore.RectifyNodeResolverMapEntriesResponse")
	proto.RegisterType((*CreateRegistrationEntryRequest)(nil), "spire.server.datastore.CreateRegistrationEntryRequest")
	proto.RegisterType((*CreateRegistrationEntryResponse)(nil), "spire.server.datastore.CreateRegistrationEntryResponse")
	proto.RegisterType((*FetchRegistrationEntryRequest)(nil), "spire.server.datastore.FetchRegistrationEntryRequest")
	proto.RegisterType((*FetchRegistrationEntryResponse)(nil), "spire.server.datastore.FetchRegistrationEntryResponse")
	proto.RegisterType((*UpdateRegistrationEntryRequest)(nil), "spire.server.datastore.UpdateRegistrationEntryRequest")
	proto.RegisterType((*UpdateRegistrationEntryResponse)(nil), "spire.server.datastore.UpdateRegistrationEntryResponse")
	proto.RegisterType((*DeleteRegistrationEntryRequest)(nil), "spire.server.datastore.DeleteRegistrationEntryRequest")
	proto.RegisterType((*DeleteRegistrationEntryResponse)(nil), "spire.server.datastore.DeleteRegistrationEntryResponse")
	proto.RegisterType((*ListParentIDEntriesRequest)(nil), "spire.server.datastore.ListParentIDEntriesRequest")
	proto.RegisterType((*ListParentIDEntriesResponse)(nil), "spire.server.datastore.ListParentIDEntriesResponse")
	proto.RegisterType((*ListSelectorEntriesRequest)(nil), "spire.server.datastore.ListSelectorEntriesRequest")
	proto.RegisterType((*ListSelectorEntriesResponse)(nil), "spire.server.datastore.ListSelectorEntriesResponse")
	proto.RegisterType((*ListSpiffeEntriesRequest)(nil), "spire.server.datastore.ListSpiffeEntriesRequest")
	proto.RegisterType((*ListSpiffeEntriesResponse)(nil), "spire.server.datastore.ListSpiffeEntriesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DataStore service

type DataStoreClient interface {
	// * Creates a Federated Bundle
	CreateFederatedEntry(ctx context.Context, in *CreateFederatedEntryRequest, opts ...grpc.CallOption) (*CreateFederatedEntryResponse, error)
	// * List all Federated SPIFFE IDs
	ListFederatedEntry(ctx context.Context, in *ListFederatedEntryRequest, opts ...grpc.CallOption) (*ListFederatedEntryResponse, error)
	// * Updates the specified Federated Bundle
	UpdateFederatedEntry(ctx context.Context, in *UpdateFederatedEntryRequest, opts ...grpc.CallOption) (*UpdateFederatedEntryResponse, error)
	// * Deletes the specified Federated Bundle
	DeleteFederatedEntry(ctx context.Context, in *DeleteFederatedEntryRequest, opts ...grpc.CallOption) (*DeleteFederatedEntryResponse, error)
	// * Creates an Attested Node Entry
	CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error)
	// * Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error)
	// * Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error)
	// * Updates the Attested Node Entry
	UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error)
	// * Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error)
	// * Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error)
	// * Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error)
	// * Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error)
	// * Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error)
	// * Creates a Registered Entry
	CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error)
	// * Retrieve a specific registered entry
	FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error)
	// * Updates a specific registered entry
	UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error)
	// * Deletes a specific registered entry
	DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error)
	// * Retrieves all the  registered entry with the same ParentID
	ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error)
	// * Retrieves all the  registered entry with the same Selector
	ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error)
	// * Retrieves all the  registered entry with the same SpiffeId
	ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error)
	// * Applies the plugin configuration
	Configure(ctx context.Context, in *spire_common_plugin.ConfigureRequest, opts ...grpc.CallOption) (*spire_common_plugin.ConfigureResponse, error)
	// * Returns the version and related metadata of the installed plugin
	GetPluginInfo(ctx context.Context, in *spire_common_plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*spire_common_plugin.GetPluginInfoResponse, error)
}

type dataStoreClient struct {
	cc *grpc.ClientConn
}

func NewDataStoreClient(cc *grpc.ClientConn) DataStoreClient {
	return &dataStoreClient{cc}
}

func (c *dataStoreClient) CreateFederatedEntry(ctx context.Context, in *CreateFederatedEntryRequest, opts ...grpc.CallOption) (*CreateFederatedEntryResponse, error) {
	out := new(CreateFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListFederatedEntry(ctx context.Context, in *ListFederatedEntryRequest, opts ...grpc.CallOption) (*ListFederatedEntryResponse, error) {
	out := new(ListFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateFederatedEntry(ctx context.Context, in *UpdateFederatedEntryRequest, opts ...grpc.CallOption) (*UpdateFederatedEntryResponse, error) {
	out := new(UpdateFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteFederatedEntry(ctx context.Context, in *DeleteFederatedEntryRequest, opts ...grpc.CallOption) (*DeleteFederatedEntryResponse, error) {
	out := new(DeleteFederatedEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteFederatedEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateAttestedNodeEntry(ctx context.Context, in *CreateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*CreateAttestedNodeEntryResponse, error) {
	out := new(CreateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchAttestedNodeEntry(ctx context.Context, in *FetchAttestedNodeEntryRequest, opts ...grpc.CallOption) (*FetchAttestedNodeEntryResponse, error) {
	out := new(FetchAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchStaleNodeEntries(ctx context.Context, in *FetchStaleNodeEntriesRequest, opts ...grpc.CallOption) (*FetchStaleNodeEntriesResponse, error) {
	out := new(FetchStaleNodeEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchStaleNodeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateAttestedNodeEntry(ctx context.Context, in *UpdateAttestedNodeEntryRequest, opts ...grpc.CallOption) (*UpdateAttestedNodeEntryResponse, error) {
	out := new(UpdateAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteAttestedNodeEntry(ctx context.Context, in *DeleteAttestedNodeEntryRequest, opts ...grpc.CallOption) (*DeleteAttestedNodeEntryResponse, error) {
	out := new(DeleteAttestedNodeEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteAttestedNodeEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateNodeResolverMapEntry(ctx context.Context, in *CreateNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*CreateNodeResolverMapEntryResponse, error) {
	out := new(CreateNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchNodeResolverMapEntry(ctx context.Context, in *FetchNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*FetchNodeResolverMapEntryResponse, error) {
	out := new(FetchNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteNodeResolverMapEntry(ctx context.Context, in *DeleteNodeResolverMapEntryRequest, opts ...grpc.CallOption) (*DeleteNodeResolverMapEntryResponse, error) {
	out := new(DeleteNodeResolverMapEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteNodeResolverMapEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) RectifyNodeResolverMapEntries(ctx context.Context, in *RectifyNodeResolverMapEntriesRequest, opts ...grpc.CallOption) (*RectifyNodeResolverMapEntriesResponse, error) {
	out := new(RectifyNodeResolverMapEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/RectifyNodeResolverMapEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) CreateRegistrationEntry(ctx context.Context, in *CreateRegistrationEntryRequest, opts ...grpc.CallOption) (*CreateRegistrationEntryResponse, error) {
	out := new(CreateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/CreateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) FetchRegistrationEntry(ctx context.Context, in *FetchRegistrationEntryRequest, opts ...grpc.CallOption) (*FetchRegistrationEntryResponse, error) {
	out := new(FetchRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/FetchRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) UpdateRegistrationEntry(ctx context.Context, in *UpdateRegistrationEntryRequest, opts ...grpc.CallOption) (*UpdateRegistrationEntryResponse, error) {
	out := new(UpdateRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/UpdateRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) DeleteRegistrationEntry(ctx context.Context, in *DeleteRegistrationEntryRequest, opts ...grpc.CallOption) (*DeleteRegistrationEntryResponse, error) {
	out := new(DeleteRegistrationEntryResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/DeleteRegistrationEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListParentIDEntries(ctx context.Context, in *ListParentIDEntriesRequest, opts ...grpc.CallOption) (*ListParentIDEntriesResponse, error) {
	out := new(ListParentIDEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListParentIDEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSelectorEntries(ctx context.Context, in *ListSelectorEntriesRequest, opts ...grpc.CallOption) (*ListSelectorEntriesResponse, error) {
	out := new(ListSelectorEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListSelectorEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) ListSpiffeEntries(ctx context.Context, in *ListSpiffeEntriesRequest, opts ...grpc.CallOption) (*ListSpiffeEntriesResponse, error) {
	out := new(ListSpiffeEntriesResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/ListSpiffeEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) Configure(ctx context.Context, in *spire_common_plugin.ConfigureRequest, opts ...grpc.CallOption) (*spire_common_plugin.ConfigureResponse, error) {
	out := new(spire_common_plugin.ConfigureResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataStoreClient) GetPluginInfo(ctx context.Context, in *spire_common_plugin.GetPluginInfoRequest, opts ...grpc.CallOption) (*spire_common_plugin.GetPluginInfoResponse, error) {
	out := new(spire_common_plugin.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/spire.server.datastore.DataStore/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DataStore service

type DataStoreServer interface {
	// * Creates a Federated Bundle
	CreateFederatedEntry(context.Context, *CreateFederatedEntryRequest) (*CreateFederatedEntryResponse, error)
	// * List all Federated SPIFFE IDs
	ListFederatedEntry(context.Context, *ListFederatedEntryRequest) (*ListFederatedEntryResponse, error)
	// * Updates the specified Federated Bundle
	UpdateFederatedEntry(context.Context, *UpdateFederatedEntryRequest) (*UpdateFederatedEntryResponse, error)
	// * Deletes the specified Federated Bundle
	DeleteFederatedEntry(context.Context, *DeleteFederatedEntryRequest) (*DeleteFederatedEntryResponse, error)
	// * Creates an Attested Node Entry
	CreateAttestedNodeEntry(context.Context, *CreateAttestedNodeEntryRequest) (*CreateAttestedNodeEntryResponse, error)
	// * Retrieves the Attested Node Entry
	FetchAttestedNodeEntry(context.Context, *FetchAttestedNodeEntryRequest) (*FetchAttestedNodeEntryResponse, error)
	// * Retrieves dead nodes for which the base SVID has expired
	FetchStaleNodeEntries(context.Context, *FetchStaleNodeEntriesRequest) (*FetchStaleNodeEntriesResponse, error)
	// * Updates the Attested Node Entry
	UpdateAttestedNodeEntry(context.Context, *UpdateAttestedNodeEntryRequest) (*UpdateAttestedNodeEntryResponse, error)
	// * Deletes the Attested Node Entry
	DeleteAttestedNodeEntry(context.Context, *DeleteAttestedNodeEntryRequest) (*DeleteAttestedNodeEntryResponse, error)
	// * Creates a Node resolver map Entry
	CreateNodeResolverMapEntry(context.Context, *CreateNodeResolverMapEntryRequest) (*CreateNodeResolverMapEntryResponse, error)
	// * Retrieves all Node Resolver Map Entry for the specific base SPIFFEID
	FetchNodeResolverMapEntry(context.Context, *FetchNodeResolverMapEntryRequest) (*FetchNodeResolverMapEntryResponse, error)
	// * Deletes all Node Resolver Map Entry for the specific base SPIFFEID
	DeleteNodeResolverMapEntry(context.Context, *DeleteNodeResolverMapEntryRequest) (*DeleteNodeResolverMapEntryResponse, error)
	// * Used for rectifying updated node resolutions
	RectifyNodeResolverMapEntries(context.Context, *RectifyNodeResolverMapEntriesRequest) (*RectifyNodeResolverMapEntriesResponse, error)
	// * Creates a Registered Entry
	CreateRegistrationEntry(context.Context, *CreateRegistrationEntryRequest) (*CreateRegistrationEntryResponse, error)
	// * Retrieve a specific registered entry
	FetchRegistrationEntry(context.Context, *FetchRegistrationEntryRequest) (*FetchRegistrationEntryResponse, error)
	// * Updates a specific registered entry
	UpdateRegistrationEntry(context.Context, *UpdateRegistrationEntryRequest) (*UpdateRegistrationEntryResponse, error)
	// * Deletes a specific registered entry
	DeleteRegistrationEntry(context.Context, *DeleteRegistrationEntryRequest) (*DeleteRegistrationEntryResponse, error)
	// * Retrieves all the  registered entry with the same ParentID
	ListParentIDEntries(context.Context, *ListParentIDEntriesRequest) (*ListParentIDEntriesResponse, error)
	// * Retrieves all the  registered entry with the same Selector
	ListSelectorEntries(context.Context, *ListSelectorEntriesRequest) (*ListSelectorEntriesResponse, error)
	// * Retrieves all the  registered entry with the same SpiffeId
	ListSpiffeEntries(context.Context, *ListSpiffeEntriesRequest) (*ListSpiffeEntriesResponse, error)
	// * Applies the plugin configuration
	Configure(context.Context, *spire_common_plugin.ConfigureRequest) (*spire_common_plugin.ConfigureResponse, error)
	// * Returns the version and related metadata of the installed plugin
	GetPluginInfo(context.Context, *spire_common_plugin.GetPluginInfoRequest) (*spire_common_plugin.GetPluginInfoResponse, error)
}

func RegisterDataStoreServer(s *grpc.Server, srv DataStoreServer) {
	s.RegisterService(&_DataStore_serviceDesc, srv)
}

func _DataStore_CreateFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateFederatedEntry(ctx, req.(*CreateFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListFederatedEntry(ctx, req.(*ListFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateFederatedEntry(ctx, req.(*UpdateFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteFederatedEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteFederatedEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteFederatedEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteFederatedEntry(ctx, req.(*DeleteFederatedEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateAttestedNodeEntry(ctx, req.(*CreateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchAttestedNodeEntry(ctx, req.(*FetchAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchStaleNodeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchStaleNodeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchStaleNodeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchStaleNodeEntries(ctx, req.(*FetchStaleNodeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateAttestedNodeEntry(ctx, req.(*UpdateAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteAttestedNodeEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttestedNodeEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteAttestedNodeEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteAttestedNodeEntry(ctx, req.(*DeleteAttestedNodeEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateNodeResolverMapEntry(ctx, req.(*CreateNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchNodeResolverMapEntry(ctx, req.(*FetchNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteNodeResolverMapEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeResolverMapEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteNodeResolverMapEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteNodeResolverMapEntry(ctx, req.(*DeleteNodeResolverMapEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_RectifyNodeResolverMapEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RectifyNodeResolverMapEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/RectifyNodeResolverMapEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).RectifyNodeResolverMapEntries(ctx, req.(*RectifyNodeResolverMapEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_CreateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/CreateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).CreateRegistrationEntry(ctx, req.(*CreateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_FetchRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/FetchRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).FetchRegistrationEntry(ctx, req.(*FetchRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_UpdateRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/UpdateRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).UpdateRegistrationEntry(ctx, req.(*UpdateRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_DeleteRegistrationEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRegistrationEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/DeleteRegistrationEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).DeleteRegistrationEntry(ctx, req.(*DeleteRegistrationEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListParentIDEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListParentIDEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListParentIDEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListParentIDEntries(ctx, req.(*ListParentIDEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSelectorEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSelectorEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListSelectorEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSelectorEntries(ctx, req.(*ListSelectorEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_ListSpiffeEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpiffeEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/ListSpiffeEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).ListSpiffeEntries(ctx, req.(*ListSpiffeEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spire_common_plugin.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).Configure(ctx, req.(*spire_common_plugin.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataStore_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(spire_common_plugin.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataStoreServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spire.server.datastore.DataStore/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataStoreServer).GetPluginInfo(ctx, req.(*spire_common_plugin.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spire.server.datastore.DataStore",
	HandlerType: (*DataStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFederatedEntry",
			Handler:    _DataStore_CreateFederatedEntry_Handler,
		},
		{
			MethodName: "ListFederatedEntry",
			Handler:    _DataStore_ListFederatedEntry_Handler,
		},
		{
			MethodName: "UpdateFederatedEntry",
			Handler:    _DataStore_UpdateFederatedEntry_Handler,
		},
		{
			MethodName: "DeleteFederatedEntry",
			Handler:    _DataStore_DeleteFederatedEntry_Handler,
		},
		{
			MethodName: "CreateAttestedNodeEntry",
			Handler:    _DataStore_CreateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchAttestedNodeEntry",
			Handler:    _DataStore_FetchAttestedNodeEntry_Handler,
		},
		{
			MethodName: "FetchStaleNodeEntries",
			Handler:    _DataStore_FetchStaleNodeEntries_Handler,
		},
		{
			MethodName: "UpdateAttestedNodeEntry",
			Handler:    _DataStore_UpdateAttestedNodeEntry_Handler,
		},
		{
			MethodName: "DeleteAttestedNodeEntry",
			Handler:    _DataStore_DeleteAttestedNodeEntry_Handler,
		},
		{
			MethodName: "CreateNodeResolverMapEntry",
			Handler:    _DataStore_CreateNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "FetchNodeResolverMapEntry",
			Handler:    _DataStore_FetchNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "DeleteNodeResolverMapEntry",
			Handler:    _DataStore_DeleteNodeResolverMapEntry_Handler,
		},
		{
			MethodName: "RectifyNodeResolverMapEntries",
			Handler:    _DataStore_RectifyNodeResolverMapEntries_Handler,
		},
		{
			MethodName: "CreateRegistrationEntry",
			Handler:    _DataStore_CreateRegistrationEntry_Handler,
		},
		{
			MethodName: "FetchRegistrationEntry",
			Handler:    _DataStore_FetchRegistrationEntry_Handler,
		},
		{
			MethodName: "UpdateRegistrationEntry",
			Handler:    _DataStore_UpdateRegistrationEntry_Handler,
		},
		{
			MethodName: "DeleteRegistrationEntry",
			Handler:    _DataStore_DeleteRegistrationEntry_Handler,
		},
		{
			MethodName: "ListParentIDEntries",
			Handler:    _DataStore_ListParentIDEntries_Handler,
		},
		{
			MethodName: "ListSelectorEntries",
			Handler:    _DataStore_ListSelectorEntries_Handler,
		},
		{
			MethodName: "ListSpiffeEntries",
			Handler:    _DataStore_ListSpiffeEntries_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _DataStore_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _DataStore_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "datastore.proto",
}

func init() { proto.RegisterFile("datastore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1276 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x59, 0x5f, 0x6f, 0x1b, 0x45,
	0x10, 0x67, 0x1b, 0x40, 0xf5, 0xa4, 0x28, 0xcd, 0x36, 0x4d, 0xdc, 0x4b, 0x9a, 0xa4, 0x27, 0x0a,
	0x69, 0x55, 0x1c, 0xea, 0xa4, 0x21, 0x45, 0x20, 0x41, 0xe3, 0x06, 0x45, 0xa2, 0x21, 0x5c, 0x8a,
	0x2a, 0xf5, 0x01, 0xb8, 0xd8, 0xeb, 0xe4, 0x14, 0xe7, 0xee, 0xba, 0xb7, 0xae, 0x9a, 0x20, 0x21,
	0x90, 0xf8, 0x23, 0x21, 0x81, 0x5a, 0xf1, 0x54, 0x89, 0x07, 0xbe, 0x09, 0x5f, 0x0d, 0xdd, 0xdd,
	0xde, 0x11, 0xdf, 0xed, 0xec, 0xf9, 0xdc, 0xd8, 0x3c, 0xd9, 0xde, 0xd9, 0x99, 0xf9, 0xcd, 0xec,
	0xee, 0xec, 0xfc, 0xd6, 0x30, 0xd1, 0xb2, 0x85, 0x1d, 0x08, 0x8f, 0xb3, 0x9a, 0xcf, 0x3d, 0xe1,
	0xd1, 0xe9, 0xc0, 0x77, 0x38, 0xab, 0x05, 0x8c, 0x3f, 0x65, 0xbc, 0x96, 0x4a, 0x8d, 0xd5, 0x7d,
	0x47, 0x1c, 0x74, 0xf7, 0x6a, 0x4d, 0xef, 0x68, 0x39, 0xf0, 0x9d, 0x76, 0x9b, 0x2d, 0x07, 0xdc,
	0x59, 0xf6, 0x0f, 0xf7, 0x97, 0x9b, 0xde, 0xd1, 0x91, 0xe7, 0x2e, 0xfb, 0x9d, 0xee, 0xbe, 0x93,
	0x7c, 0xc4, 0xd6, 0x8c, 0xf7, 0x0a, 0xb5, 0xe2, 0x8f, 0x78, 0xba, 0xf9, 0x82, 0xc0, 0xc4, 0x26,
	0x6b, 0x31, 0x6e, 0x0b, 0xd6, 0xba, 0xd7, 0x75, 0x5b, 0x1d, 0x46, 0xd7, 0x61, 0xa6, 0xdd, 0x3b,
	0xb4, 0x1b, 0x19, 0xda, 0x6a, 0x55, 0xc9, 0x22, 0x59, 0xaa, 0x58, 0x98, 0x98, 0xd6, 0x61, 0x2a,
	0x15, 0x3d, 0xe4, 0xdd, 0x40, 0xc4, 0xf2, 0xea, 0xb9, 0x45, 0xb2, 0x74, 0xc1, 0x52, 0xca, 0xe8,
	0x45, 0x18, 0x13, 0xa2, 0x53, 0x1d, 0x5b, 0x24, 0x4b, 0x6f, 0x58, 0xe1, 0x57, 0xd3, 0x85, 0xa9,
	0x6d, 0xaf, 0xc5, 0x2c, 0x16, 0x78, 0x9d, 0xa7, 0x8c, 0x3f, 0xb0, 0xfd, 0xfb, 0xae, 0xe0, 0xc7,
	0xd4, 0x84, 0x0b, 0x7b, 0x76, 0x90, 0x05, 0xd3, 0x33, 0x46, 0xeb, 0x70, 0x3e, 0x60, 0x1d, 0xd6,
	0x14, 0x1e, 0x8f, 0xbc, 0x8e, 0xd7, 0xa7, 0x6b, 0x71, 0x7e, 0x65, 0xd8, 0xbb, 0x52, 0x6a, 0xa5,
	0xf3, 0xcc, 0x7f, 0x08, 0x4c, 0x7e, 0x2a, 0x04, 0x0b, 0x04, 0x6b, 0x85, 0x8e, 0xfb, 0xf7, 0x76,
	0x13, 0x2e, 0xda, 0x52, 0xb1, 0x61, 0x0b, 0xfb, 0xe1, 0xb1, 0x1f, 0xc7, 0x5a, 0xb1, 0x72, 0xe3,
	0xe1, 0xdc, 0x26, 0xe3, 0x62, 0x97, 0x71, 0xc7, 0xee, 0x6c, 0x77, 0x8f, 0xf6, 0x18, 0x8f, 0x82,
	0xae, 0x58, 0xb9, 0x71, 0x5a, 0x03, 0x1a, 0x8e, 0xdd, 0x7f, 0xe6, 0x3b, 0xdc, 0x16, 0x8e, 0xe7,
	0x36, 0x6c, 0xc1, 0xaa, 0xaf, 0x47, 0xb3, 0x15, 0x12, 0xd3, 0x87, 0xd9, 0x0d, 0xce, 0x6c, 0xc1,
	0xd2, 0xa5, 0x8c, 0x62, 0xb0, 0xd8, 0x93, 0x2e, 0x0b, 0x04, 0xfd, 0x12, 0x26, 0x32, 0x2b, 0x16,
	0x45, 0x33, 0x5e, 0x7f, 0xb7, 0xa6, 0xde, 0x7b, 0xb5, 0xcc, 0x96, 0xb0, 0xb2, 0xfa, 0xe6, 0x3c,
	0xcc, 0xa9, 0x3d, 0x06, 0xbe, 0xe7, 0x06, 0xcc, 0x9c, 0x85, 0x2b, 0x9f, 0x3b, 0x81, 0x50, 0xe2,
	0x31, 0xbf, 0x06, 0x43, 0x25, 0x8c, 0x55, 0xe9, 0x27, 0x30, 0x8b, 0xec, 0xaf, 0x50, 0xa9, 0x4a,
	0x16, 0xc7, 0x96, 0x2a, 0x96, 0x6e, 0x4a, 0x98, 0x8e, 0xaf, 0xfc, 0xd6, 0x28, 0xd3, 0xf1, 0x04,
	0xe6, 0xd4, 0x1e, 0x65, 0x4c, 0x43, 0x70, 0xf9, 0x08, 0x66, 0x1b, 0xac, 0xc3, 0xb0, 0x20, 0x07,
	0x3e, 0xc4, 0x61, 0x2c, 0x6a, 0xc3, 0xc3, 0x8b, 0xe5, 0x18, 0xe6, 0xe3, 0xdd, 0x94, 0x3b, 0x86,
	0x49, 0x38, 0x8f, 0x60, 0xd2, 0xce, 0xca, 0xa4, 0xdb, 0x1b, 0x98, 0xdb, 0xbc, 0xb1, 0xbc, 0x0d,
	0xf3, 0x04, 0x16, 0x50, 0xd7, 0x32, 0xe0, 0xa1, 0xf9, 0xde, 0x80, 0xab, 0x9b, 0x4c, 0x34, 0x0f,
	0xd0, 0xa8, 0xfb, 0xa8, 0x41, 0x61, 0xee, 0x30, 0x23, 0xc3, 0xc6, 0x3f, 0x0f, 0x73, 0x91, 0xeb,
	0x5d, 0x61, 0x77, 0x58, 0x32, 0xec, 0xb0, 0x20, 0x39, 0xe7, 0x3f, 0x10, 0x19, 0x60, 0x7e, 0x82,
	0x84, 0xf6, 0x0d, 0x5c, 0xce, 0x99, 0x4d, 0x4f, 0x79, 0x29, 0x78, 0x6a, 0x3b, 0xe6, 0xdf, 0x04,
	0xe6, 0xe3, 0x93, 0xf9, 0x2a, 0x49, 0x56, 0x16, 0xef, 0x73, 0xa5, 0x8a, 0xf7, 0x18, 0x5a, 0xbc,
	0x4f, 0x60, 0x01, 0x45, 0x38, 0xec, 0x15, 0x6c, 0xc0, 0x7c, 0x7c, 0xd6, 0x5f, 0x69, 0x0b, 0x9e,
	0xc0, 0x02, 0x6a, 0x65, 0xd8, 0x11, 0xfc, 0x4c, 0xe0, 0x5a, 0x7c, 0x80, 0x55, 0x3d, 0x43, 0x12,
	0xc5, 0xb7, 0x30, 0xe5, 0x2a, 0xc4, 0x12, 0xc1, 0x2d, 0x0c, 0x81, 0xd2, 0xa4, 0xd2, 0x92, 0xf9,
	0x0b, 0x01, 0x53, 0x87, 0x43, 0xe6, 0x61, 0xf8, 0x40, 0x36, 0x61, 0x31, 0x3a, 0x73, 0xba, 0x74,
	0xf4, 0xb3, 0xa8, 0xbf, 0x13, 0xb8, 0xa6, 0x31, 0x24, 0xe3, 0x39, 0x80, 0xaa, 0x0a, 0xc5, 0xa9,
	0x33, 0x5c, 0x2e, 0x26, 0xd4, 0x5a, 0xb4, 0xd0, 0xf1, 0x2e, 0xfb, 0x7f, 0x17, 0xfa, 0x0f, 0x02,
	0xa6, 0x0e, 0xc7, 0xc8, 0x13, 0xf3, 0x9c, 0xc0, 0xdb, 0x16, 0x6b, 0x0a, 0xa7, 0x7d, 0xac, 0xd0,
	0xfc, 0xaf, 0x1c, 0x8f, 0x10, 0xd2, 0x0b, 0x02, 0xd7, 0x0b, 0x20, 0x8d, 0x3c, 0x4d, 0x87, 0x49,
	0x8f, 0x61, 0xb1, 0x7d, 0x27, 0x10, 0x71, 0x01, 0xee, 0xd9, 0x3b, 0x5b, 0x30, 0xc1, 0x23, 0x19,
	0xe3, 0xb2, 0xe7, 0x91, 0xdb, 0x66, 0xa1, 0x97, 0x42, 0xe4, 0x0d, 0x64, 0xf5, 0xcc, 0x2f, 0x92,
	0xae, 0x42, 0xe1, 0x4c, 0x46, 0x7e, 0x0b, 0x26, 0x33, 0x5a, 0xe9, 0x41, 0xcc, 0x0b, 0xcc, 0x07,
	0xf2, 0x26, 0x45, 0xc1, 0x97, 0x33, 0x77, 0x28, 0x9b, 0x06, 0x1c, 0xde, 0x19, 0x26, 0xe3, 0x65,
	0x7a, 0x07, 0x9f, 0x0d, 0x7a, 0x15, 0xb6, 0x73, 0x03, 0x62, 0xeb, 0x24, 0x97, 0xef, 0x48, 0x32,
	0xb1, 0x9d, 0x5c, 0xb7, 0x67, 0xb4, 0x8c, 0x9d, 0xe4, 0xe2, 0x1d, 0x09, 0xfa, 0xf5, 0x98, 0xb6,
	0xed, 0xd8, 0x9c, 0xb9, 0x62, 0xab, 0x91, 0xa9, 0x2e, 0x06, 0x9c, 0xf7, 0x63, 0x49, 0x02, 0x38,
	0xfd, 0x1d, 0x12, 0x32, 0xa5, 0x66, 0xca, 0x28, 0x2e, 0x65, 0x7c, 0x9d, 0x3a, 0xff, 0x85, 0x38,
	0x55, 0xba, 0xe6, 0x4e, 0x8c, 0x35, 0x61, 0xfb, 0x19, 0xac, 0xa7, 0x5f, 0x09, 0x48, 0x9f, 0xaf,
	0x04, 0x32, 0x86, 0x9c, 0xc5, 0xe1, 0xc5, 0xb0, 0x06, 0xd5, 0xc8, 0x63, 0x74, 0x23, 0xe7, 0xb3,
	0x1d, 0xf4, 0xde, 0xde, 0xe9, 0x6f, 0xd3, 0x8d, 0xb9, 0x77, 0x46, 0x6f, 0x68, 0x38, 0xeb, 0x2f,
	0x67, 0xa0, 0xd2, 0xb0, 0x85, 0xbd, 0x1b, 0x96, 0x65, 0xfa, 0x23, 0x81, 0x29, 0xd5, 0xd3, 0x00,
	0x5d, 0xc1, 0x0a, 0xb9, 0xe6, 0xe9, 0xc2, 0x58, 0x2d, 0xa7, 0x24, 0x83, 0xfc, 0x0e, 0x68, 0xfe,
	0x81, 0x81, 0xde, 0xc6, 0x6c, 0xa1, 0x2f, 0x15, 0x46, 0xbd, 0x8c, 0x8a, 0x74, 0x1e, 0x26, 0x40,
	0xf5, 0x18, 0x80, 0x27, 0x40, 0xf3, 0x58, 0x81, 0x27, 0x40, 0xfb, 0xde, 0x10, 0x62, 0x50, 0x91,
	0x78, 0x1c, 0x83, 0xe6, 0x2d, 0x01, 0xc7, 0xa0, 0x7d, 0x27, 0xf8, 0x8d, 0xc0, 0x0c, 0x42, 0xad,
	0xe9, 0x9a, 0x7e, 0x59, 0x31, 0x36, 0x62, 0x7c, 0x50, 0x5a, 0x4f, 0x82, 0xf9, 0x95, 0xc0, 0xb4,
	0x9a, 0x26, 0xd3, 0x3b, 0xf8, 0xb3, 0x85, 0x86, 0x9b, 0x1b, 0x6b, 0x65, 0xd5, 0x24, 0x92, 0x9f,
	0x08, 0x5c, 0x56, 0x92, 0x62, 0xba, 0xaa, 0xb5, 0x88, 0x90, 0x6c, 0xe3, 0x4e, 0x49, 0xad, 0x53,
	0xab, 0x83, 0xd0, 0x4e, 0x7c, 0x75, 0xf4, 0x4c, 0x1a, 0x5f, 0x9d, 0x22, 0x7e, 0x1b, 0x82, 0x41,
	0x18, 0x24, 0x0e, 0x46, 0x4f, 0x5c, 0x71, 0x30, 0x45, 0x54, 0xf5, 0x4f, 0x02, 0x06, 0xce, 0xe4,
	0xe8, 0x5d, 0xfd, 0x16, 0xd4, 0x90, 0x13, 0xe3, 0xc3, 0x41, 0x54, 0x25, 0xaa, 0xe7, 0x04, 0xae,
	0xa0, 0x74, 0x8c, 0xae, 0x6b, 0x37, 0x81, 0x0e, 0xd3, 0xdd, 0x01, 0x34, 0x4f, 0x25, 0x0a, 0x67,
	0x42, 0x78, 0xa2, 0x0a, 0x59, 0x1c, 0x9e, 0xa8, 0x3e, 0x88, 0xd7, 0x5f, 0x04, 0xae, 0x6a, 0xb9,
	0x07, 0xfd, 0x08, 0xb3, 0xde, 0x0f, 0x8b, 0x32, 0x3e, 0x1e, 0x50, 0x3b, 0x57, 0x15, 0x73, 0xb7,
	0x6b, 0x51, 0x55, 0xc4, 0x9a, 0xc6, 0xa2, 0xaa, 0x88, 0x37, 0x87, 0x69, 0x55, 0xcc, 0x63, 0xd1,
	0x97, 0x15, 0x14, 0xca, 0x5a, 0x59, 0xb5, 0x5c, 0x39, 0x2a, 0x91, 0x16, 0x3d, 0xa9, 0x28, 0x2a,
	0x47, 0x7a, 0x30, 0x48, 0x5f, 0x5d, 0x54, 0x8e, 0xca, 0x83, 0x29, 0x6a, 0xe0, 0xbf, 0x87, 0x4b,
	0x8a, 0xde, 0x99, 0x6a, 0x3b, 0x13, 0x75, 0x8b, 0x6e, 0xac, 0x94, 0xd2, 0xe9, 0xf5, 0x9f, 0xe9,
	0x7b, 0xf5, 0xfe, 0xd5, 0x6d, 0xb7, 0xde, 0x3f, 0xd6, 0x58, 0x3f, 0x83, 0xc9, 0x5c, 0x37, 0x4b,
	0xdf, 0xd7, 0x5a, 0x52, 0x34, 0xcc, 0xc6, 0xed, 0x12, 0x1a, 0xd2, 0xf3, 0x63, 0xa8, 0x6c, 0x78,
	0x6e, 0xdb, 0xd9, 0xef, 0x72, 0x46, 0xaf, 0xf7, 0xb6, 0xc6, 0xf2, 0x3f, 0xd7, 0x54, 0x9e, 0xb8,
	0x79, 0xa7, 0x68, 0x9a, 0xb4, 0xdd, 0x86, 0xb7, 0x3e, 0x63, 0x62, 0x27, 0x12, 0x6f, 0xb9, 0x6d,
	0x8f, 0xde, 0x50, 0x2a, 0xf6, 0xcc, 0x49, 0x7c, 0xdc, 0xec, 0x67, 0x6a, 0xec, 0xe7, 0xde, 0xf8,
	0xe3, 0x4a, 0x1a, 0xea, 0xce, 0x6b, 0x3b, 0x64, 0xef, 0xcd, 0xe8, 0x7f, 0xdf, 0x95, 0x7f, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x31, 0xed, 0xa9, 0xca, 0x87, 0x1e, 0x00, 0x00,
}
