// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package node is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	Svid
	SvidUpdate
	FetchBaseSVIDRequest
	FetchBaseSVIDResponse
	FetchSVIDRequest
	FetchSVIDResponse
	FetchCPBundleRequest
	FetchCPBundleResponse
	FetchFederatedBundleRequest
	FetchFederatedBundleResponse
*/
package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import common "github.com/spiffe/sri/pkg/common"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Empty from public import github.com/spiffe/sri/pkg/common/common.proto
type Empty common.Empty

func (m *Empty) Reset()         { (*common.Empty)(m).Reset() }
func (m *Empty) String() string { return (*common.Empty)(m).String() }
func (*Empty) ProtoMessage()    {}

// AttestedData from public import github.com/spiffe/sri/pkg/common/common.proto
type AttestedData common.AttestedData

func (m *AttestedData) Reset()          { (*common.AttestedData)(m).Reset() }
func (m *AttestedData) String() string  { return (*common.AttestedData)(m).String() }
func (*AttestedData) ProtoMessage()     {}
func (m *AttestedData) GetType() string { return (*common.AttestedData)(m).GetType() }
func (m *AttestedData) GetData() []byte { return (*common.AttestedData)(m).GetData() }

// Selector from public import github.com/spiffe/sri/pkg/common/common.proto
type Selector common.Selector

func (m *Selector) Reset()           { (*common.Selector)(m).Reset() }
func (m *Selector) String() string   { return (*common.Selector)(m).String() }
func (*Selector) ProtoMessage()      {}
func (m *Selector) GetType() string  { return (*common.Selector)(m).GetType() }
func (m *Selector) GetValue() string { return (*common.Selector)(m).GetValue() }

// Selectors from public import github.com/spiffe/sri/pkg/common/common.proto
type Selectors common.Selectors

func (m *Selectors) Reset()         { (*common.Selectors)(m).Reset() }
func (m *Selectors) String() string { return (*common.Selectors)(m).String() }
func (*Selectors) ProtoMessage()    {}
func (m *Selectors) GetEntries() []*Selector {
	o := (*common.Selectors)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}

// RegistrationEntry from public import github.com/spiffe/sri/pkg/common/common.proto
type RegistrationEntry common.RegistrationEntry

func (m *RegistrationEntry) Reset()         { (*common.RegistrationEntry)(m).Reset() }
func (m *RegistrationEntry) String() string { return (*common.RegistrationEntry)(m).String() }
func (*RegistrationEntry) ProtoMessage()    {}
func (m *RegistrationEntry) GetSelectors() []*Selector {
	o := (*common.RegistrationEntry)(m).GetSelectors()
	if o == nil {
		return nil
	}
	s := make([]*Selector, len(o))
	for i, x := range o {
		s[i] = (*Selector)(x)
	}
	return s
}
func (m *RegistrationEntry) GetParentId() string { return (*common.RegistrationEntry)(m).GetParentId() }
func (m *RegistrationEntry) GetSpiffeId() string { return (*common.RegistrationEntry)(m).GetSpiffeId() }
func (m *RegistrationEntry) GetTtl() int32       { return (*common.RegistrationEntry)(m).GetTtl() }
func (m *RegistrationEntry) GetFbSpiffeIds() []string {
	return (*common.RegistrationEntry)(m).GetFbSpiffeIds()
}

// RegistrationEntries from public import github.com/spiffe/sri/pkg/common/common.proto
type RegistrationEntries common.RegistrationEntries

func (m *RegistrationEntries) Reset()         { (*common.RegistrationEntries)(m).Reset() }
func (m *RegistrationEntries) String() string { return (*common.RegistrationEntries)(m).String() }
func (*RegistrationEntries) ProtoMessage()    {}
func (m *RegistrationEntries) GetEntries() []*RegistrationEntry {
	o := (*common.RegistrationEntries)(m).GetEntries()
	if o == nil {
		return nil
	}
	s := make([]*RegistrationEntry, len(o))
	for i, x := range o {
		s[i] = (*RegistrationEntry)(x)
	}
	return s
}

// *A type which contains the "Spiffe Verifiable Identity Document" and a TTL indicating when the SVID expires.
type Svid struct {
	SvidCert []byte `protobuf:"bytes,1,opt,name=svid_cert,json=svidCert,proto3" json:"svid_cert,omitempty"`
	Ttl      int32  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Svid) Reset()                    { *m = Svid{} }
func (m *Svid) String() string            { return proto.CompactTextString(m) }
func (*Svid) ProtoMessage()               {}
func (*Svid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Svid) GetSvidCert() []byte {
	if m != nil {
		return m.SvidCert
	}
	return nil
}

func (m *Svid) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// *A message returned by the Spire Server, which includes a map of signed SVIDs and
// a list of all current Registration Entries which are relevant to the caller SPIFFE ID.
type SvidUpdate struct {
	Svids               map[string]*Svid            `protobuf:"bytes,1,rep,name=svids" json:"svids,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	RegistrationEntries []*common.RegistrationEntry `protobuf:"bytes,2,rep,name=registration_entries,json=registrationEntries" json:"registration_entries,omitempty"`
}

func (m *SvidUpdate) Reset()                    { *m = SvidUpdate{} }
func (m *SvidUpdate) String() string            { return proto.CompactTextString(m) }
func (*SvidUpdate) ProtoMessage()               {}
func (*SvidUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SvidUpdate) GetSvids() map[string]*Svid {
	if m != nil {
		return m.Svids
	}
	return nil
}

func (m *SvidUpdate) GetRegistrationEntries() []*common.RegistrationEntry {
	if m != nil {
		return m.RegistrationEntries
	}
	return nil
}

// *Represents a request to attest the node.
type FetchBaseSVIDRequest struct {
	AttestedData *common.AttestedData `protobuf:"bytes,1,opt,name=attested_data,json=attestedData" json:"attested_data,omitempty"`
	Csr          []byte               `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (m *FetchBaseSVIDRequest) Reset()                    { *m = FetchBaseSVIDRequest{} }
func (m *FetchBaseSVIDRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchBaseSVIDRequest) ProtoMessage()               {}
func (*FetchBaseSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchBaseSVIDRequest) GetAttestedData() *common.AttestedData {
	if m != nil {
		return m.AttestedData
	}
	return nil
}

func (m *FetchBaseSVIDRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

// *Represents a response that contains  map of signed SVIDs and an array of all current Registration Entries which are relevant to the caller SPIFFE ID
type FetchBaseSVIDResponse struct {
	SvidUpdate *SvidUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate" json:"svid_update,omitempty"`
}

func (m *FetchBaseSVIDResponse) Reset()                    { *m = FetchBaseSVIDResponse{} }
func (m *FetchBaseSVIDResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchBaseSVIDResponse) ProtoMessage()               {}
func (*FetchBaseSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchBaseSVIDResponse) GetSvidUpdate() *SvidUpdate {
	if m != nil {
		return m.SvidUpdate
	}
	return nil
}

// *Represents a request with a list of CSR.
type FetchSVIDRequest struct {
	Csrs [][]byte `protobuf:"bytes,2,rep,name=csrs,proto3" json:"csrs,omitempty"`
}

func (m *FetchSVIDRequest) Reset()                    { *m = FetchSVIDRequest{} }
func (m *FetchSVIDRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchSVIDRequest) ProtoMessage()               {}
func (*FetchSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FetchSVIDRequest) GetCsrs() [][]byte {
	if m != nil {
		return m.Csrs
	}
	return nil
}

// *Represents a response that contains  map of signed SVIDs and an array of all current Registration Entries which are relevant to the caller SPIFFE ID.
type FetchSVIDResponse struct {
	SvidUpdate *SvidUpdate `protobuf:"bytes,1,opt,name=svid_update,json=svidUpdate" json:"svid_update,omitempty"`
}

func (m *FetchSVIDResponse) Reset()                    { *m = FetchSVIDResponse{} }
func (m *FetchSVIDResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchSVIDResponse) ProtoMessage()               {}
func (*FetchSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchSVIDResponse) GetSvidUpdate() *SvidUpdate {
	if m != nil {
		return m.SvidUpdate
	}
	return nil
}

// *Represents an empty message.
type FetchCPBundleRequest struct {
}

func (m *FetchCPBundleRequest) Reset()                    { *m = FetchCPBundleRequest{} }
func (m *FetchCPBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchCPBundleRequest) ProtoMessage()               {}
func (*FetchCPBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

// *Represents a response with a Spire Server certificate bundle.
type FetchCPBundleResponse struct {
	ServerBundle []byte `protobuf:"bytes,1,opt,name=server_bundle,json=serverBundle,proto3" json:"server_bundle,omitempty"`
}

func (m *FetchCPBundleResponse) Reset()                    { *m = FetchCPBundleResponse{} }
func (m *FetchCPBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchCPBundleResponse) ProtoMessage()               {}
func (*FetchCPBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FetchCPBundleResponse) GetServerBundle() []byte {
	if m != nil {
		return m.ServerBundle
	}
	return nil
}

// *Represents a request with an array of SPIFFE Ids.
type FetchFederatedBundleRequest struct {
	SpiffeId []string `protobuf:"bytes,1,rep,name=spiffe_id,json=spiffeId" json:"spiffe_id,omitempty"`
}

func (m *FetchFederatedBundleRequest) Reset()                    { *m = FetchFederatedBundleRequest{} }
func (m *FetchFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchFederatedBundleRequest) ProtoMessage()               {}
func (*FetchFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FetchFederatedBundleRequest) GetSpiffeId() []string {
	if m != nil {
		return m.SpiffeId
	}
	return nil
}

// *Represents a response with a map of SPIFFE Id, Federated CA Bundle.
type FetchFederatedBundleResponse struct {
	FederatedBundles map[string][]byte `protobuf:"bytes,1,rep,name=federated_bundles,json=federatedBundles" json:"federated_bundles,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchFederatedBundleResponse) Reset()                    { *m = FetchFederatedBundleResponse{} }
func (m *FetchFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchFederatedBundleResponse) ProtoMessage()               {}
func (*FetchFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *FetchFederatedBundleResponse) GetFederatedBundles() map[string][]byte {
	if m != nil {
		return m.FederatedBundles
	}
	return nil
}

func init() {
	proto.RegisterType((*Svid)(nil), "node.Svid")
	proto.RegisterType((*SvidUpdate)(nil), "node.SvidUpdate")
	proto.RegisterType((*FetchBaseSVIDRequest)(nil), "node.FetchBaseSVIDRequest")
	proto.RegisterType((*FetchBaseSVIDResponse)(nil), "node.FetchBaseSVIDResponse")
	proto.RegisterType((*FetchSVIDRequest)(nil), "node.FetchSVIDRequest")
	proto.RegisterType((*FetchSVIDResponse)(nil), "node.FetchSVIDResponse")
	proto.RegisterType((*FetchCPBundleRequest)(nil), "node.FetchCPBundleRequest")
	proto.RegisterType((*FetchCPBundleResponse)(nil), "node.FetchCPBundleResponse")
	proto.RegisterType((*FetchFederatedBundleRequest)(nil), "node.FetchFederatedBundleRequest")
	proto.RegisterType((*FetchFederatedBundleResponse)(nil), "node.FetchFederatedBundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	// /Attest the node, get base node SVID.
	FetchBaseSVID(ctx context.Context, in *FetchBaseSVIDRequest, opts ...grpc.CallOption) (*FetchBaseSVIDResponse, error)
	// /Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// /(Base Node SVID or the Registered Node SVID used for this call)
	// /(List can be empty to allow Node Agent cache refresh).
	FetchSVID(ctx context.Context, in *FetchSVIDRequest, opts ...grpc.CallOption) (*FetchSVIDResponse, error)
	// /Called by Node Agent periodically to support Spire Server certificate rotation. Cached in Node Agent memory for WorkLoads as well.
	FetchCPBundle(ctx context.Context, in *FetchCPBundleRequest, opts ...grpc.CallOption) (*FetchCPBundleResponse, error)
	// /Called by the Node Agent to fetch the named Federated CA Bundle.
	// /Used in the event that authorized workloads reference a Federated Bundle.
	FetchFederatedBundle(ctx context.Context, in *FetchFederatedBundleRequest, opts ...grpc.CallOption) (*FetchFederatedBundleResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) FetchBaseSVID(ctx context.Context, in *FetchBaseSVIDRequest, opts ...grpc.CallOption) (*FetchBaseSVIDResponse, error) {
	out := new(FetchBaseSVIDResponse)
	err := grpc.Invoke(ctx, "/node.Node/FetchBaseSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchSVID(ctx context.Context, in *FetchSVIDRequest, opts ...grpc.CallOption) (*FetchSVIDResponse, error) {
	out := new(FetchSVIDResponse)
	err := grpc.Invoke(ctx, "/node.Node/FetchSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchCPBundle(ctx context.Context, in *FetchCPBundleRequest, opts ...grpc.CallOption) (*FetchCPBundleResponse, error) {
	out := new(FetchCPBundleResponse)
	err := grpc.Invoke(ctx, "/node.Node/FetchCPBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchFederatedBundle(ctx context.Context, in *FetchFederatedBundleRequest, opts ...grpc.CallOption) (*FetchFederatedBundleResponse, error) {
	out := new(FetchFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/node.Node/FetchFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	// /Attest the node, get base node SVID.
	FetchBaseSVID(context.Context, *FetchBaseSVIDRequest) (*FetchBaseSVIDResponse, error)
	// /Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// /(Base Node SVID or the Registered Node SVID used for this call)
	// /(List can be empty to allow Node Agent cache refresh).
	FetchSVID(context.Context, *FetchSVIDRequest) (*FetchSVIDResponse, error)
	// /Called by Node Agent periodically to support Spire Server certificate rotation. Cached in Node Agent memory for WorkLoads as well.
	FetchCPBundle(context.Context, *FetchCPBundleRequest) (*FetchCPBundleResponse, error)
	// /Called by the Node Agent to fetch the named Federated CA Bundle.
	// /Used in the event that authorized workloads reference a Federated Bundle.
	FetchFederatedBundle(context.Context, *FetchFederatedBundleRequest) (*FetchFederatedBundleResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_FetchBaseSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBaseSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchBaseSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/FetchBaseSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchBaseSVID(ctx, req.(*FetchBaseSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/FetchSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchSVID(ctx, req.(*FetchSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchCPBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCPBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchCPBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/FetchCPBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchCPBundle(ctx, req.(*FetchCPBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Node/FetchFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchFederatedBundle(ctx, req.(*FetchFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBaseSVID",
			Handler:    _Node_FetchBaseSVID_Handler,
		},
		{
			MethodName: "FetchSVID",
			Handler:    _Node_FetchSVID_Handler,
		},
		{
			MethodName: "FetchCPBundle",
			Handler:    _Node_FetchCPBundle_Handler,
		},
		{
			MethodName: "FetchFederatedBundle",
			Handler:    _Node_FetchFederatedBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 556 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5f, 0x6f, 0x12, 0x4f,
	0x14, 0xfd, 0x2d, 0x85, 0x5f, 0xca, 0x65, 0x49, 0xe8, 0x88, 0x15, 0xc1, 0x07, 0x5c, 0x13, 0xc3,
	0x8b, 0x10, 0x31, 0x26, 0xb5, 0xe9, 0x8b, 0x05, 0x89, 0x35, 0xc6, 0x34, 0xd3, 0xe8, 0x9b, 0x21,
	0xc3, 0xce, 0x85, 0x4e, 0x0a, 0xbb, 0x38, 0x33, 0x90, 0xf4, 0x93, 0xf9, 0x1d, 0x7c, 0xf5, 0x0b,
	0x99, 0xf9, 0x43, 0x59, 0xb6, 0xa4, 0x26, 0x3e, 0x71, 0x39, 0x73, 0xee, 0xbd, 0xe7, 0xde, 0x7b,
	0xb2, 0x00, 0x49, 0xca, 0xb1, 0xbb, 0x94, 0xa9, 0x4e, 0x49, 0xd1, 0xc4, 0xcd, 0x57, 0x33, 0xa1,
	0xaf, 0x57, 0x93, 0x6e, 0x9c, 0x2e, 0x7a, 0x6a, 0x29, 0xa6, 0x53, 0xec, 0x29, 0x29, 0x7a, 0xcb,
	0x9b, 0x59, 0x2f, 0x4e, 0x17, 0x8b, 0x34, 0xf1, 0x3f, 0x2e, 0x29, 0x7a, 0x0b, 0xc5, 0xab, 0xb5,
	0xe0, 0xa4, 0x05, 0x65, 0xb5, 0x16, 0x7c, 0x1c, 0xa3, 0xd4, 0x8d, 0xa0, 0x1d, 0x74, 0x42, 0x7a,
	0x68, 0x80, 0x01, 0x4a, 0x4d, 0x6a, 0x70, 0xa0, 0xf5, 0xbc, 0x51, 0x68, 0x07, 0x9d, 0x12, 0x35,
	0x61, 0xf4, 0x3b, 0x00, 0x30, 0x79, 0x5f, 0x97, 0x9c, 0x69, 0x24, 0xaf, 0xa1, 0x64, 0xc8, 0xaa,
	0x11, 0xb4, 0x0f, 0x3a, 0x95, 0x7e, 0xab, 0x6b, 0x65, 0x6d, 0x09, 0x36, 0x54, 0x1f, 0x12, 0x2d,
	0x6f, 0xa9, 0x63, 0x92, 0xcf, 0x50, 0x97, 0x38, 0x13, 0x4a, 0x4b, 0xa6, 0x45, 0x9a, 0x8c, 0x31,
	0xd1, 0x52, 0xa0, 0x6a, 0x14, 0x6c, 0x85, 0xa7, 0x5d, 0xaf, 0x92, 0x66, 0x38, 0x2e, 0xff, 0x91,
	0xcc, 0x41, 0x02, 0x55, 0x73, 0xe8, 0xe4, 0xb8, 0x16, 0x46, 0xef, 0x0d, 0xde, 0xda, 0x31, 0xca,
	0xd4, 0x84, 0xa4, 0x0d, 0xa5, 0x35, 0x9b, 0xaf, 0xd0, 0xce, 0x50, 0xe9, 0xc3, 0x56, 0x20, 0x75,
	0x0f, 0xa7, 0x85, 0x93, 0x20, 0x8a, 0xa1, 0x3e, 0x42, 0x1d, 0x5f, 0x9f, 0x33, 0x85, 0x57, 0xdf,
	0x2e, 0x86, 0x14, 0x7f, 0xac, 0x50, 0x69, 0xf2, 0x0e, 0xaa, 0x4c, 0x6b, 0x54, 0x1a, 0xf9, 0x98,
	0x33, 0xcd, 0x6c, 0xe5, 0x4a, 0xbf, 0xbe, 0x11, 0xf9, 0xde, 0x3f, 0x0e, 0x99, 0x66, 0x34, 0x64,
	0x99, 0x7f, 0x46, 0x4a, 0xac, 0xa4, 0x6d, 0x1b, 0x52, 0x13, 0x46, 0x9f, 0xe0, 0x71, 0xae, 0x89,
	0x5a, 0xa6, 0x89, 0x32, 0x4b, 0xac, 0xd8, 0x13, 0xac, 0xec, 0xca, 0x7c, 0x8f, 0x5a, 0x7e, 0x95,
	0x14, 0xd4, 0x5d, 0x1c, 0xbd, 0x84, 0x9a, 0xad, 0x95, 0x15, 0x4b, 0xa0, 0x18, 0x2b, 0xe9, 0x16,
	0x19, 0x52, 0x1b, 0x47, 0x23, 0x38, 0xca, 0xf0, 0xfe, 0xbd, 0xdf, 0xb1, 0x5f, 0xd0, 0xe0, 0xf2,
	0x7c, 0x95, 0xf0, 0x39, 0xfa, 0x9e, 0xd1, 0x99, 0x9f, 0x69, 0x8b, 0xfb, 0x1e, 0x2f, 0xa0, 0xaa,
	0x50, 0xae, 0x51, 0x8e, 0x27, 0xf6, 0xc1, 0x5b, 0x2b, 0x74, 0xa0, 0x23, 0x47, 0xa7, 0xd0, 0xb2,
	0xd9, 0x23, 0xe4, 0x28, 0x99, 0x46, 0xbe, 0x53, 0xdc, 0x5a, 0xd3, 0x1a, 0x79, 0x2c, 0xb8, 0x35,
	0x58, 0x99, 0x1e, 0x3a, 0xe0, 0x82, 0x47, 0xbf, 0x02, 0x78, 0xb6, 0x3f, 0xd9, 0x2b, 0x40, 0x38,
	0x9a, 0x6e, 0x9e, 0xbc, 0x88, 0x8d, 0x4d, 0x4f, 0xdc, 0xac, 0x0f, 0xa5, 0x77, 0x73, 0xb8, 0xf7,
	0x70, 0x6d, 0x9a, 0x83, 0x9b, 0x03, 0xb3, 0x81, 0x3d, 0xd4, 0x3d, 0x5e, 0xac, 0x67, 0xbd, 0x18,
	0x66, 0xfc, 0xd7, 0xff, 0x59, 0x80, 0xe2, 0x97, 0x94, 0x23, 0xf9, 0x08, 0xd5, 0x1d, 0x8f, 0x90,
	0x66, 0x46, 0x6a, 0xce, 0x9d, 0xcd, 0xd6, 0xde, 0x37, 0x3f, 0xfe, 0x19, 0x94, 0xef, 0x2e, 0x4f,
	0x8e, 0x33, 0xcc, 0x6c, 0x85, 0x27, 0xf7, 0x70, 0x9f, 0xbd, 0xd1, 0xb1, 0xb9, 0xeb, 0x8e, 0x8e,
	0x9c, 0x09, 0x76, 0x74, 0xdc, 0x33, 0xc2, 0x77, 0xef, 0x9c, 0xdc, 0x92, 0xc8, 0xf3, 0x87, 0x6e,
	0xe0, 0xea, 0x46, 0x7f, 0x3f, 0xd3, 0xe5, 0x7f, 0x93, 0xff, 0xed, 0xf7, 0xec, 0xcd, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x79, 0x6c, 0x35, 0x19, 0x12, 0x05, 0x00, 0x00,
}
