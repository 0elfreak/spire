// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	FetchNodeSVIDRequest
	FetchNodeSVIDResponse
	FetchWorkloadSVIDRequest
	FetchWorkloadSVIDResponse
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type FetchNodeSVIDRequest struct {
	AttestedData string                              `protobuf:"bytes,1,opt,name=attestedData" json:"attestedData,omitempty"`
	CsrList      []*FetchNodeSVIDRequest_SpiffeIdCsr `protobuf:"bytes,2,rep,name=csrList" json:"csrList,omitempty"`
}

func (m *FetchNodeSVIDRequest) Reset()                    { *m = FetchNodeSVIDRequest{} }
func (m *FetchNodeSVIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchNodeSVIDRequest) ProtoMessage()               {}
func (*FetchNodeSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FetchNodeSVIDRequest) GetAttestedData() string {
	if m != nil {
		return m.AttestedData
	}
	return ""
}

func (m *FetchNodeSVIDRequest) GetCsrList() []*FetchNodeSVIDRequest_SpiffeIdCsr {
	if m != nil {
		return m.CsrList
	}
	return nil
}

type FetchNodeSVIDRequest_SpiffeIdCsr struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Csr      string `protobuf:"bytes,2,opt,name=csr" json:"csr,omitempty"`
}

func (m *FetchNodeSVIDRequest_SpiffeIdCsr) Reset()         { *m = FetchNodeSVIDRequest_SpiffeIdCsr{} }
func (m *FetchNodeSVIDRequest_SpiffeIdCsr) String() string { return proto1.CompactTextString(m) }
func (*FetchNodeSVIDRequest_SpiffeIdCsr) ProtoMessage()    {}
func (*FetchNodeSVIDRequest_SpiffeIdCsr) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

func (m *FetchNodeSVIDRequest_SpiffeIdCsr) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FetchNodeSVIDRequest_SpiffeIdCsr) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

type FetchNodeSVIDResponse struct {
	CertList  []string                       `protobuf:"bytes,1,rep,name=certList" json:"certList,omitempty"`
	TupleList []*FetchNodeSVIDResponse_Tuple `protobuf:"bytes,2,rep,name=tupleList" json:"tupleList,omitempty"`
	Nonce     int64                          `protobuf:"varint,3,opt,name=nonce" json:"nonce,omitempty"`
}

func (m *FetchNodeSVIDResponse) Reset()                    { *m = FetchNodeSVIDResponse{} }
func (m *FetchNodeSVIDResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchNodeSVIDResponse) ProtoMessage()               {}
func (*FetchNodeSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchNodeSVIDResponse) GetCertList() []string {
	if m != nil {
		return m.CertList
	}
	return nil
}

func (m *FetchNodeSVIDResponse) GetTupleList() []*FetchNodeSVIDResponse_Tuple {
	if m != nil {
		return m.TupleList
	}
	return nil
}

func (m *FetchNodeSVIDResponse) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type FetchNodeSVIDResponse_Tuple struct {
	V1 string `protobuf:"bytes,1,opt,name=v1" json:"v1,omitempty"`
	V2 string `protobuf:"bytes,2,opt,name=v2" json:"v2,omitempty"`
	V3 string `protobuf:"bytes,3,opt,name=v3" json:"v3,omitempty"`
}

func (m *FetchNodeSVIDResponse_Tuple) Reset()                    { *m = FetchNodeSVIDResponse_Tuple{} }
func (m *FetchNodeSVIDResponse_Tuple) String() string            { return proto1.CompactTextString(m) }
func (*FetchNodeSVIDResponse_Tuple) ProtoMessage()               {}
func (*FetchNodeSVIDResponse_Tuple) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *FetchNodeSVIDResponse_Tuple) GetV1() string {
	if m != nil {
		return m.V1
	}
	return ""
}

func (m *FetchNodeSVIDResponse_Tuple) GetV2() string {
	if m != nil {
		return m.V2
	}
	return ""
}

func (m *FetchNodeSVIDResponse_Tuple) GetV3() string {
	if m != nil {
		return m.V3
	}
	return ""
}

type FetchWorkloadSVIDRequest struct {
	CsrList []*FetchWorkloadSVIDRequest_SpiffeIdCsr `protobuf:"bytes,1,rep,name=csrList" json:"csrList,omitempty"`
}

func (m *FetchWorkloadSVIDRequest) Reset()                    { *m = FetchWorkloadSVIDRequest{} }
func (m *FetchWorkloadSVIDRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchWorkloadSVIDRequest) ProtoMessage()               {}
func (*FetchWorkloadSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchWorkloadSVIDRequest) GetCsrList() []*FetchWorkloadSVIDRequest_SpiffeIdCsr {
	if m != nil {
		return m.CsrList
	}
	return nil
}

type FetchWorkloadSVIDRequest_SpiffeIdCsr struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Csr      string `protobuf:"bytes,2,opt,name=csr" json:"csr,omitempty"`
}

func (m *FetchWorkloadSVIDRequest_SpiffeIdCsr) Reset()         { *m = FetchWorkloadSVIDRequest_SpiffeIdCsr{} }
func (m *FetchWorkloadSVIDRequest_SpiffeIdCsr) String() string { return proto1.CompactTextString(m) }
func (*FetchWorkloadSVIDRequest_SpiffeIdCsr) ProtoMessage()    {}
func (*FetchWorkloadSVIDRequest_SpiffeIdCsr) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{2, 0}
}

func (m *FetchWorkloadSVIDRequest_SpiffeIdCsr) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FetchWorkloadSVIDRequest_SpiffeIdCsr) GetCsr() string {
	if m != nil {
		return m.Csr
	}
	return ""
}

type FetchWorkloadSVIDResponse struct {
	BundleList []*FetchWorkloadSVIDResponse_Bundle `protobuf:"bytes,2,rep,name=bundleList" json:"bundleList,omitempty"`
}

func (m *FetchWorkloadSVIDResponse) Reset()                    { *m = FetchWorkloadSVIDResponse{} }
func (m *FetchWorkloadSVIDResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchWorkloadSVIDResponse) ProtoMessage()               {}
func (*FetchWorkloadSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchWorkloadSVIDResponse) GetBundleList() []*FetchWorkloadSVIDResponse_Bundle {
	if m != nil {
		return m.BundleList
	}
	return nil
}

type FetchWorkloadSVIDResponse_Bundle struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Svid     string `protobuf:"bytes,2,opt,name=svid" json:"svid,omitempty"`
	Trust    string `protobuf:"bytes,3,opt,name=trust" json:"trust,omitempty"`
}

func (m *FetchWorkloadSVIDResponse_Bundle) Reset()         { *m = FetchWorkloadSVIDResponse_Bundle{} }
func (m *FetchWorkloadSVIDResponse_Bundle) String() string { return proto1.CompactTextString(m) }
func (*FetchWorkloadSVIDResponse_Bundle) ProtoMessage()    {}
func (*FetchWorkloadSVIDResponse_Bundle) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3, 0}
}

func (m *FetchWorkloadSVIDResponse_Bundle) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *FetchWorkloadSVIDResponse_Bundle) GetSvid() string {
	if m != nil {
		return m.Svid
	}
	return ""
}

func (m *FetchWorkloadSVIDResponse_Bundle) GetTrust() string {
	if m != nil {
		return m.Trust
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func init() {
	proto1.RegisterType((*FetchNodeSVIDRequest)(nil), "proto.FetchNodeSVIDRequest")
	proto1.RegisterType((*FetchNodeSVIDRequest_SpiffeIdCsr)(nil), "proto.FetchNodeSVIDRequest.SpiffeIdCsr")
	proto1.RegisterType((*FetchNodeSVIDResponse)(nil), "proto.FetchNodeSVIDResponse")
	proto1.RegisterType((*FetchNodeSVIDResponse_Tuple)(nil), "proto.FetchNodeSVIDResponse.Tuple")
	proto1.RegisterType((*FetchWorkloadSVIDRequest)(nil), "proto.FetchWorkloadSVIDRequest")
	proto1.RegisterType((*FetchWorkloadSVIDRequest_SpiffeIdCsr)(nil), "proto.FetchWorkloadSVIDRequest.SpiffeIdCsr")
	proto1.RegisterType((*FetchWorkloadSVIDResponse)(nil), "proto.FetchWorkloadSVIDResponse")
	proto1.RegisterType((*FetchWorkloadSVIDResponse_Bundle)(nil), "proto.FetchWorkloadSVIDResponse.Bundle")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	FetchNodeSVID(ctx context.Context, in *FetchNodeSVIDRequest, opts ...grpc.CallOption) (*FetchNodeSVIDResponse, error)
	FetchWorkloadSVID(ctx context.Context, in *FetchWorkloadSVIDRequest, opts ...grpc.CallOption) (*FetchWorkloadSVIDResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) FetchNodeSVID(ctx context.Context, in *FetchNodeSVIDRequest, opts ...grpc.CallOption) (*FetchNodeSVIDResponse, error) {
	out := new(FetchNodeSVIDResponse)
	err := grpc.Invoke(ctx, "/proto.node/FetchNodeSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchWorkloadSVID(ctx context.Context, in *FetchWorkloadSVIDRequest, opts ...grpc.CallOption) (*FetchWorkloadSVIDResponse, error) {
	out := new(FetchWorkloadSVIDResponse)
	err := grpc.Invoke(ctx, "/proto.node/FetchWorkloadSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	FetchNodeSVID(context.Context, *FetchNodeSVIDRequest) (*FetchNodeSVIDResponse, error)
	FetchWorkloadSVID(context.Context, *FetchWorkloadSVIDRequest) (*FetchWorkloadSVIDResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_FetchNodeSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchNodeSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchNodeSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.node/FetchNodeSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchNodeSVID(ctx, req.(*FetchNodeSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchWorkloadSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchWorkloadSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchWorkloadSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.node/FetchWorkloadSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchWorkloadSVID(ctx, req.(*FetchWorkloadSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchNodeSVID",
			Handler:    _Node_FetchNodeSVID_Handler,
		},
		{
			MethodName: "FetchWorkloadSVID",
			Handler:    _Node_FetchWorkloadSVID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto1.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 395 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x52, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0xcd, 0xb4, 0x14, 0x1e, 0x97, 0xf7, 0x5e, 0x74, 0x82, 0x49, 0xad, 0x26, 0x36, 0xdd, 0x40,
	0x62, 0xd2, 0x84, 0xb2, 0x70, 0xe1, 0xc6, 0x0f, 0xd0, 0x60, 0x0c, 0x8b, 0x62, 0x70, 0x5d, 0xda,
	0x21, 0x12, 0xb1, 0x53, 0x3b, 0xd3, 0x26, 0xfe, 0x19, 0x7f, 0x80, 0x6b, 0x57, 0xae, 0xfd, 0x61,
	0xa6, 0xd3, 0x41, 0x8a, 0x56, 0x58, 0xb9, 0xea, 0x9c, 0x9b, 0x7b, 0xce, 0x3d, 0x3d, 0xf7, 0x02,
	0x84, 0x34, 0x20, 0x76, 0x14, 0x53, 0x4e, 0xb1, 0x26, 0x3e, 0xd6, 0x1b, 0x82, 0xe6, 0x05, 0xe1,
	0xfe, 0xdd, 0x90, 0x06, 0x64, 0x34, 0x1e, 0xf4, 0x5c, 0xf2, 0x98, 0x10, 0xc6, 0xb1, 0x05, 0x7f,
	0x3d, 0xce, 0x09, 0xe3, 0x24, 0xe8, 0x79, 0xdc, 0xd3, 0x91, 0x89, 0xda, 0x75, 0x77, 0xa5, 0x86,
	0x4f, 0xa1, 0xe6, 0xb3, 0xf8, 0x7a, 0xc6, 0xb8, 0xae, 0x98, 0x6a, 0xbb, 0xe1, 0xb4, 0x72, 0x71,
	0xbb, 0x4c, 0xd1, 0x1e, 0x45, 0xb3, 0xe9, 0x94, 0x0c, 0x82, 0x73, 0x16, 0xbb, 0x0b, 0x9e, 0x71,
	0x0c, 0x8d, 0x42, 0x1d, 0x1b, 0xf0, 0x87, 0x49, 0x28, 0x27, 0x7e, 0x62, 0xbc, 0x05, 0xaa, 0xcf,
	0x62, 0x5d, 0x11, 0xe5, 0xec, 0x69, 0xbd, 0x23, 0xd8, 0xf9, 0x32, 0x8a, 0x45, 0x34, 0x64, 0x24,
	0xd3, 0xf1, 0x49, 0xcc, 0x85, 0x35, 0x64, 0xaa, 0x99, 0xce, 0x02, 0xe3, 0x13, 0xa8, 0xf3, 0x24,
	0x9a, 0x93, 0x82, 0x6f, 0xab, 0xdc, 0x77, 0x2e, 0x66, 0xdf, 0x64, 0xdd, 0xee, 0x92, 0x84, 0x9b,
	0xa0, 0x85, 0x34, 0xf4, 0x89, 0xae, 0x9a, 0xa8, 0xad, 0xba, 0x39, 0x30, 0x8e, 0x40, 0x13, 0x9d,
	0xf8, 0x3f, 0x28, 0x69, 0x47, 0xda, 0x57, 0xd2, 0x8e, 0xc0, 0x8e, 0xf4, 0xad, 0xa4, 0x8e, 0xc0,
	0x5d, 0xc1, 0xcd, 0x70, 0xd7, 0x7a, 0x46, 0xa0, 0x8b, 0xc9, 0xb7, 0x34, 0xbe, 0x9f, 0x53, 0x2f,
	0x28, 0xee, 0xa1, 0xbf, 0xcc, 0x18, 0x09, 0xaf, 0x87, 0x45, 0xaf, 0x25, 0x8c, 0x5f, 0xc8, 0xf9,
	0x15, 0xc1, 0x6e, 0xc9, 0x38, 0x99, 0xf5, 0x25, 0xc0, 0x24, 0x09, 0x83, 0x95, 0x40, 0x5b, 0x3f,
	0x9b, 0x94, 0xa1, 0x9e, 0x09, 0x8a, 0x5b, 0xa0, 0x1a, 0x43, 0xa8, 0xe6, 0xd5, 0xb5, 0xf6, 0x30,
	0x54, 0x58, 0x3a, 0x0b, 0xa4, 0x3f, 0xf1, 0xce, 0x16, 0xc2, 0xe3, 0x84, 0x71, 0x19, 0x6a, 0x0e,
	0xac, 0x1a, 0x68, 0xfd, 0x87, 0x88, 0x3f, 0x39, 0x2f, 0x08, 0x2a, 0xd9, 0xe9, 0xe3, 0x2b, 0xf8,
	0xb7, 0xb2, 0x62, 0xbc, 0xb7, 0xe6, 0x60, 0x8d, 0xfd, 0x75, 0x57, 0x81, 0xc7, 0xb0, 0xfd, 0xed,
	0xef, 0xf0, 0xc1, 0x86, 0xe5, 0x18, 0xe6, 0xa6, 0x60, 0x26, 0x55, 0xd1, 0xd0, 0xfd, 0x08, 0x00,
	0x00, 0xff, 0xff, 0x23, 0x02, 0x09, 0x94, 0xad, 0x03, 0x00, 0x00,
}
