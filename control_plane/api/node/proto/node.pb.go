// Code generated by protoc-gen-go. DO NOT EDIT.
// source: node.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	node.proto

It has these top-level messages:
	RegistrationEntry
	Svid
	SvidMap
	SvidUpdate
	AttestedData
	FetchBaseSVIDRequest
	FetchBaseSVIDResponse
	FetchSVIDRequest
	FetchSVIDResponse
	FetchCPBundleRequest
	FetchCPBundleResponse
	FetchFederatedBundleRequest
	FetchFederatedBundleResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// *A type representing a curated record that the Control Plane uses to set up and manage the various registered nodes and workloads that are controlled by it.
type RegistrationEntry struct {
	SelectorType      string   `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector          string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	SpiffeId          string   `protobuf:"bytes,3,opt,name=spiffeId" json:"spiffeId,omitempty"`
	ParentId          string   `protobuf:"bytes,4,opt,name=parentId" json:"parentId,omitempty"`
	FederatedSpiffeId []string `protobuf:"bytes,5,rep,name=federatedSpiffeId" json:"federatedSpiffeId,omitempty"`
	Ttl               int32    `protobuf:"varint,6,opt,name=ttl" json:"ttl,omitempty"`
	SelectorGroup     string   `protobuf:"bytes,7,opt,name=selectorGroup" json:"selectorGroup,omitempty"`
}

func (m *RegistrationEntry) Reset()                    { *m = RegistrationEntry{} }
func (m *RegistrationEntry) String() string            { return proto.CompactTextString(m) }
func (*RegistrationEntry) ProtoMessage()               {}
func (*RegistrationEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegistrationEntry) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *RegistrationEntry) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *RegistrationEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegistrationEntry) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *RegistrationEntry) GetFederatedSpiffeId() []string {
	if m != nil {
		return m.FederatedSpiffeId
	}
	return nil
}

func (m *RegistrationEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegistrationEntry) GetSelectorGroup() string {
	if m != nil {
		return m.SelectorGroup
	}
	return ""
}

// *A type which contains the "Spiffe Verifiable Identity Document" and a TTL indicating when the SVID expires.
type Svid struct {
	SvidCert []byte `protobuf:"bytes,1,opt,name=svidCert,proto3" json:"svidCert,omitempty"`
	Ttl      int32  `protobuf:"varint,2,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *Svid) Reset()                    { *m = Svid{} }
func (m *Svid) String() string            { return proto.CompactTextString(m) }
func (*Svid) ProtoMessage()               {}
func (*Svid) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Svid) GetSvidCert() []byte {
	if m != nil {
		return m.SvidCert
	}
	return nil
}

func (m *Svid) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// *A map containing SVID values and corresponding SPIFFE IDs as the keys.
type SvidMap struct {
	Map map[string]*Svid `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *SvidMap) Reset()                    { *m = SvidMap{} }
func (m *SvidMap) String() string            { return proto.CompactTextString(m) }
func (*SvidMap) ProtoMessage()               {}
func (*SvidMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *SvidMap) GetMap() map[string]*Svid {
	if m != nil {
		return m.Map
	}
	return nil
}

// *A message returned by the Control Plane, which includes a map of signed SVIDs and
// an array of all current Registration Entries which are relevant to the caller SPIFFE ID.
type SvidUpdate struct {
	SvidMap               *SvidMap             `protobuf:"bytes,1,opt,name=svidMap" json:"svidMap,omitempty"`
	RegistrationEntryList []*RegistrationEntry `protobuf:"bytes,2,rep,name=registrationEntryList" json:"registrationEntryList,omitempty"`
}

func (m *SvidUpdate) Reset()                    { *m = SvidUpdate{} }
func (m *SvidUpdate) String() string            { return proto.CompactTextString(m) }
func (*SvidUpdate) ProtoMessage()               {}
func (*SvidUpdate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SvidUpdate) GetSvidMap() *SvidMap {
	if m != nil {
		return m.SvidMap
	}
	return nil
}

func (m *SvidUpdate) GetRegistrationEntryList() []*RegistrationEntry {
	if m != nil {
		return m.RegistrationEntryList
	}
	return nil
}

// *A type which contains attestation data for specific platform.
type AttestedData struct {
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Data string `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
}

func (m *AttestedData) Reset()                    { *m = AttestedData{} }
func (m *AttestedData) String() string            { return proto.CompactTextString(m) }
func (*AttestedData) ProtoMessage()               {}
func (*AttestedData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AttestedData) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *AttestedData) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

// *Represents a request to attest the node.
type FetchBaseSVIDRequest struct {
	AttestedData *AttestedData `protobuf:"bytes,1,opt,name=attestedData" json:"attestedData,omitempty"`
	Csr          []byte        `protobuf:"bytes,2,opt,name=csr,proto3" json:"csr,omitempty"`
}

func (m *FetchBaseSVIDRequest) Reset()                    { *m = FetchBaseSVIDRequest{} }
func (m *FetchBaseSVIDRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchBaseSVIDRequest) ProtoMessage()               {}
func (*FetchBaseSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FetchBaseSVIDRequest) GetAttestedData() *AttestedData {
	if m != nil {
		return m.AttestedData
	}
	return nil
}

func (m *FetchBaseSVIDRequest) GetCsr() []byte {
	if m != nil {
		return m.Csr
	}
	return nil
}

// *Represents a response that contains  map of signed SVIDs and an array of all current Registration Entries which are relevant to the caller SPIFFE ID
type FetchBaseSVIDResponse struct {
	SpiffeEntry *SvidUpdate `protobuf:"bytes,1,opt,name=spiffeEntry" json:"spiffeEntry,omitempty"`
}

func (m *FetchBaseSVIDResponse) Reset()                    { *m = FetchBaseSVIDResponse{} }
func (m *FetchBaseSVIDResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchBaseSVIDResponse) ProtoMessage()               {}
func (*FetchBaseSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FetchBaseSVIDResponse) GetSpiffeEntry() *SvidUpdate {
	if m != nil {
		return m.SpiffeEntry
	}
	return nil
}

// *Represents a request with a list of CSR.
type FetchSVIDRequest struct {
	CsrList [][]byte `protobuf:"bytes,2,rep,name=csrList,proto3" json:"csrList,omitempty"`
}

func (m *FetchSVIDRequest) Reset()                    { *m = FetchSVIDRequest{} }
func (m *FetchSVIDRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchSVIDRequest) ProtoMessage()               {}
func (*FetchSVIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FetchSVIDRequest) GetCsrList() [][]byte {
	if m != nil {
		return m.CsrList
	}
	return nil
}

// *Represents a response that contains  map of signed SVIDs and an array of all current Registration Entries which are relevant to the caller SPIFFE ID.
type FetchSVIDResponse struct {
	SpiffeEntry *SvidUpdate `protobuf:"bytes,1,opt,name=spiffeEntry" json:"spiffeEntry,omitempty"`
}

func (m *FetchSVIDResponse) Reset()                    { *m = FetchSVIDResponse{} }
func (m *FetchSVIDResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchSVIDResponse) ProtoMessage()               {}
func (*FetchSVIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *FetchSVIDResponse) GetSpiffeEntry() *SvidUpdate {
	if m != nil {
		return m.SpiffeEntry
	}
	return nil
}

// *Represents an empty message.
type FetchCPBundleRequest struct {
}

func (m *FetchCPBundleRequest) Reset()                    { *m = FetchCPBundleRequest{} }
func (m *FetchCPBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchCPBundleRequest) ProtoMessage()               {}
func (*FetchCPBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

// *Represents a response with a Control Plane certificate bundle.
type FetchCPBundleResponse struct {
	CpBundle []byte `protobuf:"bytes,1,opt,name=cpBundle,proto3" json:"cpBundle,omitempty"`
}

func (m *FetchCPBundleResponse) Reset()                    { *m = FetchCPBundleResponse{} }
func (m *FetchCPBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchCPBundleResponse) ProtoMessage()               {}
func (*FetchCPBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *FetchCPBundleResponse) GetCpBundle() []byte {
	if m != nil {
		return m.CpBundle
	}
	return nil
}

// *Represents a request with an array of SPIFFE Ids.
type FetchFederatedBundleRequest struct {
	SpiffeId []string `protobuf:"bytes,1,rep,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *FetchFederatedBundleRequest) Reset()                    { *m = FetchFederatedBundleRequest{} }
func (m *FetchFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchFederatedBundleRequest) ProtoMessage()               {}
func (*FetchFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *FetchFederatedBundleRequest) GetSpiffeId() []string {
	if m != nil {
		return m.SpiffeId
	}
	return nil
}

// *Represents a response with a map of SPIFFE Id, Federated CA Bundle.
type FetchFederatedBundleResponse struct {
	Map map[string][]byte `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FetchFederatedBundleResponse) Reset()                    { *m = FetchFederatedBundleResponse{} }
func (m *FetchFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*FetchFederatedBundleResponse) ProtoMessage()               {}
func (*FetchFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *FetchFederatedBundleResponse) GetMap() map[string][]byte {
	if m != nil {
		return m.Map
	}
	return nil
}

func init() {
	proto.RegisterType((*RegistrationEntry)(nil), "pb.RegistrationEntry")
	proto.RegisterType((*Svid)(nil), "pb.Svid")
	proto.RegisterType((*SvidMap)(nil), "pb.SvidMap")
	proto.RegisterType((*SvidUpdate)(nil), "pb.SvidUpdate")
	proto.RegisterType((*AttestedData)(nil), "pb.AttestedData")
	proto.RegisterType((*FetchBaseSVIDRequest)(nil), "pb.FetchBaseSVIDRequest")
	proto.RegisterType((*FetchBaseSVIDResponse)(nil), "pb.FetchBaseSVIDResponse")
	proto.RegisterType((*FetchSVIDRequest)(nil), "pb.FetchSVIDRequest")
	proto.RegisterType((*FetchSVIDResponse)(nil), "pb.FetchSVIDResponse")
	proto.RegisterType((*FetchCPBundleRequest)(nil), "pb.FetchCPBundleRequest")
	proto.RegisterType((*FetchCPBundleResponse)(nil), "pb.FetchCPBundleResponse")
	proto.RegisterType((*FetchFederatedBundleRequest)(nil), "pb.FetchFederatedBundleRequest")
	proto.RegisterType((*FetchFederatedBundleResponse)(nil), "pb.FetchFederatedBundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	// /Attest the node, get base node SVID.
	FetchBaseSVID(ctx context.Context, in *FetchBaseSVIDRequest, opts ...grpc.CallOption) (*FetchBaseSVIDResponse, error)
	// /Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// /(Base Node SVID or the Registered Node SVID used for this call)
	// /(List can be empty to allow Node Agent cache refresh).
	FetchSVID(ctx context.Context, in *FetchSVIDRequest, opts ...grpc.CallOption) (*FetchSVIDResponse, error)
	// /Called by Node Agent periodically to support Control Plane certificate rotation. Cached in Node Agent memory for WorkLoads as well.
	FetchCPBundle(ctx context.Context, in *FetchCPBundleRequest, opts ...grpc.CallOption) (*FetchCPBundleResponse, error)
	// /Called by the Node Agent to fetch the named Federated CA Bundle.
	// /Used in the event that authorized workloads reference a Federated Bundle.
	FetchFederatedBundle(ctx context.Context, in *FetchFederatedBundleRequest, opts ...grpc.CallOption) (*FetchFederatedBundleResponse, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) FetchBaseSVID(ctx context.Context, in *FetchBaseSVIDRequest, opts ...grpc.CallOption) (*FetchBaseSVIDResponse, error) {
	out := new(FetchBaseSVIDResponse)
	err := grpc.Invoke(ctx, "/pb.node/FetchBaseSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchSVID(ctx context.Context, in *FetchSVIDRequest, opts ...grpc.CallOption) (*FetchSVIDResponse, error) {
	out := new(FetchSVIDResponse)
	err := grpc.Invoke(ctx, "/pb.node/FetchSVID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchCPBundle(ctx context.Context, in *FetchCPBundleRequest, opts ...grpc.CallOption) (*FetchCPBundleResponse, error) {
	out := new(FetchCPBundleResponse)
	err := grpc.Invoke(ctx, "/pb.node/FetchCPBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) FetchFederatedBundle(ctx context.Context, in *FetchFederatedBundleRequest, opts ...grpc.CallOption) (*FetchFederatedBundleResponse, error) {
	out := new(FetchFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.node/FetchFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	// /Attest the node, get base node SVID.
	FetchBaseSVID(context.Context, *FetchBaseSVIDRequest) (*FetchBaseSVIDResponse, error)
	// /Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
	// /(Base Node SVID or the Registered Node SVID used for this call)
	// /(List can be empty to allow Node Agent cache refresh).
	FetchSVID(context.Context, *FetchSVIDRequest) (*FetchSVIDResponse, error)
	// /Called by Node Agent periodically to support Control Plane certificate rotation. Cached in Node Agent memory for WorkLoads as well.
	FetchCPBundle(context.Context, *FetchCPBundleRequest) (*FetchCPBundleResponse, error)
	// /Called by the Node Agent to fetch the named Federated CA Bundle.
	// /Used in the event that authorized workloads reference a Federated Bundle.
	FetchFederatedBundle(context.Context, *FetchFederatedBundleRequest) (*FetchFederatedBundleResponse, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_FetchBaseSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchBaseSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchBaseSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.node/FetchBaseSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchBaseSVID(ctx, req.(*FetchBaseSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchSVID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSVIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchSVID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.node/FetchSVID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchSVID(ctx, req.(*FetchSVIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchCPBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchCPBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchCPBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.node/FetchCPBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchCPBundle(ctx, req.(*FetchCPBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_FetchFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).FetchFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.node/FetchFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).FetchFederatedBundle(ctx, req.(*FetchFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchBaseSVID",
			Handler:    _Node_FetchBaseSVID_Handler,
		},
		{
			MethodName: "FetchSVID",
			Handler:    _Node_FetchSVID_Handler,
		},
		{
			MethodName: "FetchCPBundle",
			Handler:    _Node_FetchCPBundle_Handler,
		},
		{
			MethodName: "FetchFederatedBundle",
			Handler:    _Node_FetchFederatedBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}

func init() { proto.RegisterFile("node.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xdd, 0x6a, 0x13, 0x4d,
	0x18, 0x66, 0x37, 0x69, 0x93, 0xbe, 0xd9, 0x7e, 0xb4, 0x43, 0xf2, 0xb1, 0x46, 0xd1, 0x30, 0xa8,
	0x44, 0x28, 0x41, 0xd2, 0x52, 0xaa, 0x9e, 0x68, 0xff, 0x24, 0x68, 0x41, 0x26, 0x2a, 0x78, 0x22,
	0x4c, 0xb2, 0x13, 0x5d, 0x8c, 0xbb, 0xe3, 0xce, 0x24, 0x90, 0x33, 0xef, 0xc1, 0x8b, 0xf0, 0xfa,
	0xbc, 0x03, 0x99, 0xd9, 0x99, 0xed, 0xec, 0x26, 0x56, 0xf0, 0x6c, 0xde, 0xbf, 0xe7, 0x79, 0x7f,
	0x07, 0x20, 0x49, 0x23, 0x36, 0xe0, 0x59, 0x2a, 0x53, 0xe4, 0xf3, 0x09, 0xfe, 0xe5, 0xc1, 0x3e,
	0x61, 0x9f, 0x62, 0x21, 0x33, 0x2a, 0xe3, 0x34, 0xb9, 0x48, 0x64, 0xb6, 0x42, 0x18, 0x02, 0xc1,
	0xe6, 0x6c, 0x2a, 0xd3, 0xec, 0xed, 0x8a, 0xb3, 0xd0, 0xeb, 0x79, 0xfd, 0x1d, 0x52, 0xd2, 0xa1,
	0x2e, 0x34, 0xad, 0x1c, 0xfa, 0xda, 0x5e, 0xc8, 0xda, 0xc6, 0xe3, 0xd9, 0x8c, 0x8d, 0xa2, 0xb0,
	0x66, 0x6c, 0x46, 0x56, 0x36, 0x4e, 0x33, 0x96, 0xc8, 0x51, 0x14, 0xd6, 0x73, 0x9b, 0x95, 0xd1,
	0x01, 0xec, 0xcf, 0x58, 0xc4, 0x32, 0x2a, 0x59, 0x34, 0xb6, 0x00, 0x5b, 0xbd, 0x5a, 0x7f, 0x87,
	0xac, 0x1b, 0xd0, 0x1e, 0xd4, 0xa4, 0x9c, 0x87, 0xdb, 0x3d, 0xaf, 0xbf, 0x45, 0xd4, 0x13, 0xdd,
	0x87, 0x5d, 0x9b, 0xc3, 0xcb, 0x2c, 0x5d, 0xf0, 0xb0, 0xa1, 0x09, 0xca, 0x4a, 0x7c, 0x04, 0xf5,
	0xf1, 0x32, 0xd6, 0x99, 0x88, 0x65, 0x1c, 0x9d, 0xb1, 0x4c, 0xea, 0x0a, 0x03, 0x52, 0xc8, 0x16,
	0xdb, 0x2f, 0xb0, 0xb1, 0x80, 0x86, 0x8a, 0xba, 0xa2, 0x1c, 0x3d, 0x84, 0xda, 0x57, 0xca, 0x43,
	0xaf, 0x57, 0xeb, 0xb7, 0x86, 0xed, 0x01, 0x9f, 0x0c, 0x8c, 0x65, 0x70, 0x45, 0xb9, 0xee, 0x20,
	0x51, 0x0e, 0xdd, 0xe7, 0xd0, 0xb4, 0x0a, 0x05, 0xf8, 0x85, 0xad, 0x4c, 0x27, 0xd5, 0x13, 0xdd,
	0x85, 0xad, 0x25, 0x9d, 0x2f, 0x98, 0x26, 0x69, 0x0d, 0x9b, 0x16, 0x87, 0xe4, 0xea, 0xa7, 0xfe,
	0x89, 0x87, 0xbf, 0x7b, 0x00, 0x4a, 0xf7, 0x8e, 0x47, 0x54, 0x32, 0xf4, 0x00, 0x1a, 0x22, 0x67,
	0xd2, 0x40, 0xad, 0x61, 0xcb, 0x21, 0x27, 0xd6, 0x86, 0x5e, 0x41, 0x27, 0xab, 0xce, 0xf4, 0x75,
	0x2c, 0x64, 0xe8, 0xeb, 0x8c, 0x3b, 0x2a, 0x68, 0x6d, 0xe8, 0x64, 0x73, 0x0c, 0x3e, 0x86, 0xe0,
	0x85, 0x94, 0x4c, 0x48, 0x16, 0x9d, 0x53, 0x49, 0x11, 0x82, 0xba, 0xbc, 0xde, 0x09, 0xfd, 0x56,
	0xba, 0x88, 0x4a, 0x6a, 0xf6, 0x40, 0xbf, 0xf1, 0x47, 0x68, 0x5f, 0x32, 0x39, 0xfd, 0x7c, 0x4a,
	0x05, 0x1b, 0xbf, 0x1f, 0x9d, 0x13, 0xf6, 0x6d, 0xc1, 0x84, 0x44, 0x47, 0x10, 0x50, 0x07, 0xcf,
	0x14, 0xb2, 0xa7, 0x72, 0x72, 0x79, 0x48, 0xc9, 0x4b, 0xb5, 0x6f, 0x2a, 0xf2, 0x45, 0x0b, 0x88,
	0x7a, 0xe2, 0x11, 0x74, 0x2a, 0xf8, 0x82, 0xa7, 0x89, 0x60, 0xe8, 0x31, 0xb4, 0xf2, 0x65, 0xd3,
	0x35, 0x18, 0xfc, 0xff, 0x6c, 0xa3, 0xf2, 0x4e, 0x12, 0xd7, 0x05, 0x1f, 0xc0, 0x9e, 0x86, 0x72,
	0xd3, 0x0c, 0xa1, 0x31, 0x15, 0x59, 0xd1, 0xb5, 0x80, 0x58, 0x11, 0x5f, 0xc0, 0xbe, 0xe3, 0xfd,
	0xcf, 0xa4, 0xff, 0x9b, 0xfe, 0x9c, 0xbd, 0x39, 0x5d, 0x24, 0xd1, 0x9c, 0x19, 0x62, 0x7c, 0x68,
	0xea, 0xba, 0xd6, 0x1b, 0x8a, 0x2e, 0x34, 0xa7, 0x3c, 0xd7, 0xd9, 0x75, 0xb5, 0x32, 0x7e, 0x02,
	0xb7, 0x75, 0xd0, 0xa5, 0x3d, 0x92, 0x12, 0x66, 0xe9, 0x1e, 0x3d, 0x7d, 0x4e, 0x85, 0x8c, 0x7f,
	0x78, 0x70, 0x67, 0x73, 0xac, 0xe1, 0x7d, 0xe6, 0x6e, 0xfb, 0x23, 0x55, 0xd2, 0x4d, 0xee, 0x95,
	0x13, 0x38, 0xbe, 0xf1, 0x04, 0xda, 0xee, 0x09, 0x04, 0xce, 0xe2, 0x0f, 0x7f, 0xfa, 0x50, 0x57,
	0x5f, 0x15, 0x3a, 0x87, 0xdd, 0xd2, 0x98, 0x51, 0x58, 0x64, 0x50, 0xd9, 0xac, 0xee, 0xad, 0x0d,
	0x16, 0x53, 0xc3, 0x09, 0xec, 0x14, 0x33, 0x43, 0xed, 0xc2, 0xcf, 0x8d, 0xee, 0x54, 0xb4, 0x26,
	0xd2, 0xf2, 0xdb, 0x71, 0x38, 0xfc, 0x95, 0xc9, 0x39, 0xfc, 0x6b, 0xb3, 0xfb, 0x60, 0x86, 0x5d,
	0x69, 0x1a, 0xba, 0xf7, 0xe7, 0x76, 0xe6, 0x98, 0xbd, 0xbf, 0xf5, 0x7b, 0xb2, 0xad, 0x3f, 0xf3,
	0xc3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb5, 0xd7, 0x79, 0xcd, 0xda, 0x05, 0x00, 0x00,
}
