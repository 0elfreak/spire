/**
The Node API is exposed by the Control Plane to Node Agents.
A node agent uses this API to attest the node it is running on,
to retrieve the list of identities that are allowed to run on that node,
and to retrieve SVIDs by presenting certificate signing requests to the Control Plane.
*/
syntax = "proto3";
package pb;

/**A type representing a single Registration Entry. It is used when creating or updating a Registration Entry.*/
message RegistrationEntry {
 string selectorType = 1;
 string selector = 2;
 string attestor = 3;
 string spiffeId = 4;
 bytes federatedBundle = 5;
 int32 ttl = 6;
}

/**A type which contains the SVID and a TTL indicating when the SVID expires.*/
message Svid {
 bytes svidCert = 1;
 int32 ttl = 2;
}

/**A map containing SVID values and corresponding SPIFFE IDs as the keys.*/
message SvidMap {
 map<string, Svid> map = 1;
}

/**A message returned by the Control Plane, which includes a map of signed SVIDs and
an array of all current Registration Entries which are relevant to the caller SPIFFE ID.*/
message SvidUpdate {
 SvidMap svidMap = 1;
 repeated RegistrationEntry registrationEntryList = 2;
}

/**A type which contains attestation data for specific platform.*/
message AttestedData {
 string type = 1;
 string data = 2;
}

/** */
message FetchBaseSVIDRequest {
 AttestedData attestedData = 1;
 bytes csr = 2;
}

/** */
message FetchBaseSVIDResponse {
 SvidUpdate spiffeEntry = 1;
}

/** */
message FetchSVIDRequest {
 repeated bytes csrList = 2;
}

/** */
message FetchSVIDResponse {
 SvidUpdate spiffeEntry = 1;
}

/**@exclude*/
message FetchCPBundleRequest {
}

/** */
message FetchCPBundleResponse {
 bytes cpBundle = 1;
}

/** */
message FetchFederatedBundleRequest {
 repeated string spiffeId = 1;
}

/** */
message FetchFederatedBundleResponse {
 map<string, bytes> map = 1;
}

service node {
 ///Attest the node, get base node SVID.
 rpc FetchBaseSVID(FetchBaseSVIDRequest) returns (FetchBaseSVIDResponse);
 ///Get Workload, Node Agent certs and CA trust bundles. Also used for rotation
 ///(Base Node SVID or the Registered Node SVID used for this call)
 ///(List can be empty to allow Node Agent cache refresh).
 rpc FetchSVID(FetchSVIDRequest) returns (FetchSVIDResponse);
 ///Called by NA periodically to support CP cert rotation. Cached in NA memory for WLs as well.
 rpc FetchCPBundle(FetchCPBundleRequest) returns (FetchCPBundleResponse);
 ///Called by the NA to fetch the named Federated CA Bundle.
 ///Used in the event that authorized workloads reference a Federated Bundle.
 rpc FetchFederatedBundle(FetchFederatedBundleRequest) returns (FetchFederatedBundleResponse);
}
