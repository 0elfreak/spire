// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	registration.proto

It has these top-level messages:
	RegisteredEntry
	FederatedBundle
	CreateEntryRequest
	CreateEntryResponse
	DeleteEntryRequest
	DeleteEntryResponse
	ListByAttestorRequest
	ListByAttestorResponse
	ListBySelectorRequest
	ListBySelectorResponse
	ListBySpiffeIDRequest
	ListBySpiffeIDResponse
	CreateFederatedBundleRequest
	CreateFederatedBundleResponse
	ListFederatedBundlesRequest
	ListFederatedBundlesResponse
	UpdateFederatedBundleRequest
	UpdateFederatedBundleResponse
	DeleteFederatedBundleRequest
	DeleteFederatedBundleResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegisteredEntry struct {
	SelectorType               string   `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector                   string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	Attestor                   string   `protobuf:"bytes,3,opt,name=attestor" json:"attestor,omitempty"`
	SpiffeId                   string   `protobuf:"bytes,4,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Ttl                        int32    `protobuf:"varint,5,opt,name=ttl" json:"ttl,omitempty"`
	FederateBundleSpiffeIdList []string `protobuf:"bytes,6,rep,name=federateBundleSpiffeIdList" json:"federateBundleSpiffeIdList,omitempty"`
}

func (m *RegisteredEntry) Reset()                    { *m = RegisteredEntry{} }
func (m *RegisteredEntry) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntry) ProtoMessage()               {}
func (*RegisteredEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisteredEntry) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *RegisteredEntry) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *RegisteredEntry) GetAttestor() string {
	if m != nil {
		return m.Attestor
	}
	return ""
}

func (m *RegisteredEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegisteredEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegisteredEntry) GetFederateBundleSpiffeIdList() []string {
	if m != nil {
		return m.FederateBundleSpiffeIdList
	}
	return nil
}

type FederatedBundle struct {
	FederateBundleSpiffeId string `protobuf:"bytes,1,opt,name=federateBundleSpiffeId" json:"federateBundleSpiffeId,omitempty"`
	FederateBundle         []byte `protobuf:"bytes,2,opt,name=federateBundle,proto3" json:"federateBundle,omitempty"`
	Ttl                    int32  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *FederatedBundle) Reset()                    { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string            { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()               {}
func (*FederatedBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FederatedBundle) GetFederateBundleSpiffeId() string {
	if m != nil {
		return m.FederateBundleSpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetFederateBundle() []byte {
	if m != nil {
		return m.FederateBundle
	}
	return nil
}

func (m *FederatedBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type CreateEntryRequest struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *CreateEntryRequest) Reset()                    { *m = CreateEntryRequest{} }
func (m *CreateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEntryRequest) ProtoMessage()               {}
func (*CreateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateEntryRequest) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

type CreateEntryResponse struct {
}

func (m *CreateEntryResponse) Reset()                    { *m = CreateEntryResponse{} }
func (m *CreateEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEntryResponse) ProtoMessage()               {}
func (*CreateEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DeleteEntryRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector     string `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *DeleteEntryRequest) Reset()                    { *m = DeleteEntryRequest{} }
func (m *DeleteEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntryRequest) ProtoMessage()               {}
func (*DeleteEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteEntryRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *DeleteEntryRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type DeleteEntryResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *DeleteEntryResponse) Reset()                    { *m = DeleteEntryResponse{} }
func (m *DeleteEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntryResponse) ProtoMessage()               {}
func (*DeleteEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteEntryResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

type ListByAttestorRequest struct {
	Attestor string `protobuf:"bytes,1,opt,name=attestor" json:"attestor,omitempty"`
}

func (m *ListByAttestorRequest) Reset()                    { *m = ListByAttestorRequest{} }
func (m *ListByAttestorRequest) String() string            { return proto.CompactTextString(m) }
func (*ListByAttestorRequest) ProtoMessage()               {}
func (*ListByAttestorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListByAttestorRequest) GetAttestor() string {
	if m != nil {
		return m.Attestor
	}
	return ""
}

type ListByAttestorResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListByAttestorResponse) Reset()                    { *m = ListByAttestorResponse{} }
func (m *ListByAttestorResponse) String() string            { return proto.CompactTextString(m) }
func (*ListByAttestorResponse) ProtoMessage()               {}
func (*ListByAttestorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListByAttestorResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

type ListBySelectorRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector     string `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *ListBySelectorRequest) Reset()                    { *m = ListBySelectorRequest{} }
func (m *ListBySelectorRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBySelectorRequest) ProtoMessage()               {}
func (*ListBySelectorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListBySelectorRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *ListBySelectorRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type ListBySelectorResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListBySelectorResponse) Reset()                    { *m = ListBySelectorResponse{} }
func (m *ListBySelectorResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBySelectorResponse) ProtoMessage()               {}
func (*ListBySelectorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListBySelectorResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

type ListBySpiffeIDRequest struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *ListBySpiffeIDRequest) Reset()                    { *m = ListBySpiffeIDRequest{} }
func (m *ListBySpiffeIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBySpiffeIDRequest) ProtoMessage()               {}
func (*ListBySpiffeIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListBySpiffeIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

type ListBySpiffeIDResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListBySpiffeIDResponse) Reset()                    { *m = ListBySpiffeIDResponse{} }
func (m *ListBySpiffeIDResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBySpiffeIDResponse) ProtoMessage()               {}
func (*ListBySpiffeIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListBySpiffeIDResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

type CreateFederatedBundleRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *CreateFederatedBundleRequest) Reset()                    { *m = CreateFederatedBundleRequest{} }
func (m *CreateFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedBundleRequest) ProtoMessage()               {}
func (*CreateFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateFederatedBundleRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

type CreateFederatedBundleResponse struct {
}

func (m *CreateFederatedBundleResponse) Reset()                    { *m = CreateFederatedBundleResponse{} }
func (m *CreateFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedBundleResponse) ProtoMessage()               {}
func (*CreateFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListFederatedBundlesRequest struct {
}

func (m *ListFederatedBundlesRequest) Reset()                    { *m = ListFederatedBundlesRequest{} }
func (m *ListFederatedBundlesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedBundlesRequest) ProtoMessage()               {}
func (*ListFederatedBundlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type ListFederatedBundlesResponse struct {
	FederatedBundleList []*FederatedBundle `protobuf:"bytes,1,rep,name=federatedBundleList" json:"federatedBundleList,omitempty"`
}

func (m *ListFederatedBundlesResponse) Reset()                    { *m = ListFederatedBundlesResponse{} }
func (m *ListFederatedBundlesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedBundlesResponse) ProtoMessage()               {}
func (*ListFederatedBundlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListFederatedBundlesResponse) GetFederatedBundleList() []*FederatedBundle {
	if m != nil {
		return m.FederatedBundleList
	}
	return nil
}

type UpdateFederatedBundleRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedBundleRequest) Reset()                    { *m = UpdateFederatedBundleRequest{} }
func (m *UpdateFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedBundleRequest) ProtoMessage()               {}
func (*UpdateFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateFederatedBundleRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

type UpdateFederatedBundleResponse struct {
}

func (m *UpdateFederatedBundleResponse) Reset()                    { *m = UpdateFederatedBundleResponse{} }
func (m *UpdateFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedBundleResponse) ProtoMessage()               {}
func (*UpdateFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

type DeleteFederatedBundleRequest struct {
	FederateBundleSpiffeId string `protobuf:"bytes,1,opt,name=federateBundleSpiffeId" json:"federateBundleSpiffeId,omitempty"`
}

func (m *DeleteFederatedBundleRequest) Reset()                    { *m = DeleteFederatedBundleRequest{} }
func (m *DeleteFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleRequest) ProtoMessage()               {}
func (*DeleteFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteFederatedBundleRequest) GetFederateBundleSpiffeId() string {
	if m != nil {
		return m.FederateBundleSpiffeId
	}
	return ""
}

type DeleteFederatedBundleResponse struct {
}

func (m *DeleteFederatedBundleResponse) Reset()                    { *m = DeleteFederatedBundleResponse{} }
func (m *DeleteFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleResponse) ProtoMessage()               {}
func (*DeleteFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func init() {
	proto.RegisterType((*RegisteredEntry)(nil), "pb.RegisteredEntry")
	proto.RegisterType((*FederatedBundle)(nil), "pb.FederatedBundle")
	proto.RegisterType((*CreateEntryRequest)(nil), "pb.CreateEntryRequest")
	proto.RegisterType((*CreateEntryResponse)(nil), "pb.CreateEntryResponse")
	proto.RegisterType((*DeleteEntryRequest)(nil), "pb.DeleteEntryRequest")
	proto.RegisterType((*DeleteEntryResponse)(nil), "pb.DeleteEntryResponse")
	proto.RegisterType((*ListByAttestorRequest)(nil), "pb.ListByAttestorRequest")
	proto.RegisterType((*ListByAttestorResponse)(nil), "pb.ListByAttestorResponse")
	proto.RegisterType((*ListBySelectorRequest)(nil), "pb.ListBySelectorRequest")
	proto.RegisterType((*ListBySelectorResponse)(nil), "pb.ListBySelectorResponse")
	proto.RegisterType((*ListBySpiffeIDRequest)(nil), "pb.ListBySpiffeIDRequest")
	proto.RegisterType((*ListBySpiffeIDResponse)(nil), "pb.ListBySpiffeIDResponse")
	proto.RegisterType((*CreateFederatedBundleRequest)(nil), "pb.CreateFederatedBundleRequest")
	proto.RegisterType((*CreateFederatedBundleResponse)(nil), "pb.CreateFederatedBundleResponse")
	proto.RegisterType((*ListFederatedBundlesRequest)(nil), "pb.ListFederatedBundlesRequest")
	proto.RegisterType((*ListFederatedBundlesResponse)(nil), "pb.ListFederatedBundlesResponse")
	proto.RegisterType((*UpdateFederatedBundleRequest)(nil), "pb.UpdateFederatedBundleRequest")
	proto.RegisterType((*UpdateFederatedBundleResponse)(nil), "pb.UpdateFederatedBundleResponse")
	proto.RegisterType((*DeleteFederatedBundleRequest)(nil), "pb.DeleteFederatedBundleRequest")
	proto.RegisterType((*DeleteFederatedBundleResponse)(nil), "pb.DeleteFederatedBundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error)
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	ListByAttestor(ctx context.Context, in *ListByAttestorRequest, opts ...grpc.CallOption) (*ListByAttestorResponse, error)
	ListBySelector(ctx context.Context, in *ListBySelectorRequest, opts ...grpc.CallOption) (*ListBySelectorResponse, error)
	ListBySpiffeID(ctx context.Context, in *ListBySpiffeIDRequest, opts ...grpc.CallOption) (*ListBySpiffeIDResponse, error)
	CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*CreateFederatedBundleResponse, error)
	ListFederatedBundles(ctx context.Context, in *ListFederatedBundlesRequest, opts ...grpc.CallOption) (*ListFederatedBundlesResponse, error)
	UpdateFederatedBundle(ctx context.Context, in *UpdateFederatedBundleRequest, opts ...grpc.CallOption) (*UpdateFederatedBundleResponse, error)
	DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*DeleteFederatedBundleResponse, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error) {
	out := new(CreateEntryResponse)
	err := grpc.Invoke(ctx, "/pb.registration/CreateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := grpc.Invoke(ctx, "/pb.registration/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByAttestor(ctx context.Context, in *ListByAttestorRequest, opts ...grpc.CallOption) (*ListByAttestorResponse, error) {
	out := new(ListByAttestorResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListByAttestor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *ListBySelectorRequest, opts ...grpc.CallOption) (*ListBySelectorResponse, error) {
	out := new(ListBySelectorResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListBySelector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *ListBySpiffeIDRequest, opts ...grpc.CallOption) (*ListBySpiffeIDResponse, error) {
	out := new(ListBySpiffeIDResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListBySpiffeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*CreateFederatedBundleResponse, error) {
	out := new(CreateFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/CreateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *ListFederatedBundlesRequest, opts ...grpc.CallOption) (*ListFederatedBundlesResponse, error) {
	out := new(ListFederatedBundlesResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListFederatedBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *UpdateFederatedBundleRequest, opts ...grpc.CallOption) (*UpdateFederatedBundleResponse, error) {
	out := new(UpdateFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/UpdateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*DeleteFederatedBundleResponse, error) {
	out := new(DeleteFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/DeleteFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error)
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	ListByAttestor(context.Context, *ListByAttestorRequest) (*ListByAttestorResponse, error)
	ListBySelector(context.Context, *ListBySelectorRequest) (*ListBySelectorResponse, error)
	ListBySpiffeID(context.Context, *ListBySpiffeIDRequest) (*ListBySpiffeIDResponse, error)
	CreateFederatedBundle(context.Context, *CreateFederatedBundleRequest) (*CreateFederatedBundleResponse, error)
	ListFederatedBundles(context.Context, *ListFederatedBundlesRequest) (*ListFederatedBundlesResponse, error)
	UpdateFederatedBundle(context.Context, *UpdateFederatedBundleRequest) (*UpdateFederatedBundleResponse, error)
	DeleteFederatedBundle(context.Context, *DeleteFederatedBundleRequest) (*DeleteFederatedBundleResponse, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByAttestor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByAttestorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByAttestor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListByAttestor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByAttestor(ctx, req.(*ListByAttestorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*ListBySelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySpiffeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*ListBySpiffeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*CreateFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederatedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListFederatedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, req.(*ListFederatedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*UpdateFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*DeleteFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "ListByAttestor",
			Handler:    _Registration_ListByAttestor_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "ListFederatedBundles",
			Handler:    _Registration_ListFederatedBundles_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 586 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0x56, 0x16, 0x36, 0xb1, 0xd7, 0x6a, 0x45, 0x2e, 0x2d, 0x21, 0x74, 0x5a, 0xf0, 0x01, 0xf5,
	0xd4, 0xc3, 0x26, 0x71, 0xa3, 0x12, 0x63, 0x03, 0x21, 0x71, 0x4a, 0x07, 0x08, 0x69, 0x08, 0xb5,
	0xe4, 0x15, 0x55, 0xaa, 0x9a, 0x10, 0x7b, 0x87, 0x9e, 0xf9, 0x99, 0x48, 0xfc, 0x16, 0xe4, 0xd8,
	0x49, 0x6c, 0xd7, 0xc9, 0x01, 0xba, 0xd3, 0xe6, 0x7c, 0xef, 0x7d, 0xef, 0xf3, 0xf3, 0xfb, 0xde,
	0x06, 0x24, 0xc7, 0x1f, 0x2b, 0xc6, 0xf3, 0x39, 0x5f, 0xa5, 0x9b, 0x49, 0x96, 0xa7, 0x3c, 0x25,
	0x07, 0xd9, 0x82, 0xfe, 0xf6, 0xa0, 0x17, 0x17, 0x10, 0xe6, 0x98, 0x5c, 0x6f, 0x78, 0xbe, 0x25,
	0x14, 0xba, 0x0c, 0xd7, 0xf8, 0x9d, 0xa7, 0xf9, 0xcd, 0x36, 0xc3, 0xc0, 0x8b, 0xbc, 0xf1, 0x71,
	0x6c, 0x7c, 0x23, 0x21, 0x3c, 0x2c, 0xcf, 0xc1, 0x41, 0x81, 0x57, 0x67, 0x81, 0xcd, 0x39, 0x47,
	0x26, 0x30, 0x5f, 0x62, 0xe5, 0xb9, 0xc8, 0xcb, 0x56, 0xcb, 0x25, 0xbe, 0x4f, 0x82, 0x07, 0x2a,
	0x4f, 0x9d, 0xc9, 0x23, 0xf0, 0x39, 0x5f, 0x07, 0x87, 0x91, 0x37, 0x3e, 0x8c, 0xc5, 0xaf, 0x64,
	0x0a, 0xe1, 0x12, 0x13, 0xcc, 0xe7, 0x1c, 0x2f, 0xef, 0x36, 0xc9, 0x1a, 0x67, 0x2a, 0xf6, 0xc3,
	0x8a, 0xf1, 0xe0, 0x28, 0xf2, 0xc7, 0xc7, 0x71, 0x4b, 0x04, 0xfd, 0xe5, 0x41, 0xef, 0xad, 0x82,
	0x13, 0x89, 0x93, 0x97, 0x30, 0x74, 0x67, 0xa8, 0x7b, 0x36, 0xa0, 0xe4, 0x05, 0x9c, 0x98, 0x48,
	0x71, 0xef, 0x6e, 0x6c, 0x7d, 0x2d, 0x6f, 0xe1, 0x57, 0xb7, 0xa0, 0x33, 0x20, 0x6f, 0x72, 0x9c,
	0x73, 0x2c, 0xda, 0x1b, 0xe3, 0xcf, 0x3b, 0x64, 0x9c, 0xbc, 0x82, 0x5e, 0x6e, 0x36, 0xbe, 0x10,
	0xd0, 0x39, 0xef, 0x4f, 0xb2, 0xc5, 0xc4, 0x7a, 0x93, 0xd8, 0x8e, 0xa5, 0x03, 0xe8, 0x1b, 0xa4,
	0x2c, 0x4b, 0x37, 0x0c, 0xe9, 0x0d, 0x90, 0x2b, 0x5c, 0xa3, 0x55, 0xeb, 0x3f, 0x5f, 0x94, 0xde,
	0x42, 0xdf, 0x60, 0x95, 0xc5, 0xc8, 0x35, 0xf4, 0x2d, 0x59, 0xc5, 0xbb, 0x78, 0x91, 0xdf, 0x74,
	0x0d, 0x57, 0x3c, 0xbd, 0x80, 0x81, 0xf8, 0x79, 0xb9, 0x7d, 0xad, 0xa6, 0xa4, 0x94, 0xad, 0x0f,
	0x92, 0x67, 0x0e, 0x12, 0xfd, 0x06, 0x43, 0x3b, 0x69, 0xbf, 0xaa, 0x3e, 0x97, 0xaa, 0x66, 0xaa,
	0x0b, 0xfb, 0x6a, 0x66, 0xa5, 0xbc, 0x26, 0xbe, 0xa7, 0x7e, 0xaa, 0xd9, 0xbd, 0xd2, 0xfa, 0xc9,
	0xcc, 0x61, 0xaf, 0xce, 0x9a, 0xaa, 0x2a, 0x69, 0xbf, 0xaa, 0xbe, 0xc2, 0x48, 0x0e, 0xac, 0x65,
	0x48, 0xcd, 0x0f, 0x4b, 0x13, 0xd1, 0xfd, 0x60, 0x27, 0xd9, 0xb1, 0xf4, 0x0c, 0x4e, 0x1b, 0xe8,
	0x95, 0x33, 0x4e, 0xe1, 0x99, 0xd0, 0x61, 0xc1, 0x4c, 0x95, 0xa7, 0x08, 0x23, 0x37, 0x5c, 0x77,
	0xc1, 0x2a, 0x69, 0x77, 0xc1, 0x2e, 0xec, 0x8a, 0x17, 0x5d, 0xf8, 0x98, 0x25, 0xf7, 0xd9, 0x85,
	0x06, 0x7a, 0xd5, 0x85, 0x4f, 0x30, 0x92, 0x4e, 0x6e, 0xa8, 0xff, 0x8f, 0xdb, 0x51, 0x14, 0x6e,
	0xe0, 0x95, 0x85, 0xcf, 0xff, 0x1c, 0x42, 0x57, 0xff, 0x1b, 0x44, 0xa6, 0xd0, 0xd1, 0x16, 0x18,
	0x19, 0x8a, 0xfb, 0xed, 0xae, 0xc9, 0xf0, 0xc9, 0xce, 0x77, 0xf5, 0x20, 0x53, 0xe8, 0x68, 0x3b,
	0x49, 0xe6, 0xef, 0xae, 0x3e, 0x99, 0xef, 0x5a, 0x5e, 0xef, 0xe0, 0xc4, 0x5c, 0x20, 0xe4, 0xa9,
	0x08, 0x75, 0x6e, 0xa2, 0x30, 0x74, 0x41, 0x36, 0x51, 0xe9, 0x67, 0x9d, 0xc8, 0x5a, 0x1e, 0x3a,
	0xd1, 0x8e, 0xfd, 0x6b, 0x22, 0x65, 0x41, 0x83, 0xc8, 0xf4, 0xb2, 0x41, 0x64, 0x3b, 0xf6, 0x16,
	0x06, 0x4e, 0x2f, 0x90, 0xa8, 0x6e, 0xa6, 0xfb, 0xfd, 0xc3, 0xe7, 0x2d, 0x11, 0x8a, 0xfd, 0x0b,
	0x3c, 0x76, 0x39, 0x85, 0x9c, 0x95, 0x8a, 0x1a, 0x2c, 0x16, 0x46, 0xcd, 0x01, 0xb5, 0x70, 0xe7,
	0xf8, 0x4a, 0xe1, 0x6d, 0xc6, 0x91, 0xc2, 0x5b, 0x67, 0x5f, 0xb0, 0x3b, 0x67, 0x54, 0xb2, 0xb7,
	0xd9, 0x42, 0xb2, 0xb7, 0x0e, 0xf8, 0xe2, 0xa8, 0xf8, 0xa7, 0xea, 0xe2, 0x6f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0xfc, 0x59, 0xf9, 0x6a, 0x09, 0x00, 0x00,
}
