// Code generated by go-bindata.
// sources:
// _migrations/000-initial.up.sql
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000InitialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd2\xc1\x8e\x9b\x30\x10\x06\xe0\xbb\x9f\x62\x8e\x20\x71\xd8\x56\xbd\x55\xad\x44\xa8\xd5\xa0\x05\xb3\xf5\x9a\x76\x73\xb2\x9c\x7a\x22\x21\x11\x82\x8c\x89\xd2\xb7\xaf\x62\x2a\x42\x02\xa1\x68\x93\x63\xf8\xc7\x63\xfe\x8f\x88\xd3\x50\x50\x10\xe1\x2a\xa1\xb0\x43\x8d\x46\x59\xd4\x72\xdb\x56\xba\xc4\x06\x3c\x02\x50\x68\xe8\x7f\x31\x13\xf4\x3b\xe5\xc0\x32\x01\x2c\x4f\x12\x78\xe1\x71\x1a\xf2\x0d\x3c\xd3\x0d\x84\xb9\xc8\x62\x16\x71\x9a\x52\x26\x02\x02\xd0\xd4\xc5\x6e\x87\xd2\x1d\xf0\x33\xe4\xd1\x3a\xe4\xde\x87\xa7\x8f\x9f\xfc\x7e\x3e\x20\x04\xa0\x5b\xd6\x2d\x58\x25\xd9\x6a\xf0\x14\xc0\xda\x72\xb8\x1d\xae\x47\x7f\x1b\x74\xf7\x55\x16\x40\xc4\x29\x7d\x15\x61\xfa\x72\x35\xdf\xd6\xfa\x3f\x09\x8d\x25\x8e\x12\xee\xf4\x68\x4d\xa3\x67\xcf\xda\xf2\xeb\x97\x27\x9f\xf8\x9f\x09\xf9\x57\x57\xce\xe2\x1f\x39\x85\x98\x7d\xa3\x6f\x50\xe8\x93\x1c\x35\x27\xfb\x77\x27\x00\x19\x1b\x57\xeb\xf5\x01\x9f\x00\xfc\x5a\x53\x4e\x87\x37\x89\x5f\xdd\xfd\x2e\x2b\x3b\x21\x65\x2d\x36\xe7\x48\x75\xd0\x28\xb1\xb2\xa6\x98\x50\x7a\xc4\x69\x56\x4a\x2b\xab\xa4\xfd\x53\x77\x58\x82\xbe\x89\x6e\xdd\xb0\xce\x06\x4d\xa1\x4a\x59\xb5\xfb\x2d\x9a\x3b\x19\x3c\xd5\x85\xc1\xc6\x55\x3e\xcd\x72\x63\xbb\x44\x77\x89\xef\x20\x33\xeb\x39\xd9\xf3\xad\xe9\x64\xe8\x7d\xae\xee\x04\x83\xcd\xa1\x3c\xa2\x91\x7b\x55\xcf\xd8\x3e\x84\x3b\xa7\xdb\xc1\x3a\xb1\x61\x7f\x47\x55\xb6\x78\xfb\xf7\xc8\x67\x11\xd0\x22\xa1\x85\x44\x77\x2b\x73\x1f\xa8\x74\xb7\xee\x9c\xee\x26\x2f\x56\xc1\x79\x26\x70\x33\xf3\x6c\x7f\x03\x00\x00\xff\xff\x7f\xa4\xad\xc5\x30\x05\x00\x00")

func _000InitialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000InitialUpSql,
		"000-initial.up.sql",
	)
}

func _000InitialUpSql() (*asset, error) {
	bytes, err := _000InitialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000-initial.up.sql", size: 1328, mode: os.FileMode(420), modTime: time.Unix(1502748572, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000-initial.up.sql": _000InitialUpSql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"000-initial.up.sql": &bintree{_000InitialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

