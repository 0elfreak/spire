// Code generated by MockGen. DO NOT EDIT.
// Source: ca.go

package services

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCA is a mock of CA interface
type MockCA struct {
	ctrl     *gomock.Controller
	recorder *MockCAMockRecorder
}

// MockCAMockRecorder is the mock recorder for MockCA
type MockCAMockRecorder struct {
	mock *MockCA
}

// NewMockCA creates a new mock instance
func NewMockCA(ctrl *gomock.Controller) *MockCA {
	mock := &MockCA{ctrl: ctrl}
	mock.recorder = &MockCAMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockCA) EXPECT() *MockCAMockRecorder {
	return _m.recorder
}

// SignCsr mocks base method
func (_m *MockCA) SignCsr(csr []byte) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "SignCsr", csr)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignCsr indicates an expected call of SignCsr
func (_mr *MockCAMockRecorder) SignCsr(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "SignCsr", reflect.TypeOf((*MockCA)(nil).SignCsr), arg0)
}

// GetSpiffeIDFromCSR mocks base method
func (_m *MockCA) GetSpiffeIDFromCSR(csr []byte) (string, error) {
	ret := _m.ctrl.Call(_m, "GetSpiffeIDFromCSR", csr)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSpiffeIDFromCSR indicates an expected call of GetSpiffeIDFromCSR
func (_mr *MockCAMockRecorder) GetSpiffeIDFromCSR(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetSpiffeIDFromCSR", reflect.TypeOf((*MockCA)(nil).GetSpiffeIDFromCSR), arg0)
}
