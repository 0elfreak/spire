// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workload.v1.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	workload.v1.proto

It has these top-level messages:
	SvidBundle
	FetchSVIDBundleRequest
	FetchSVIDBundleResponse
	FetchSVIDBundlesRequest
	FetchSVIDBundlesResponse
	FetchFederatedBundlesRequest
	FetchFederatedBundlesResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type SvidBundle struct {
	SpiffeId   string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Svid       []byte `protobuf:"bytes,2,opt,name=svid,proto3" json:"svid,omitempty"`
	PrivateKey []byte `protobuf:"bytes,3,opt,name=privateKey,proto3" json:"privateKey,omitempty"`
	Ttl        int32  `protobuf:"varint,4,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *SvidBundle) Reset()                    { *m = SvidBundle{} }
func (m *SvidBundle) String() string            { return proto1.CompactTextString(m) }
func (*SvidBundle) ProtoMessage()               {}
func (*SvidBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SvidBundle) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *SvidBundle) GetSvid() []byte {
	if m != nil {
		return m.Svid
	}
	return nil
}

func (m *SvidBundle) GetPrivateKey() []byte {
	if m != nil {
		return m.PrivateKey
	}
	return nil
}

func (m *SvidBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

type FetchSVIDBundleRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	SpiffeId     string `protobuf:"bytes,2,opt,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *FetchSVIDBundleRequest) Reset()                    { *m = FetchSVIDBundleRequest{} }
func (m *FetchSVIDBundleRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchSVIDBundleRequest) ProtoMessage()               {}
func (*FetchSVIDBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FetchSVIDBundleRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *FetchSVIDBundleRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

type FetchSVIDBundleResponse struct {
	SvidBundle *SvidBundle `protobuf:"bytes,1,opt,name=svidBundle" json:"svidBundle,omitempty"`
}

func (m *FetchSVIDBundleResponse) Reset()                    { *m = FetchSVIDBundleResponse{} }
func (m *FetchSVIDBundleResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchSVIDBundleResponse) ProtoMessage()               {}
func (*FetchSVIDBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *FetchSVIDBundleResponse) GetSvidBundle() *SvidBundle {
	if m != nil {
		return m.SvidBundle
	}
	return nil
}

type FetchSVIDBundlesRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
}

func (m *FetchSVIDBundlesRequest) Reset()                    { *m = FetchSVIDBundlesRequest{} }
func (m *FetchSVIDBundlesRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchSVIDBundlesRequest) ProtoMessage()               {}
func (*FetchSVIDBundlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FetchSVIDBundlesRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

type FetchSVIDBundlesResponse struct {
	SvidBundle []*SvidBundle `protobuf:"bytes,1,rep,name=svidBundle" json:"svidBundle,omitempty"`
	CpBundle   []byte        `protobuf:"bytes,2,opt,name=cpBundle,proto3" json:"cpBundle,omitempty"`
}

func (m *FetchSVIDBundlesResponse) Reset()                    { *m = FetchSVIDBundlesResponse{} }
func (m *FetchSVIDBundlesResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchSVIDBundlesResponse) ProtoMessage()               {}
func (*FetchSVIDBundlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FetchSVIDBundlesResponse) GetSvidBundle() []*SvidBundle {
	if m != nil {
		return m.SvidBundle
	}
	return nil
}

func (m *FetchSVIDBundlesResponse) GetCpBundle() []byte {
	if m != nil {
		return m.CpBundle
	}
	return nil
}

type FetchFederatedBundlesRequest struct {
}

func (m *FetchFederatedBundlesRequest) Reset()                    { *m = FetchFederatedBundlesRequest{} }
func (m *FetchFederatedBundlesRequest) String() string            { return proto1.CompactTextString(m) }
func (*FetchFederatedBundlesRequest) ProtoMessage()               {}
func (*FetchFederatedBundlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type FetchFederatedBundlesResponse struct {
}

func (m *FetchFederatedBundlesResponse) Reset()                    { *m = FetchFederatedBundlesResponse{} }
func (m *FetchFederatedBundlesResponse) String() string            { return proto1.CompactTextString(m) }
func (*FetchFederatedBundlesResponse) ProtoMessage()               {}
func (*FetchFederatedBundlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func init() {
	proto1.RegisterType((*SvidBundle)(nil), "proto.SvidBundle")
	proto1.RegisterType((*FetchSVIDBundleRequest)(nil), "proto.FetchSVIDBundleRequest")
	proto1.RegisterType((*FetchSVIDBundleResponse)(nil), "proto.FetchSVIDBundleResponse")
	proto1.RegisterType((*FetchSVIDBundlesRequest)(nil), "proto.FetchSVIDBundlesRequest")
	proto1.RegisterType((*FetchSVIDBundlesResponse)(nil), "proto.FetchSVIDBundlesResponse")
	proto1.RegisterType((*FetchFederatedBundlesRequest)(nil), "proto.FetchFederatedBundlesRequest")
	proto1.RegisterType((*FetchFederatedBundlesResponse)(nil), "proto.FetchFederatedBundlesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Workload service

type WorkloadClient interface {
	FetchSVIDBundle(ctx context.Context, in *FetchSVIDBundleRequest, opts ...grpc.CallOption) (*FetchSVIDBundleResponse, error)
	FetchSVIDBundles(ctx context.Context, in *FetchSVIDBundlesRequest, opts ...grpc.CallOption) (*FetchSVIDBundlesResponse, error)
	FetchFederatedBundles(ctx context.Context, in *FetchFederatedBundlesRequest, opts ...grpc.CallOption) (*FetchFederatedBundlesResponse, error)
}

type workloadClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadClient(cc *grpc.ClientConn) WorkloadClient {
	return &workloadClient{cc}
}

func (c *workloadClient) FetchSVIDBundle(ctx context.Context, in *FetchSVIDBundleRequest, opts ...grpc.CallOption) (*FetchSVIDBundleResponse, error) {
	out := new(FetchSVIDBundleResponse)
	err := grpc.Invoke(ctx, "/proto.Workload/FetchSVIDBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) FetchSVIDBundles(ctx context.Context, in *FetchSVIDBundlesRequest, opts ...grpc.CallOption) (*FetchSVIDBundlesResponse, error) {
	out := new(FetchSVIDBundlesResponse)
	err := grpc.Invoke(ctx, "/proto.Workload/FetchSVIDBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadClient) FetchFederatedBundles(ctx context.Context, in *FetchFederatedBundlesRequest, opts ...grpc.CallOption) (*FetchFederatedBundlesResponse, error) {
	out := new(FetchFederatedBundlesResponse)
	err := grpc.Invoke(ctx, "/proto.Workload/FetchFederatedBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Workload service

type WorkloadServer interface {
	FetchSVIDBundle(context.Context, *FetchSVIDBundleRequest) (*FetchSVIDBundleResponse, error)
	FetchSVIDBundles(context.Context, *FetchSVIDBundlesRequest) (*FetchSVIDBundlesResponse, error)
	FetchFederatedBundles(context.Context, *FetchFederatedBundlesRequest) (*FetchFederatedBundlesResponse, error)
}

func RegisterWorkloadServer(s *grpc.Server, srv WorkloadServer) {
	s.RegisterService(&_Workload_serviceDesc, srv)
}

func _Workload_FetchSVIDBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSVIDBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).FetchSVIDBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Workload/FetchSVIDBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).FetchSVIDBundle(ctx, req.(*FetchSVIDBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_FetchSVIDBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchSVIDBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).FetchSVIDBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Workload/FetchSVIDBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).FetchSVIDBundles(ctx, req.(*FetchSVIDBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Workload_FetchFederatedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchFederatedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadServer).FetchFederatedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Workload/FetchFederatedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadServer).FetchFederatedBundles(ctx, req.(*FetchFederatedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Workload_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Workload",
	HandlerType: (*WorkloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchSVIDBundle",
			Handler:    _Workload_FetchSVIDBundle_Handler,
		},
		{
			MethodName: "FetchSVIDBundles",
			Handler:    _Workload_FetchSVIDBundles_Handler,
		},
		{
			MethodName: "FetchFederatedBundles",
			Handler:    _Workload_FetchFederatedBundles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workload.v1.proto",
}

func init() { proto1.RegisterFile("workload.v1.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x4d, 0x4b, 0x02, 0x41,
	0x18, 0xc7, 0x59, 0x5f, 0xc2, 0x9e, 0x84, 0xf4, 0x81, 0x6a, 0x59, 0xf2, 0x85, 0xa9, 0x83, 0x27,
	0x41, 0x3b, 0x77, 0x89, 0x10, 0xa4, 0x0e, 0xb1, 0x46, 0x75, 0x55, 0xe7, 0x91, 0x96, 0x16, 0x67,
	0xda, 0x19, 0x37, 0xfc, 0x20, 0x7d, 0xdf, 0x70, 0x76, 0x32, 0x57, 0x9d, 0xa2, 0xd3, 0xce, 0x3c,
	0xaf, 0xbf, 0xff, 0x7f, 0x07, 0xea, 0x1f, 0x22, 0x79, 0x8b, 0xc5, 0x98, 0x77, 0xd3, 0x5e, 0x57,
	0x26, 0x42, 0x0b, 0x2c, 0x9b, 0x0f, 0x9b, 0x03, 0x8c, 0xd2, 0x88, 0xdf, 0x2c, 0xe6, 0x3c, 0x26,
	0x0c, 0xa0, 0xa2, 0x64, 0x34, 0x9b, 0xd1, 0x90, 0xfb, 0x5e, 0xdb, 0xeb, 0x1c, 0x86, 0xeb, 0x3b,
	0x22, 0x94, 0x54, 0x1a, 0x71, 0xbf, 0xd0, 0xf6, 0x3a, 0xd5, 0xd0, 0x9c, 0xb1, 0x09, 0x20, 0x93,
	0x28, 0x1d, 0x6b, 0xba, 0xa3, 0xa5, 0x5f, 0x34, 0x99, 0x8d, 0x08, 0xd6, 0xa0, 0xa8, 0x75, 0xec,
	0x97, 0xda, 0x5e, 0xa7, 0x1c, 0xae, 0x8e, 0xec, 0x05, 0x4e, 0x07, 0xa4, 0xa7, 0xaf, 0xa3, 0xa7,
	0xe1, 0x6d, 0xb6, 0x34, 0xa4, 0xf7, 0x05, 0x29, 0x8d, 0x0c, 0xaa, 0x8a, 0x62, 0x9a, 0x6a, 0x91,
	0x3c, 0x2e, 0x25, 0xd9, 0xfd, 0xb9, 0x58, 0x8e, 0xaf, 0x90, 0xe7, 0x63, 0xf7, 0x70, 0xb6, 0x33,
	0x59, 0x49, 0x31, 0x57, 0x84, 0x3d, 0x00, 0xb5, 0x16, 0x69, 0x06, 0x1f, 0xf5, 0xeb, 0x99, 0x0f,
	0xdd, 0x1f, 0xf5, 0xe1, 0x46, 0x11, 0xbb, 0xde, 0x99, 0xa6, 0xfe, 0x01, 0xca, 0x22, 0xf0, 0x77,
	0xdb, 0x1d, 0x34, 0xc5, 0x3f, 0x69, 0x56, 0xba, 0xa7, 0xd2, 0x36, 0x64, 0xfe, 0xaf, 0xef, 0xac,
	0x09, 0xe7, 0x66, 0xd5, 0x80, 0x38, 0x25, 0x63, 0x4d, 0x3c, 0x8f, 0xcb, 0x5a, 0xd0, 0x70, 0xe4,
	0x33, 0x9e, 0xfe, 0x67, 0x01, 0x2a, 0xcf, 0xf6, 0x7d, 0xe0, 0x03, 0x1c, 0x6f, 0x81, 0x63, 0xc3,
	0xb2, 0xed, 0xff, 0x6f, 0x41, 0xd3, 0x95, 0xb6, 0x72, 0x47, 0x50, 0xdb, 0xb6, 0x02, 0x1d, 0x3d,
	0xdf, 0xcc, 0x41, 0xcb, 0x99, 0xb7, 0x43, 0x27, 0x70, 0xb2, 0x57, 0x14, 0x5e, 0x6c, 0x76, 0x3a,
	0x2c, 0x09, 0x2e, 0x7f, 0x2f, 0xca, 0x76, 0x4c, 0x0e, 0x4c, 0xd1, 0xd5, 0x57, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x05, 0xfc, 0x9c, 0xac, 0x3d, 0x03, 0x00, 0x00,
}
