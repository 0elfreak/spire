// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

/*
Package sri_proto is a generated protocol buffer package.

It is generated from these files:
	server.proto

It has these top-level messages:
	PluginInfoRequest
	PluginInfoReply
	StopRequest
	StopReply
*/
package sri_proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import sri_proto1 "github.com/spiffe/sri/control_plane/plugins/common/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type ConfigureRequest sri_proto1.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*sri_proto1.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*sri_proto1.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*sri_proto1.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type ConfigureResponse sri_proto1.ConfigureResponse

func (m *ConfigureResponse) Reset()         { (*sri_proto1.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string { return (*sri_proto1.ConfigureResponse)(m).String() }
func (*ConfigureResponse) ProtoMessage()    {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*sri_proto1.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type GetPluginInfoRequest sri_proto1.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset()         { (*sri_proto1.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string { return (*sri_proto1.GetPluginInfoRequest)(m).String() }
func (*GetPluginInfoRequest) ProtoMessage()    {}

// GetPluginInfoResponse from public import github.com/spiffe/sri/control_plane/plugins/common/proto/common.proto
type GetPluginInfoResponse sri_proto1.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset() { (*sri_proto1.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).String()
}
func (*GetPluginInfoResponse) ProtoMessage() {}
func (m *GetPluginInfoResponse) GetName() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetName()
}
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetType()
}
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*sri_proto1.GetPluginInfoResponse)(m).GetCompany()
}

type PluginInfoRequest struct {
}

func (m *PluginInfoRequest) Reset()                    { *m = PluginInfoRequest{} }
func (m *PluginInfoRequest) String() string            { return proto.CompactTextString(m) }
func (*PluginInfoRequest) ProtoMessage()               {}
func (*PluginInfoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PluginInfoReply struct {
	PluginInfo []*sri_proto1.GetPluginInfoResponse `protobuf:"bytes,1,rep,name=pluginInfo" json:"pluginInfo,omitempty"`
}

func (m *PluginInfoReply) Reset()                    { *m = PluginInfoReply{} }
func (m *PluginInfoReply) String() string            { return proto.CompactTextString(m) }
func (*PluginInfoReply) ProtoMessage()               {}
func (*PluginInfoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PluginInfoReply) GetPluginInfo() []*sri_proto1.GetPluginInfoResponse {
	if m != nil {
		return m.PluginInfo
	}
	return nil
}

type StopRequest struct {
}

func (m *StopRequest) Reset()                    { *m = StopRequest{} }
func (m *StopRequest) String() string            { return proto.CompactTextString(m) }
func (*StopRequest) ProtoMessage()               {}
func (*StopRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type StopReply struct {
}

func (m *StopReply) Reset()                    { *m = StopReply{} }
func (m *StopReply) String() string            { return proto.CompactTextString(m) }
func (*StopReply) ProtoMessage()               {}
func (*StopReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*PluginInfoRequest)(nil), "sri_proto.PluginInfoRequest")
	proto.RegisterType((*PluginInfoReply)(nil), "sri_proto.PluginInfoReply")
	proto.RegisterType((*StopRequest)(nil), "sri_proto.StopRequest")
	proto.RegisterType((*StopReply)(nil), "sri_proto.StopReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Server service

type ServerClient interface {
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error)
	PluginInfo(ctx context.Context, in *PluginInfoRequest, opts ...grpc.CallOption) (*PluginInfoReply, error)
}

type serverClient struct {
	cc *grpc.ClientConn
}

func NewServerClient(cc *grpc.ClientConn) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopReply, error) {
	out := new(StopReply)
	err := grpc.Invoke(ctx, "/sri_proto.Server/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) PluginInfo(ctx context.Context, in *PluginInfoRequest, opts ...grpc.CallOption) (*PluginInfoReply, error) {
	out := new(PluginInfoReply)
	err := grpc.Invoke(ctx, "/sri_proto.Server/PluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Server service

type ServerServer interface {
	Stop(context.Context, *StopRequest) (*StopReply, error)
	PluginInfo(context.Context, *PluginInfoRequest) (*PluginInfoReply, error)
}

func RegisterServerServer(s *grpc.Server, srv ServerServer) {
	s.RegisterService(&_Server_serviceDesc, srv)
}

func _Server_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sri_proto.Server/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_PluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).PluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sri_proto.Server/PluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).PluginInfo(ctx, req.(*PluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_serviceDesc = grpc.ServiceDesc{
	ServiceName: "sri_proto.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Stop",
			Handler:    _Server_Stop_Handler,
		},
		{
			MethodName: "PluginInfo",
			Handler:    _Server_PluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}

func init() { proto.RegisterFile("server.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x8f, 0xcd, 0x4a, 0xc3, 0x40,
	0x10, 0x80, 0x2d, 0x4a, 0xa1, 0x13, 0x45, 0x5c, 0x45, 0x24, 0x78, 0x28, 0x39, 0x79, 0xda, 0x85,
	0xea, 0x03, 0x78, 0x51, 0xf1, 0x56, 0x9a, 0x07, 0x28, 0x36, 0x4c, 0xea, 0xc2, 0x66, 0x67, 0xdc,
	0xd9, 0x08, 0x79, 0x01, 0x9f, 0x5b, 0xba, 0xd5, 0xba, 0x10, 0xbc, 0xcd, 0x7c, 0x33, 0xdf, 0xfc,
	0xc0, 0xa9, 0x60, 0xf8, 0xc4, 0xa0, 0x39, 0x50, 0x24, 0x35, 0x93, 0x60, 0xd7, 0x29, 0x2c, 0x9f,
	0xb6, 0x36, 0xbe, 0xf7, 0x1b, 0xdd, 0x50, 0x67, 0x84, 0x6d, 0xdb, 0xa2, 0x91, 0x60, 0x4d, 0x43,
	0x3e, 0x06, 0x72, 0x6b, 0x76, 0x6f, 0x1e, 0x0d, 0xbb, 0x7e, 0x6b, 0xbd, 0x98, 0x86, 0xba, 0x8e,
	0xbc, 0x49, 0xe6, 0x4f, 0xb2, 0x9f, 0x58, 0x5d, 0xc2, 0xc5, 0x32, 0x35, 0xbd, 0xfa, 0x96, 0x56,
	0xf8, 0xd1, 0xa3, 0xc4, 0xaa, 0x86, 0xf3, 0x1c, 0xb2, 0x1b, 0xd4, 0x23, 0x00, 0x1f, 0xd0, 0xcd,
	0x64, 0x7e, 0x7c, 0x57, 0x2c, 0xe6, 0xfa, 0x70, 0x8e, 0x7e, 0xc1, 0x98, 0x2b, 0xc2, 0xe4, 0x05,
	0x57, 0x99, 0x53, 0x9d, 0x41, 0x51, 0x47, 0xe2, 0xdf, 0x1d, 0x05, 0xcc, 0xf6, 0x29, 0xbb, 0x61,
	0xf1, 0x35, 0x81, 0x69, 0x9d, 0x1e, 0x55, 0x0f, 0x70, 0xb2, 0xe3, 0xea, 0x3a, 0x1b, 0x9e, 0x79,
	0xe5, 0xd5, 0x88, 0xef, 0xce, 0x7b, 0x06, 0xf8, 0x5b, 0xaf, 0x6e, 0xb3, 0x9e, 0xd1, 0x77, 0x65,
	0xf9, 0x4f, 0x95, 0xdd, 0xb0, 0x3c, 0xda, 0x4c, 0x53, 0xe1, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x81, 0xb3, 0xcf, 0xef, 0x79, 0x01, 0x00, 0x00,
}
