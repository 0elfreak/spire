// Code generated by protoc-gen-go. DO NOT EDIT.
// source: workload_attestor.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	workload_attestor.proto

It has these top-level messages:
	AttestRequest
	AttestResponse
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import proto2 "github.com/spiffe/sri/node_agent/plugins/common/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// ConfigureRequest from public import github.com/spiffe/sri/node_agent/plugins/common/proto/common.proto
type ConfigureRequest proto2.ConfigureRequest

func (m *ConfigureRequest) Reset()         { (*proto2.ConfigureRequest)(m).Reset() }
func (m *ConfigureRequest) String() string { return (*proto2.ConfigureRequest)(m).String() }
func (*ConfigureRequest) ProtoMessage()    {}
func (m *ConfigureRequest) GetConfiguration() string {
	return (*proto2.ConfigureRequest)(m).GetConfiguration()
}

// ConfigureResponse from public import github.com/spiffe/sri/node_agent/plugins/common/proto/common.proto
type ConfigureResponse proto2.ConfigureResponse

func (m *ConfigureResponse) Reset()         { (*proto2.ConfigureResponse)(m).Reset() }
func (m *ConfigureResponse) String() string { return (*proto2.ConfigureResponse)(m).String() }
func (*ConfigureResponse) ProtoMessage()    {}
func (m *ConfigureResponse) GetErrorList() []string {
	return (*proto2.ConfigureResponse)(m).GetErrorList()
}

// GetPluginInfoRequest from public import github.com/spiffe/sri/node_agent/plugins/common/proto/common.proto
type GetPluginInfoRequest proto2.GetPluginInfoRequest

func (m *GetPluginInfoRequest) Reset()         { (*proto2.GetPluginInfoRequest)(m).Reset() }
func (m *GetPluginInfoRequest) String() string { return (*proto2.GetPluginInfoRequest)(m).String() }
func (*GetPluginInfoRequest) ProtoMessage()    {}

// GetPluginInfoResponse from public import github.com/spiffe/sri/node_agent/plugins/common/proto/common.proto
type GetPluginInfoResponse proto2.GetPluginInfoResponse

func (m *GetPluginInfoResponse) Reset()          { (*proto2.GetPluginInfoResponse)(m).Reset() }
func (m *GetPluginInfoResponse) String() string  { return (*proto2.GetPluginInfoResponse)(m).String() }
func (*GetPluginInfoResponse) ProtoMessage()     {}
func (m *GetPluginInfoResponse) GetName() string { return (*proto2.GetPluginInfoResponse)(m).GetName() }
func (m *GetPluginInfoResponse) GetCategory() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCategory()
}
func (m *GetPluginInfoResponse) GetType() string { return (*proto2.GetPluginInfoResponse)(m).GetType() }
func (m *GetPluginInfoResponse) GetDescription() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDescription()
}
func (m *GetPluginInfoResponse) GetDateCreated() string {
	return (*proto2.GetPluginInfoResponse)(m).GetDateCreated()
}
func (m *GetPluginInfoResponse) GetLocation() string {
	return (*proto2.GetPluginInfoResponse)(m).GetLocation()
}
func (m *GetPluginInfoResponse) GetVersion() string {
	return (*proto2.GetPluginInfoResponse)(m).GetVersion()
}
func (m *GetPluginInfoResponse) GetAuthor() string {
	return (*proto2.GetPluginInfoResponse)(m).GetAuthor()
}
func (m *GetPluginInfoResponse) GetCompany() string {
	return (*proto2.GetPluginInfoResponse)(m).GetCompany()
}

// * Represents the workload PID.
type AttestRequest struct {
	Pid int32 `protobuf:"varint,1,opt,name=pid" json:"pid,omitempty"`
}

func (m *AttestRequest) Reset()                    { *m = AttestRequest{} }
func (m *AttestRequest) String() string            { return proto1.CompactTextString(m) }
func (*AttestRequest) ProtoMessage()               {}
func (*AttestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AttestRequest) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

// * Represents a list of selectors resolved for a given PID.
type AttestResponse struct {
	Selectors []string `protobuf:"bytes,1,rep,name=selectors" json:"selectors,omitempty"`
}

func (m *AttestResponse) Reset()                    { *m = AttestResponse{} }
func (m *AttestResponse) String() string            { return proto1.CompactTextString(m) }
func (*AttestResponse) ProtoMessage()               {}
func (*AttestResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *AttestResponse) GetSelectors() []string {
	if m != nil {
		return m.Selectors
	}
	return nil
}

func init() {
	proto1.RegisterType((*AttestRequest)(nil), "proto.AttestRequest")
	proto1.RegisterType((*AttestResponse)(nil), "proto.AttestResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for WorkloadAttestor service

type WorkloadAttestorClient interface {
	// / Returns a list of selectors resolved for a given PID
	Attest(ctx context.Context, in *AttestRequest, opts ...grpc.CallOption) (*AttestResponse, error)
	// / Applies the plugin configuration and returns configuration errors
	Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error)
	// / Returns the version and related metadata of the plugin
	GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error)
}

type workloadAttestorClient struct {
	cc *grpc.ClientConn
}

func NewWorkloadAttestorClient(cc *grpc.ClientConn) WorkloadAttestorClient {
	return &workloadAttestorClient{cc}
}

func (c *workloadAttestorClient) Attest(ctx context.Context, in *AttestRequest, opts ...grpc.CallOption) (*AttestResponse, error) {
	out := new(AttestResponse)
	err := grpc.Invoke(ctx, "/proto.WorkloadAttestor/Attest", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadAttestorClient) Configure(ctx context.Context, in *proto2.ConfigureRequest, opts ...grpc.CallOption) (*proto2.ConfigureResponse, error) {
	out := new(proto2.ConfigureResponse)
	err := grpc.Invoke(ctx, "/proto.WorkloadAttestor/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workloadAttestorClient) GetPluginInfo(ctx context.Context, in *proto2.GetPluginInfoRequest, opts ...grpc.CallOption) (*proto2.GetPluginInfoResponse, error) {
	out := new(proto2.GetPluginInfoResponse)
	err := grpc.Invoke(ctx, "/proto.WorkloadAttestor/GetPluginInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WorkloadAttestor service

type WorkloadAttestorServer interface {
	// / Returns a list of selectors resolved for a given PID
	Attest(context.Context, *AttestRequest) (*AttestResponse, error)
	// / Applies the plugin configuration and returns configuration errors
	Configure(context.Context, *proto2.ConfigureRequest) (*proto2.ConfigureResponse, error)
	// / Returns the version and related metadata of the plugin
	GetPluginInfo(context.Context, *proto2.GetPluginInfoRequest) (*proto2.GetPluginInfoResponse, error)
}

func RegisterWorkloadAttestorServer(s *grpc.Server, srv WorkloadAttestorServer) {
	s.RegisterService(&_WorkloadAttestor_serviceDesc, srv)
}

func _WorkloadAttestor_Attest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AttestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).Attest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadAttestor/Attest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).Attest(ctx, req.(*AttestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadAttestor_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadAttestor/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).Configure(ctx, req.(*proto2.ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkloadAttestor_GetPluginInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto2.GetPluginInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkloadAttestorServer).GetPluginInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.WorkloadAttestor/GetPluginInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkloadAttestorServer).GetPluginInfo(ctx, req.(*proto2.GetPluginInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkloadAttestor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.WorkloadAttestor",
	HandlerType: (*WorkloadAttestorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Attest",
			Handler:    _WorkloadAttestor_Attest_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _WorkloadAttestor_Configure_Handler,
		},
		{
			MethodName: "GetPluginInfo",
			Handler:    _WorkloadAttestor_GetPluginInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workload_attestor.proto",
}

func init() { proto1.RegisterFile("workload_attestor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 253 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0xb7, 0x8c, 0x0d, 0x1a, 0x98, 0x8c, 0xa0, 0xac, 0xcc, 0x1d, 0xe6, 0x4e, 0x3b, 0x35, 0xa0,
	0x78, 0x15, 0xa6, 0x07, 0xd1, 0xd3, 0xe8, 0xc5, 0xe3, 0xe8, 0xda, 0xd7, 0x1a, 0x6c, 0xf3, 0x62,
	0xde, 0x2b, 0x7e, 0x52, 0xbf, 0x8f, 0x98, 0xa6, 0xca, 0xd4, 0x53, 0x5e, 0x7e, 0x7f, 0x1f, 0x4f,
	0xcc, 0xdf, 0xd1, 0xbd, 0x36, 0x98, 0x97, 0xfb, 0x9c, 0x19, 0x88, 0xd1, 0xa5, 0xd6, 0x21, 0xa3,
	0x1c, 0xfb, 0x67, 0x71, 0x57, 0x6b, 0x7e, 0xe9, 0x0e, 0x69, 0x81, 0xad, 0x22, 0xab, 0xab, 0x0a,
	0x14, 0x39, 0xad, 0x0c, 0x96, 0xb0, 0xcf, 0x6b, 0x30, 0xac, 0x6c, 0xd3, 0xd5, 0xda, 0x90, 0x2a,
	0xb0, 0x6d, 0xd1, 0x28, 0x6f, 0x0b, 0x9f, 0x3e, 0x6a, 0x7d, 0x29, 0xa6, 0x5b, 0x1f, 0x9e, 0xc1,
	0x5b, 0x07, 0xc4, 0x72, 0x26, 0x46, 0x56, 0x97, 0x49, 0xb4, 0x8a, 0x36, 0xe3, 0xec, 0x6b, 0x5c,
	0xa7, 0xe2, 0x74, 0x90, 0x90, 0x45, 0x43, 0x20, 0x97, 0x22, 0x26, 0x68, 0xa0, 0x60, 0x74, 0x94,
	0x44, 0xab, 0xd1, 0x26, 0xce, 0x7e, 0x80, 0xab, 0x8f, 0x48, 0xcc, 0x9e, 0xc3, 0xe6, 0xdb, 0xb0,
	0xb8, 0xbc, 0x11, 0x93, 0x7e, 0x96, 0x67, 0x7d, 0x73, 0x7a, 0x54, 0xbb, 0x38, 0xff, 0x85, 0x86,
	0xa6, 0x5b, 0x11, 0xdf, 0xa3, 0xa9, 0x74, 0xdd, 0x39, 0x90, 0xf3, 0xa0, 0xf9, 0x46, 0x06, 0x73,
	0xf2, 0x97, 0x08, 0xfe, 0x27, 0x31, 0x7d, 0x00, 0xde, 0xf9, 0x33, 0x3c, 0x9a, 0x0a, 0xe5, 0x45,
	0x90, 0x1e, 0xa1, 0x43, 0xce, 0xf2, 0x7f, 0xb2, 0xcf, 0xda, 0x9d, 0x1c, 0x26, 0x9e, 0xbe, 0xfe,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xac, 0x69, 0x60, 0x30, 0x99, 0x01, 0x00, 0x00,
}
