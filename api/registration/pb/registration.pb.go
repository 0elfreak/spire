// Code generated by protoc-gen-go. DO NOT EDIT.
// source: registration.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	registration.proto

It has these top-level messages:
	RegisteredEntry
	FederatedBundle
	CreateEntryRequest
	CreateEntryResponse
	DeleteEntryRequest
	DeleteEntryResponse
	ListByParentIDRequest
	ListByParentIDResponse
	ListBySelectorRequest
	ListBySelectorResponse
	ListBySpiffeIDRequest
	ListBySpiffeIDResponse
	CreateFederatedBundleRequest
	CreateFederatedBundleResponse
	ListFederatedBundlesRequest
	ListFederatedBundlesResponse
	UpdateFederatedBundleRequest
	UpdateFederatedBundleResponse
	DeleteFederatedBundleRequest
	DeleteFederatedBundleResponse
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// * This is a curated record that the Control Plane uses to set up and manage
// the various registered nodes and workloads that are controlled by it.
type RegisteredEntry struct {
	SelectorType               string   `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector                   string   `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
	ParentID                   string   `protobuf:"bytes,3,opt,name=parentID" json:"parentID,omitempty"`
	SpiffeId                   string   `protobuf:"bytes,4,opt,name=spiffeId" json:"spiffeId,omitempty"`
	Ttl                        int32    `protobuf:"varint,5,opt,name=ttl" json:"ttl,omitempty"`
	FederateBundleSpiffeIdList []string `protobuf:"bytes,6,rep,name=federateBundleSpiffeIdList" json:"federateBundleSpiffeIdList,omitempty"`
}

func (m *RegisteredEntry) Reset()                    { *m = RegisteredEntry{} }
func (m *RegisteredEntry) String() string            { return proto.CompactTextString(m) }
func (*RegisteredEntry) ProtoMessage()               {}
func (*RegisteredEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegisteredEntry) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *RegisteredEntry) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

func (m *RegisteredEntry) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

func (m *RegisteredEntry) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

func (m *RegisteredEntry) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

func (m *RegisteredEntry) GetFederateBundleSpiffeIdList() []string {
	if m != nil {
		return m.FederateBundleSpiffeIdList
	}
	return nil
}

// * A CA bundle for a different Trust Domain than the one used and managed by the Control Plane.
type FederatedBundle struct {
	FederateBundleSpiffeId string `protobuf:"bytes,1,opt,name=federateBundleSpiffeId" json:"federateBundleSpiffeId,omitempty"`
	FederateBundle         []byte `protobuf:"bytes,2,opt,name=federateBundle,proto3" json:"federateBundle,omitempty"`
	Ttl                    int32  `protobuf:"varint,3,opt,name=ttl" json:"ttl,omitempty"`
}

func (m *FederatedBundle) Reset()                    { *m = FederatedBundle{} }
func (m *FederatedBundle) String() string            { return proto.CompactTextString(m) }
func (*FederatedBundle) ProtoMessage()               {}
func (*FederatedBundle) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FederatedBundle) GetFederateBundleSpiffeId() string {
	if m != nil {
		return m.FederateBundleSpiffeId
	}
	return ""
}

func (m *FederatedBundle) GetFederateBundle() []byte {
	if m != nil {
		return m.FederateBundle
	}
	return nil
}

func (m *FederatedBundle) GetTtl() int32 {
	if m != nil {
		return m.Ttl
	}
	return 0
}

// * Represents an entity to be created
type CreateEntryRequest struct {
	RegisteredEntry *RegisteredEntry `protobuf:"bytes,1,opt,name=registeredEntry" json:"registeredEntry,omitempty"`
}

func (m *CreateEntryRequest) Reset()                    { *m = CreateEntryRequest{} }
func (m *CreateEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateEntryRequest) ProtoMessage()               {}
func (*CreateEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CreateEntryRequest) GetRegisteredEntry() *RegisteredEntry {
	if m != nil {
		return m.RegisteredEntry
	}
	return nil
}

// * No return value
type CreateEntryResponse struct {
}

func (m *CreateEntryResponse) Reset()                    { *m = CreateEntryResponse{} }
func (m *CreateEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateEntryResponse) ProtoMessage()               {}
func (*CreateEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

// * Represents the criteria that will be used to delete entries
type DeleteEntryRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector     string `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *DeleteEntryRequest) Reset()                    { *m = DeleteEntryRequest{} }
func (m *DeleteEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntryRequest) ProtoMessage()               {}
func (*DeleteEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *DeleteEntryRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *DeleteEntryRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

// * Represents the entities deleted
type DeleteEntryResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *DeleteEntryResponse) Reset()                    { *m = DeleteEntryResponse{} }
func (m *DeleteEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteEntryResponse) ProtoMessage()               {}
func (*DeleteEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DeleteEntryResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a ParentID whose children entities will be listed
type ListByParentIDRequest struct {
	ParentID string `protobuf:"bytes,1,opt,name=parentID" json:"parentID,omitempty"`
}

func (m *ListByParentIDRequest) Reset()                    { *m = ListByParentIDRequest{} }
func (m *ListByParentIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ListByParentIDRequest) ProtoMessage()               {}
func (*ListByParentIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListByParentIDRequest) GetParentID() string {
	if m != nil {
		return m.ParentID
	}
	return ""
}

// * Represents a list of entities associated with a given ParentID
type ListByParentIDResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListByParentIDResponse) Reset()                    { *m = ListByParentIDResponse{} }
func (m *ListByParentIDResponse) String() string            { return proto.CompactTextString(m) }
func (*ListByParentIDResponse) ProtoMessage()               {}
func (*ListByParentIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ListByParentIDResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a selector and type to be used as the criteria to list entities
type ListBySelectorRequest struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector     string `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *ListBySelectorRequest) Reset()                    { *m = ListBySelectorRequest{} }
func (m *ListBySelectorRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBySelectorRequest) ProtoMessage()               {}
func (*ListBySelectorRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ListBySelectorRequest) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *ListBySelectorRequest) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

// * Represents a list of entities associated with a given selector and type
type ListBySelectorResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListBySelectorResponse) Reset()                    { *m = ListBySelectorResponse{} }
func (m *ListBySelectorResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBySelectorResponse) ProtoMessage()               {}
func (*ListBySelectorResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ListBySelectorResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a Spiffe ID to be used as the criteria to list entities
type ListBySpiffeIDRequest struct {
	SpiffeId string `protobuf:"bytes,1,opt,name=spiffeId" json:"spiffeId,omitempty"`
}

func (m *ListBySpiffeIDRequest) Reset()                    { *m = ListBySpiffeIDRequest{} }
func (m *ListBySpiffeIDRequest) String() string            { return proto.CompactTextString(m) }
func (*ListBySpiffeIDRequest) ProtoMessage()               {}
func (*ListBySpiffeIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ListBySpiffeIDRequest) GetSpiffeId() string {
	if m != nil {
		return m.SpiffeId
	}
	return ""
}

// * Represents a list of entities associated with a given Spiffe ID
type ListBySpiffeIDResponse struct {
	RegisteredEntryList []*RegisteredEntry `protobuf:"bytes,1,rep,name=registeredEntryList" json:"registeredEntryList,omitempty"`
}

func (m *ListBySpiffeIDResponse) Reset()                    { *m = ListBySpiffeIDResponse{} }
func (m *ListBySpiffeIDResponse) String() string            { return proto.CompactTextString(m) }
func (*ListBySpiffeIDResponse) ProtoMessage()               {}
func (*ListBySpiffeIDResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *ListBySpiffeIDResponse) GetRegisteredEntryList() []*RegisteredEntry {
	if m != nil {
		return m.RegisteredEntryList
	}
	return nil
}

// * Represents a federated bundle to be added
type CreateFederatedBundleRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *CreateFederatedBundleRequest) Reset()                    { *m = CreateFederatedBundleRequest{} }
func (m *CreateFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedBundleRequest) ProtoMessage()               {}
func (*CreateFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CreateFederatedBundleRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * No return value
type CreateFederatedBundleResponse struct {
}

func (m *CreateFederatedBundleResponse) Reset()                    { *m = CreateFederatedBundleResponse{} }
func (m *CreateFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateFederatedBundleResponse) ProtoMessage()               {}
func (*CreateFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

// * No input parameter
type ListFederatedBundlesRequest struct {
}

func (m *ListFederatedBundlesRequest) Reset()                    { *m = ListFederatedBundlesRequest{} }
func (m *ListFederatedBundlesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedBundlesRequest) ProtoMessage()               {}
func (*ListFederatedBundlesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

// * Represents all the federated bundles
type ListFederatedBundlesResponse struct {
	FederatedBundleList []*FederatedBundle `protobuf:"bytes,1,rep,name=federatedBundleList" json:"federatedBundleList,omitempty"`
}

func (m *ListFederatedBundlesResponse) Reset()                    { *m = ListFederatedBundlesResponse{} }
func (m *ListFederatedBundlesResponse) String() string            { return proto.CompactTextString(m) }
func (*ListFederatedBundlesResponse) ProtoMessage()               {}
func (*ListFederatedBundlesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *ListFederatedBundlesResponse) GetFederatedBundleList() []*FederatedBundle {
	if m != nil {
		return m.FederatedBundleList
	}
	return nil
}

// * Represents a federated bundle to be updated
type UpdateFederatedBundleRequest struct {
	FederatedBundle *FederatedBundle `protobuf:"bytes,1,opt,name=federatedBundle" json:"federatedBundle,omitempty"`
}

func (m *UpdateFederatedBundleRequest) Reset()                    { *m = UpdateFederatedBundleRequest{} }
func (m *UpdateFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedBundleRequest) ProtoMessage()               {}
func (*UpdateFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *UpdateFederatedBundleRequest) GetFederatedBundle() *FederatedBundle {
	if m != nil {
		return m.FederatedBundle
	}
	return nil
}

// * No return value
type UpdateFederatedBundleResponse struct {
}

func (m *UpdateFederatedBundleResponse) Reset()                    { *m = UpdateFederatedBundleResponse{} }
func (m *UpdateFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateFederatedBundleResponse) ProtoMessage()               {}
func (*UpdateFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

// * Represents a federated bundle to be deleted
type DeleteFederatedBundleRequest struct {
	FederateBundleSpiffeId string `protobuf:"bytes,1,opt,name=federateBundleSpiffeId" json:"federateBundleSpiffeId,omitempty"`
}

func (m *DeleteFederatedBundleRequest) Reset()                    { *m = DeleteFederatedBundleRequest{} }
func (m *DeleteFederatedBundleRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleRequest) ProtoMessage()               {}
func (*DeleteFederatedBundleRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *DeleteFederatedBundleRequest) GetFederateBundleSpiffeId() string {
	if m != nil {
		return m.FederateBundleSpiffeId
	}
	return ""
}

// * No return value
type DeleteFederatedBundleResponse struct {
}

func (m *DeleteFederatedBundleResponse) Reset()                    { *m = DeleteFederatedBundleResponse{} }
func (m *DeleteFederatedBundleResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteFederatedBundleResponse) ProtoMessage()               {}
func (*DeleteFederatedBundleResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func init() {
	proto.RegisterType((*RegisteredEntry)(nil), "pb.RegisteredEntry")
	proto.RegisterType((*FederatedBundle)(nil), "pb.FederatedBundle")
	proto.RegisterType((*CreateEntryRequest)(nil), "pb.CreateEntryRequest")
	proto.RegisterType((*CreateEntryResponse)(nil), "pb.CreateEntryResponse")
	proto.RegisterType((*DeleteEntryRequest)(nil), "pb.DeleteEntryRequest")
	proto.RegisterType((*DeleteEntryResponse)(nil), "pb.DeleteEntryResponse")
	proto.RegisterType((*ListByParentIDRequest)(nil), "pb.ListByParentIDRequest")
	proto.RegisterType((*ListByParentIDResponse)(nil), "pb.ListByParentIDResponse")
	proto.RegisterType((*ListBySelectorRequest)(nil), "pb.ListBySelectorRequest")
	proto.RegisterType((*ListBySelectorResponse)(nil), "pb.ListBySelectorResponse")
	proto.RegisterType((*ListBySpiffeIDRequest)(nil), "pb.ListBySpiffeIDRequest")
	proto.RegisterType((*ListBySpiffeIDResponse)(nil), "pb.ListBySpiffeIDResponse")
	proto.RegisterType((*CreateFederatedBundleRequest)(nil), "pb.CreateFederatedBundleRequest")
	proto.RegisterType((*CreateFederatedBundleResponse)(nil), "pb.CreateFederatedBundleResponse")
	proto.RegisterType((*ListFederatedBundlesRequest)(nil), "pb.ListFederatedBundlesRequest")
	proto.RegisterType((*ListFederatedBundlesResponse)(nil), "pb.ListFederatedBundlesResponse")
	proto.RegisterType((*UpdateFederatedBundleRequest)(nil), "pb.UpdateFederatedBundleRequest")
	proto.RegisterType((*UpdateFederatedBundleResponse)(nil), "pb.UpdateFederatedBundleResponse")
	proto.RegisterType((*DeleteFederatedBundleRequest)(nil), "pb.DeleteFederatedBundleRequest")
	proto.RegisterType((*DeleteFederatedBundleResponse)(nil), "pb.DeleteFederatedBundleResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Registration service

type RegistrationClient interface {
	// / Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads
	CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error)
	// / Deletes a set of entries that match a given criteria
	DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error)
	// / Returns all the Entries associated with the ParentID value
	ListByParentID(ctx context.Context, in *ListByParentIDRequest, opts ...grpc.CallOption) (*ListByParentIDResponse, error)
	// / Returns all the entries associated with a selector value
	ListBySelector(ctx context.Context, in *ListBySelectorRequest, opts ...grpc.CallOption) (*ListBySelectorResponse, error)
	// / Return all registration entries for which SPIFFE ID matches
	ListBySpiffeID(ctx context.Context, in *ListBySpiffeIDRequest, opts ...grpc.CallOption) (*ListBySpiffeIDResponse, error)
	// / Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFEIds and their associated CA bundle
	CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*CreateFederatedBundleResponse, error)
	// / Retrieve Federated bundles for all the Federated SPIFFEIds
	ListFederatedBundles(ctx context.Context, in *ListFederatedBundlesRequest, opts ...grpc.CallOption) (*ListFederatedBundlesResponse, error)
	// / Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(ctx context.Context, in *UpdateFederatedBundleRequest, opts ...grpc.CallOption) (*UpdateFederatedBundleResponse, error)
	// / Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*DeleteFederatedBundleResponse, error)
}

type registrationClient struct {
	cc *grpc.ClientConn
}

func NewRegistrationClient(cc *grpc.ClientConn) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) CreateEntry(ctx context.Context, in *CreateEntryRequest, opts ...grpc.CallOption) (*CreateEntryResponse, error) {
	out := new(CreateEntryResponse)
	err := grpc.Invoke(ctx, "/pb.registration/CreateEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteEntry(ctx context.Context, in *DeleteEntryRequest, opts ...grpc.CallOption) (*DeleteEntryResponse, error) {
	out := new(DeleteEntryResponse)
	err := grpc.Invoke(ctx, "/pb.registration/DeleteEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListByParentID(ctx context.Context, in *ListByParentIDRequest, opts ...grpc.CallOption) (*ListByParentIDResponse, error) {
	out := new(ListByParentIDResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListByParentID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySelector(ctx context.Context, in *ListBySelectorRequest, opts ...grpc.CallOption) (*ListBySelectorResponse, error) {
	out := new(ListBySelectorResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListBySelector", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListBySpiffeID(ctx context.Context, in *ListBySpiffeIDRequest, opts ...grpc.CallOption) (*ListBySpiffeIDResponse, error) {
	out := new(ListBySpiffeIDResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListBySpiffeID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) CreateFederatedBundle(ctx context.Context, in *CreateFederatedBundleRequest, opts ...grpc.CallOption) (*CreateFederatedBundleResponse, error) {
	out := new(CreateFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/CreateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) ListFederatedBundles(ctx context.Context, in *ListFederatedBundlesRequest, opts ...grpc.CallOption) (*ListFederatedBundlesResponse, error) {
	out := new(ListFederatedBundlesResponse)
	err := grpc.Invoke(ctx, "/pb.registration/ListFederatedBundles", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdateFederatedBundle(ctx context.Context, in *UpdateFederatedBundleRequest, opts ...grpc.CallOption) (*UpdateFederatedBundleResponse, error) {
	out := new(UpdateFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/UpdateFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) DeleteFederatedBundle(ctx context.Context, in *DeleteFederatedBundleRequest, opts ...grpc.CallOption) (*DeleteFederatedBundleResponse, error) {
	out := new(DeleteFederatedBundleResponse)
	err := grpc.Invoke(ctx, "/pb.registration/DeleteFederatedBundle", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Registration service

type RegistrationServer interface {
	// / Creates an entry in the Registration table, used to assign SPIFFE IDs to nodes and workloads
	CreateEntry(context.Context, *CreateEntryRequest) (*CreateEntryResponse, error)
	// / Deletes a set of entries that match a given criteria
	DeleteEntry(context.Context, *DeleteEntryRequest) (*DeleteEntryResponse, error)
	// / Returns all the Entries associated with the ParentID value
	ListByParentID(context.Context, *ListByParentIDRequest) (*ListByParentIDResponse, error)
	// / Returns all the entries associated with a selector value
	ListBySelector(context.Context, *ListBySelectorRequest) (*ListBySelectorResponse, error)
	// / Return all registration entries for which SPIFFE ID matches
	ListBySpiffeID(context.Context, *ListBySpiffeIDRequest) (*ListBySpiffeIDResponse, error)
	// / Creates an entry in the Federated bundle table to store the mappings of Federated SPIFFEIds and their associated CA bundle
	CreateFederatedBundle(context.Context, *CreateFederatedBundleRequest) (*CreateFederatedBundleResponse, error)
	// / Retrieve Federated bundles for all the Federated SPIFFEIds
	ListFederatedBundles(context.Context, *ListFederatedBundlesRequest) (*ListFederatedBundlesResponse, error)
	// / Updates a particular Federated Bundle. Useful for rotation.
	UpdateFederatedBundle(context.Context, *UpdateFederatedBundleRequest) (*UpdateFederatedBundleResponse, error)
	// / Delete a particular Federated Bundle. Used to destroy inter-domain trust.
	DeleteFederatedBundle(context.Context, *DeleteFederatedBundleRequest) (*DeleteFederatedBundleResponse, error)
}

func RegisterRegistrationServer(s *grpc.Server, srv RegistrationServer) {
	s.RegisterService(&_Registration_serviceDesc, srv)
}

func _Registration_CreateEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/CreateEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateEntry(ctx, req.(*CreateEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/DeleteEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteEntry(ctx, req.(*DeleteEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListByParentID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByParentIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListByParentID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListByParentID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListByParentID(ctx, req.(*ListByParentIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySelector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySelectorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySelector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListBySelector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySelector(ctx, req.(*ListBySelectorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListBySpiffeID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBySpiffeIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListBySpiffeID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListBySpiffeID(ctx, req.(*ListBySpiffeIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_CreateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/CreateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).CreateFederatedBundle(ctx, req.(*CreateFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_ListFederatedBundles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederatedBundlesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/ListFederatedBundles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).ListFederatedBundles(ctx, req.(*ListFederatedBundlesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdateFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/UpdateFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdateFederatedBundle(ctx, req.(*UpdateFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_DeleteFederatedBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederatedBundleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.registration/DeleteFederatedBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).DeleteFederatedBundle(ctx, req.(*DeleteFederatedBundleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Registration_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEntry",
			Handler:    _Registration_CreateEntry_Handler,
		},
		{
			MethodName: "DeleteEntry",
			Handler:    _Registration_DeleteEntry_Handler,
		},
		{
			MethodName: "ListByParentID",
			Handler:    _Registration_ListByParentID_Handler,
		},
		{
			MethodName: "ListBySelector",
			Handler:    _Registration_ListBySelector_Handler,
		},
		{
			MethodName: "ListBySpiffeID",
			Handler:    _Registration_ListBySpiffeID_Handler,
		},
		{
			MethodName: "CreateFederatedBundle",
			Handler:    _Registration_CreateFederatedBundle_Handler,
		},
		{
			MethodName: "ListFederatedBundles",
			Handler:    _Registration_ListFederatedBundles_Handler,
		},
		{
			MethodName: "UpdateFederatedBundle",
			Handler:    _Registration_UpdateFederatedBundle_Handler,
		},
		{
			MethodName: "DeleteFederatedBundle",
			Handler:    _Registration_DeleteFederatedBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registration.proto",
}

func init() { proto.RegisterFile("registration.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 587 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x95, 0x6b, 0x52, 0xd1, 0x49, 0xd4, 0xa0, 0x0d, 0x09, 0xc6, 0xa4, 0xaa, 0xd9, 0x03, 0xca,
	0x29, 0x87, 0x56, 0xe2, 0x46, 0x0e, 0xa5, 0x05, 0x55, 0xe2, 0x80, 0x9c, 0x02, 0x42, 0x2a, 0x42,
	0x09, 0x9e, 0xa0, 0x48, 0x91, 0x6d, 0xd6, 0xdb, 0x43, 0xce, 0x7c, 0x26, 0x12, 0xdf, 0x82, 0xec,
	0x5d, 0xdb, 0xbb, 0x9b, 0xb5, 0x0f, 0x34, 0x3d, 0x25, 0xbb, 0x33, 0xf3, 0xe6, 0xcd, 0xec, 0xbc,
	0x49, 0x80, 0x30, 0xfc, 0xb9, 0xce, 0x38, 0x5b, 0xf0, 0x75, 0x12, 0x4f, 0x53, 0x96, 0xf0, 0x84,
	0x1c, 0xa4, 0x4b, 0xfa, 0xc7, 0x81, 0x7e, 0x58, 0x98, 0x90, 0x61, 0x74, 0x15, 0x73, 0xb6, 0x25,
	0x14, 0x7a, 0x19, 0x6e, 0xf0, 0x07, 0x4f, 0xd8, 0xcd, 0x36, 0x45, 0xcf, 0x09, 0x9c, 0xc9, 0x51,
	0xa8, 0xdd, 0x11, 0x1f, 0x1e, 0x97, 0x67, 0xef, 0xa0, 0xb0, 0x57, 0xe7, 0xdc, 0x96, 0x2e, 0x18,
	0xc6, 0xfc, 0xfa, 0xd2, 0x73, 0x85, 0xad, 0x3c, 0x17, 0x71, 0xe9, 0x7a, 0xb5, 0xc2, 0xeb, 0xc8,
	0x7b, 0x24, 0xe3, 0xe4, 0x99, 0x3c, 0x01, 0x97, 0xf3, 0x8d, 0xd7, 0x09, 0x9c, 0x49, 0x27, 0xcc,
	0xbf, 0x92, 0x19, 0xf8, 0x2b, 0x8c, 0x90, 0x2d, 0x38, 0x5e, 0xdc, 0xc5, 0xd1, 0x06, 0xe7, 0xd2,
	0xf7, 0xc3, 0x3a, 0xe3, 0xde, 0x61, 0xe0, 0x4e, 0x8e, 0xc2, 0x16, 0x0f, 0xfa, 0xdb, 0x81, 0xfe,
	0x3b, 0x69, 0x8e, 0x84, 0x9d, 0xbc, 0x86, 0x91, 0x3d, 0x42, 0xd6, 0xd9, 0x60, 0x25, 0xaf, 0xe0,
	0x58, 0xb7, 0x14, 0x75, 0xf7, 0x42, 0xe3, 0xb6, 0xac, 0xc2, 0xad, 0xaa, 0xa0, 0x73, 0x20, 0x6f,
	0x19, 0x2e, 0x38, 0x16, 0xed, 0x0d, 0xf1, 0xd7, 0x1d, 0x66, 0x9c, 0xbc, 0x81, 0x3e, 0xd3, 0x1b,
	0x5f, 0x10, 0xe8, 0x9e, 0x0d, 0xa6, 0xe9, 0x72, 0x6a, 0xbc, 0x49, 0x68, 0xfa, 0xd2, 0x21, 0x0c,
	0x34, 0xd0, 0x2c, 0x4d, 0xe2, 0x0c, 0xe9, 0x0d, 0x90, 0x4b, 0xdc, 0xa0, 0x91, 0xeb, 0x9e, 0x2f,
	0x4a, 0x6f, 0x61, 0xa0, 0xa1, 0x8a, 0x64, 0xe4, 0x0a, 0x06, 0x06, 0xad, 0xe2, 0x5d, 0x9c, 0xc0,
	0x6d, 0x2a, 0xc3, 0xe6, 0x4f, 0xcf, 0x61, 0x98, 0x7f, 0x5e, 0x6c, 0x3f, 0xca, 0x29, 0x29, 0x69,
	0xab, 0x83, 0xe4, 0xe8, 0x83, 0x44, 0xbf, 0xc3, 0xc8, 0x0c, 0xda, 0x2f, 0xab, 0x2f, 0x25, 0xab,
	0xb9, 0xec, 0xc2, 0xbe, 0x9a, 0x59, 0x31, 0xaf, 0x81, 0x1f, 0xa8, 0x9f, 0x72, 0x76, 0xd5, 0x7e,
	0x66, 0xfa, 0xb0, 0x57, 0x67, 0x85, 0x55, 0x15, 0xb4, 0x5f, 0x56, 0xdf, 0x60, 0x2c, 0x06, 0xd6,
	0x10, 0xa4, 0xa2, 0x87, 0x95, 0x6e, 0x51, 0xf5, 0x60, 0x06, 0x99, 0xbe, 0xf4, 0x14, 0x4e, 0x1a,
	0xe0, 0xa5, 0x32, 0x4e, 0xe0, 0x45, 0xce, 0xc3, 0x30, 0x67, 0x32, 0x3d, 0x45, 0x18, 0xdb, 0xcd,
	0x75, 0x17, 0x8c, 0x94, 0x66, 0x17, 0xcc, 0xc4, 0x36, 0xff, 0xbc, 0x0b, 0x9f, 0xd2, 0xe8, 0x21,
	0xbb, 0xd0, 0x00, 0x2f, 0xbb, 0xf0, 0x19, 0xc6, 0x42, 0xc9, 0x0d, 0xf9, 0xff, 0x73, 0x3b, 0xe6,
	0x89, 0x1b, 0x70, 0x45, 0xe2, 0xb3, 0xbf, 0x1d, 0xe8, 0xa9, 0xbf, 0x41, 0x64, 0x06, 0x5d, 0x65,
	0x81, 0x91, 0x51, 0x5e, 0xdf, 0xee, 0x9a, 0xf4, 0x9f, 0xed, 0xdc, 0xcb, 0x07, 0x99, 0x41, 0x57,
	0xd9, 0x49, 0x22, 0x7e, 0x77, 0xf5, 0x89, 0x78, 0xdb, 0xf2, 0x7a, 0x0f, 0xc7, 0xfa, 0x02, 0x21,
	0xcf, 0x73, 0x57, 0xeb, 0x26, 0xf2, 0x7d, 0x9b, 0xc9, 0x04, 0x2a, 0xf5, 0xac, 0x02, 0x19, 0xcb,
	0x43, 0x05, 0xda, 0x91, 0x7f, 0x0d, 0x24, 0x25, 0xa8, 0x01, 0xe9, 0x5a, 0xd6, 0x80, 0x4c, 0xc5,
	0xde, 0xc2, 0xd0, 0xaa, 0x05, 0x12, 0xd4, 0xcd, 0xb4, 0xbf, 0xbf, 0xff, 0xb2, 0xc5, 0x43, 0xa2,
	0x7f, 0x85, 0xa7, 0x36, 0xa5, 0x90, 0xd3, 0x92, 0x51, 0x83, 0xc4, 0xfc, 0xa0, 0xd9, 0xa1, 0x26,
	0x6e, 0x1d, 0x5f, 0x41, 0xbc, 0x4d, 0x38, 0x82, 0x78, 0xeb, 0xec, 0xe7, 0xe8, 0xd6, 0x19, 0x15,
	0xe8, 0x6d, 0xb2, 0x10, 0xe8, 0xad, 0x03, 0xbe, 0x3c, 0x2c, 0xfe, 0x54, 0x9d, 0xff, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0xf7, 0x15, 0x7e, 0x09, 0x6a, 0x09, 0x00, 0x00,
}
