// Code generated by protoc-gen-go. DO NOT EDIT.
// source: plugins/noderesolver/proto/node_resolution.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	plugins/noderesolver/proto/node_resolution.proto

It has these top-level messages:
	NodeResolution
	NodeResolutionList
	ResolveRequest
	ResolveResponse
	ConfigureRequest
	Empty
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeResolution struct {
	SelectorType string `protobuf:"bytes,1,opt,name=selectorType" json:"selectorType,omitempty"`
	Selector     string `protobuf:"bytes,2,opt,name=selector" json:"selector,omitempty"`
}

func (m *NodeResolution) Reset()                    { *m = NodeResolution{} }
func (m *NodeResolution) String() string            { return proto1.CompactTextString(m) }
func (*NodeResolution) ProtoMessage()               {}
func (*NodeResolution) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeResolution) GetSelectorType() string {
	if m != nil {
		return m.SelectorType
	}
	return ""
}

func (m *NodeResolution) GetSelector() string {
	if m != nil {
		return m.Selector
	}
	return ""
}

type NodeResolutionList struct {
	List []*NodeResolution `protobuf:"bytes,1,rep,name=list" json:"list,omitempty"`
}

func (m *NodeResolutionList) Reset()                    { *m = NodeResolutionList{} }
func (m *NodeResolutionList) String() string            { return proto1.CompactTextString(m) }
func (*NodeResolutionList) ProtoMessage()               {}
func (*NodeResolutionList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeResolutionList) GetList() []*NodeResolution {
	if m != nil {
		return m.List
	}
	return nil
}

type ResolveRequest struct {
	PhysicalSpiffeIdList []string `protobuf:"bytes,1,rep,name=physicalSpiffeIdList" json:"physicalSpiffeIdList,omitempty"`
}

func (m *ResolveRequest) Reset()                    { *m = ResolveRequest{} }
func (m *ResolveRequest) String() string            { return proto1.CompactTextString(m) }
func (*ResolveRequest) ProtoMessage()               {}
func (*ResolveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ResolveRequest) GetPhysicalSpiffeIdList() []string {
	if m != nil {
		return m.PhysicalSpiffeIdList
	}
	return nil
}

type ResolveResponse struct {
	Map map[string]*NodeResolutionList `protobuf:"bytes,1,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ResolveResponse) Reset()                    { *m = ResolveResponse{} }
func (m *ResolveResponse) String() string            { return proto1.CompactTextString(m) }
func (*ResolveResponse) ProtoMessage()               {}
func (*ResolveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ResolveResponse) GetMap() map[string]*NodeResolutionList {
	if m != nil {
		return m.Map
	}
	return nil
}

type ConfigureRequest struct {
	Configuration string `protobuf:"bytes,1,opt,name=configuration" json:"configuration,omitempty"`
}

func (m *ConfigureRequest) Reset()                    { *m = ConfigureRequest{} }
func (m *ConfigureRequest) String() string            { return proto1.CompactTextString(m) }
func (*ConfigureRequest) ProtoMessage()               {}
func (*ConfigureRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ConfigureRequest) GetConfiguration() string {
	if m != nil {
		return m.Configuration
	}
	return ""
}

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto1.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto1.RegisterType((*NodeResolution)(nil), "proto.NodeResolution")
	proto1.RegisterType((*NodeResolutionList)(nil), "proto.NodeResolutionList")
	proto1.RegisterType((*ResolveRequest)(nil), "proto.ResolveRequest")
	proto1.RegisterType((*ResolveResponse)(nil), "proto.ResolveResponse")
	proto1.RegisterType((*ConfigureRequest)(nil), "proto.ConfigureRequest")
	proto1.RegisterType((*Empty)(nil), "proto.Empty")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Node service

type NodeClient interface {
	Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error)
	Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error)
}

type nodeClient struct {
	cc *grpc.ClientConn
}

func NewNodeClient(cc *grpc.ClientConn) NodeClient {
	return &nodeClient{cc}
}

func (c *nodeClient) Resolve(ctx context.Context, in *ResolveRequest, opts ...grpc.CallOption) (*ResolveResponse, error) {
	out := new(ResolveResponse)
	err := grpc.Invoke(ctx, "/proto.node/Resolve", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeClient) Configure(ctx context.Context, in *ConfigureRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := grpc.Invoke(ctx, "/proto.node/Configure", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Node service

type NodeServer interface {
	Resolve(context.Context, *ResolveRequest) (*ResolveResponse, error)
	Configure(context.Context, *ConfigureRequest) (*Empty, error)
}

func RegisterNodeServer(s *grpc.Server, srv NodeServer) {
	s.RegisterService(&_Node_serviceDesc, srv)
}

func _Node_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResolveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.node/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Resolve(ctx, req.(*ResolveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Node_Configure_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServer).Configure(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.node/Configure",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServer).Configure(ctx, req.(*ConfigureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Node_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.node",
	HandlerType: (*NodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Resolve",
			Handler:    _Node_Resolve_Handler,
		},
		{
			MethodName: "Configure",
			Handler:    _Node_Configure_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "plugins/noderesolver/proto/node_resolution.proto",
}

func init() { proto1.RegisterFile("plugins/noderesolver/proto/node_resolution.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x51, 0x4d, 0x4f, 0xea, 0x40,
	0x14, 0x4d, 0xf9, 0x78, 0xc0, 0x85, 0xc7, 0x23, 0x37, 0x8f, 0xf7, 0xb0, 0x1b, 0xc9, 0xc4, 0x05,
	0x6e, 0x40, 0xeb, 0x86, 0xb8, 0x71, 0xa1, 0x2c, 0x4c, 0xd0, 0xe8, 0xe8, 0xde, 0x54, 0xb8, 0xe0,
	0xc4, 0xd2, 0x19, 0x3b, 0x53, 0x92, 0xfe, 0x12, 0xff, 0xae, 0xe9, 0x30, 0x34, 0x29, 0x61, 0xd5,
	0xde, 0x73, 0x4e, 0xcf, 0x3d, 0xe7, 0x16, 0x2e, 0x54, 0x94, 0xae, 0x45, 0xac, 0x27, 0xb1, 0x5c,
	0x52, 0x42, 0x5a, 0x46, 0x5b, 0x4a, 0x26, 0x2a, 0x91, 0x46, 0x5a, 0xe8, 0xcd, 0x62, 0xa9, 0x11,
	0x32, 0x1e, 0x5b, 0x14, 0xeb, 0xf6, 0xc1, 0x9e, 0xa0, 0xfb, 0x28, 0x97, 0xc4, 0x0b, 0x1a, 0x19,
	0x74, 0x34, 0x45, 0xb4, 0x30, 0x32, 0x79, 0xcd, 0x14, 0x0d, 0xbc, 0xa1, 0x37, 0x6a, 0xf1, 0x12,
	0x86, 0x3e, 0x34, 0xf7, 0xf3, 0xa0, 0x62, 0xf9, 0x62, 0x66, 0x37, 0x80, 0x65, 0xc7, 0xb9, 0xd0,
	0x06, 0xcf, 0xa1, 0x16, 0x09, 0x6d, 0x06, 0xde, 0xb0, 0x3a, 0x6a, 0x07, 0xfd, 0x5d, 0x88, 0x71,
	0x59, 0xc8, 0xad, 0x84, 0xdd, 0x41, 0x97, 0xef, 0x1a, 0x70, 0xfa, 0x4a, 0x49, 0x1b, 0x0c, 0xe0,
	0xaf, 0xfa, 0xc8, 0xb4, 0x58, 0x84, 0xd1, 0x8b, 0x12, 0xab, 0x15, 0xdd, 0x2f, 0xe7, 0x7b, 0xb3,
	0x16, 0x3f, 0xca, 0xb1, 0x6f, 0x0f, 0xfe, 0x14, 0x36, 0x5a, 0xc9, 0x58, 0x13, 0x5e, 0x42, 0x75,
	0x13, 0x2a, 0x97, 0xe1, 0xd4, 0x65, 0x38, 0x10, 0x8d, 0x1f, 0x42, 0x35, 0x8b, 0x4d, 0x92, 0xf1,
	0x5c, 0xeb, 0x3f, 0x43, 0x73, 0x0f, 0x60, 0x0f, 0xaa, 0x9f, 0x94, 0xb9, 0x83, 0xe4, 0xaf, 0x38,
	0x81, 0xfa, 0x36, 0x8c, 0x52, 0xb2, 0x47, 0x68, 0x07, 0x27, 0x47, 0x6b, 0xe5, 0x71, 0xf8, 0x4e,
	0x77, 0x5d, 0x99, 0x7a, 0x6c, 0x0a, 0xbd, 0x5b, 0x19, 0xaf, 0xc4, 0x3a, 0x4d, 0x8a, 0x86, 0x67,
	0xf0, 0x7b, 0xe1, 0xb0, 0x30, 0xff, 0xc6, 0x2d, 0x29, 0x83, 0xac, 0x01, 0xf5, 0xd9, 0x46, 0x99,
	0x2c, 0x30, 0x50, 0xcb, 0xff, 0x2a, 0x4e, 0xa1, 0xe1, 0xe2, 0x63, 0xff, 0xb0, 0x8e, 0x35, 0xf6,
	0xff, 0x1d, 0x6f, 0x89, 0x01, 0xb4, 0x8a, 0x10, 0xf8, 0xdf, 0x89, 0x0e, 0x63, 0xf9, 0x1d, 0x47,
	0xd8, 0xad, 0xef, 0xbf, 0xec, 0x70, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0x93, 0x22, 0x5d, 0x49,
	0x6d, 0x02, 0x00, 0x00,
}
